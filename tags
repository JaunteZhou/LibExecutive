!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCEPT_PENDING	include/errCode.h	/^const int ACCEPT_PENDING = BASE_CODE + 40;$/;"	v
ADD_MSG_ID	test/CLMessageLoopManagerTester.cpp	/^static const int ADD_MSG_ID = 1; $/;"	v	file:
ALLOCATED_SHARED_OBJECT	include/CLSharedObjectsImpl.h	13;"	d
Accept	src/CLSocket.cpp	/^CLStatus CLSocket::Accept(CLSocket **ppConnSock, CLSocketAddress **pOppoAddress)$/;"	f	class:CLSocket
Accept	src/CLTCPListenSocket.cpp	/^CLStatus CLTCPListenSocket::Accept(CLSocket **ppConnSock, CLSocketAddress **ppOppoAddr)$/;"	f	class:CLTCPListenSocket
AddDataStartIndex	src/CLBuffer.cpp	/^CLStatus CLBuffer::AddDataStartIndex(const int& addDataLen)$/;"	f	class:CLBuffer
AddUsedBufferLen	src/CLBuffer.cpp	/^CLStatus CLBuffer::AddUsedBufferLen(const int& addUsedLen)$/;"	f	class:CLBuffer
BASE_CODE	include/errCode.h	/^const int BASE_CODE = 100;$/;"	v
CLBASESOCKET_H	include/CLBaseSocket.h	2;"	d
CLBUFFER_H	include/CLBuffer.h	2;"	d
CLBaseSocket	include/CLBaseSocket.h	/^class CLBaseSocket$/;"	c
CLBaseSocket	src/CLBaseSocket.cpp	/^CLBaseSocket::CLBaseSocket(bool isBlock) : m_SocketFd(-1), m_bBlock(isBlock)$/;"	f	class:CLBaseSocket
CLBaseSocket	src/CLBaseSocket.cpp	/^CLBaseSocket::CLBaseSocket(int fd, bool isBlock)$/;"	f	class:CLBaseSocket
CLBuffer	include/CLBuffer.h	/^class CLBuffer$/;"	c
CLBuffer	src/CLBuffer.cpp	/^CLBuffer::CLBuffer(int itemSize) : m_iItemSize(itemSize), m_ciDataStartIndex(m_iDataStartIndex), m_ciUsedBufferLen(m_iUsedBufferLen)$/;"	f	class:CLBuffer
CLConditionVariable	include/CLConditionVariable.h	/^class CLConditionVariable$/;"	c
CLConditionVariable	src/CLConditionVariable.cpp	/^CLConditionVariable::CLConditionVariable()$/;"	f	class:CLConditionVariable
CLConditionVariable	src/CLConditionVariable.cpp	/^CLConditionVariable::CLConditionVariable(const char* pstrCondName)$/;"	f	class:CLConditionVariable
CLConditionVariable	src/CLConditionVariable.cpp	/^CLConditionVariable::CLConditionVariable(pthread_cond_t *pCond)$/;"	f	class:CLConditionVariable
CLConditionVariable_H	include/CLConditionVariable.h	2;"	d
CLCriticalSection	include/CLCriticalSection.h	/^class CLCriticalSection$/;"	c
CLCriticalSection	src/CLCriticalSection.cpp	/^CLCriticalSection::CLCriticalSection(CLMutex *pMutex)$/;"	f	class:CLCriticalSection
CLCriticalSection_H	include/CLCriticalSection.h	2;"	d
CLDATAPOSTERBYNAMEDPIPE_H	include/CLDataPosterByNamedPipe.h	2;"	d
CLDATAPOSTERBYSTLQUEUE_H	include/CLDataPosterBySTLQueue.h	2;"	d
CLDATAPOSTERCHANNELBYNAMEDPIPEMAINTAINER_H	include/CLDataPosterChannelByNamedPipeMaintainer.h	2;"	d
CLDATAPOSTERCHANNELBYSTLQUEUEMAINTAINER_H	include/CLDataPosterChannelBySTLQueueMaintainer.h	2;"	d
CLDATAPOSTERCHANNELMAINTAINER_H	include/CLDataPosterChannelMaintainer.h	2;"	d
CLDATAPOSTER_H	include/CLDataPoster.h	2;"	d
CLDATAPOSTRESULTNOTIFIER_H	include/CLDataPostResultNotifier.h	2;"	d
CLDATARECEIVERBYNAMEDPIPE_H	include/CLDataReceiverByNamedPipe.h	2;"	d
CLDATARECEIVERBYSTLQUEUE_H	include/CLDataReceiverBySTLQueue.h	2;"	d
CLDATARECEIVERBYTCPACCEPT_H	include/CLDataReceiverByTCPAccept.h	2;"	d
CLDATARECEIVERBYTIMERFD_H	include/CLDataReceiverByTimerFd.h	2;"	d
CLDATARECEIVER_H	include/CLDataReceiver.h	2;"	d
CLDataPostResultNotifier	include/CLDataPostResultNotifier.h	/^class CLDataPostResultNotifier$/;"	c
CLDataPostResultNotifier	src/CLDataPostResultNotifier.cpp	/^CLDataPostResultNotifier::CLDataPostResultNotifier(bool isDataDel) : m_bDataDelFlag(isDataDel), m_pMsg(NULL)$/;"	f	class:CLDataPostResultNotifier
CLDataPoster	include/CLDataPoster.h	/^class CLDataPoster$/;"	c
CLDataPoster	src/CLDataPoster.cpp	/^CLDataPoster::CLDataPoster()$/;"	f	class:CLDataPoster
CLDataPosterByNamedPipe	include/CLDataPosterByNamedPipe.h	/^class CLDataPosterByNamedPipe : public CLDataPoster$/;"	c
CLDataPosterByNamedPipe	src/CLDataPosterByNamedPipe.cpp	/^CLDataPosterByNamedPipe::CLDataPosterByNamedPipe(CLNamedPipe *pipe) : m_pNamedPipe(pipe)$/;"	f	class:CLDataPosterByNamedPipe
CLDataPosterBySTLQueue	include/CLDataPosterBySTLQueue.h	/^class CLDataPosterBySTLQueue : public CLDataPoster$/;"	c
CLDataPosterBySTLQueue	src/CLDataPosterBySTLQueue.cpp	/^CLDataPosterBySTLQueue::CLDataPosterBySTLQueue(CLSTLQueue *pQueue)$/;"	f	class:CLDataPosterBySTLQueue
CLDataPosterChannelByNamedPipeMaintainer	include/CLDataPosterChannelByNamedPipeMaintainer.h	/^class CLDataPosterChannelByNamedPipeMaintainer : public CLDataPosterChannelMaintainer$/;"	c
CLDataPosterChannelByNamedPipeMaintainer	src/CLDataPosterChannelByNamedPipeMaintainer.cpp	/^CLDataPosterChannelByNamedPipeMaintainer::CLDataPosterChannelByNamedPipeMaintainer(const char* pStrPipeName, bool isSharedPipe) : m_bIsSharedPipe(isSharedPipe)$/;"	f	class:CLDataPosterChannelByNamedPipeMaintainer
CLDataPosterChannelBySTLQueueMaintainer	include/CLDataPosterChannelBySTLQueueMaintainer.h	/^class CLDataPosterChannelBySTLQueueMaintainer : public CLDataPosterChannelMaintainer$/;"	c
CLDataPosterChannelBySTLQueueMaintainer	src/CLDataPosterChannelBySTLQueueMaintainer.cpp	/^CLDataPosterChannelBySTLQueueMaintainer::CLDataPosterChannelBySTLQueueMaintainer(CLSTLQueue *pQueue)$/;"	f	class:CLDataPosterChannelBySTLQueueMaintainer
CLDataPosterChannelMaintainer	include/CLDataPosterChannelMaintainer.h	/^class CLDataPosterChannelMaintainer$/;"	c
CLDataPosterChannelMaintainer	src/CLDataPosterChannelMaintainer.cpp	/^CLDataPosterChannelMaintainer::CLDataPosterChannelMaintainer()$/;"	f	class:CLDataPosterChannelMaintainer
CLDataReader	include/CLDataReader.h	/^class CLDataReader$/;"	c
CLDataReader	src/CLDataReader.cpp	/^CLDataReader::CLDataReader(int fd, CLProtoParser *pProtoParser, CLMessageReceiver pMsgReceiver)) : m_fd(fd), m_pProtoParser(pProtoParser)$/;"	f	class:CLDataReader
CLDataReader_H	include/CLDataReader.h	2;"	d
CLDataReceiver	include/CLDataReceiver.h	/^class CLDataReceiver$/;"	c
CLDataReceiver	src/CLDataReceiver.cpp	/^CLDataReceiver::CLDataReceiver()$/;"	f	class:CLDataReceiver
CLDataReceiverByNamedPipe	include/CLDataReceiverByNamedPipe.h	/^class CLDataReceiverByNamedPipe : public CLDataReceiver$/;"	c
CLDataReceiverByNamedPipe	src/CLDataReceiverByNamedPipe.cpp	/^CLDataReceiverByNamedPipe::CLDataReceiverByNamedPipe(const char *pStrPipeName, bool isSharedPipe) : m_NamedPipe(pStrPipeName, isSharedPipe, PIPE_FOR_READ)$/;"	f	class:CLDataReceiverByNamedPipe
CLDataReceiverBySTLQueue	include/CLDataReceiverBySTLQueue.h	/^class CLDataReceiverBySTLQueue : public CLDataReceiver$/;"	c
CLDataReceiverBySTLQueue	src/CLDataReceiverBySTLQueue.cpp	/^CLDataReceiverBySTLQueue::CLDataReceiverBySTLQueue(CLSTLQueue* pDataSTLQueue)$/;"	f	class:CLDataReceiverBySTLQueue
CLDataReceiverByTCPAccept	include/CLDataReceiverByTCPAccept.h	/^class CLDataReceiverByTCPAccept : public CLDataReceiver$/;"	c
CLDataReceiverByTCPAccept	src/CLDataReceiverByTCPAccept.cpp	/^CLDataReceiverByTCPAccept::CLDataReceiverByTCPAccept(const char *pHostNameOrIp, const char *pServiceNameOrPort, bool isBlock, int listenNum)$/;"	f	class:CLDataReceiverByTCPAccept
CLDataReceiverByTimerFd	include/CLDataReceiverByTimerFd.h	/^class CLDataReceiverByTimerFd : CLDataReceiver$/;"	c
CLDataReceiverByTimerFd	src/CLDataReceiverByTimerFd.cpp	/^CLDataReceiverByTimerFd::CLDataReceiverByTimerFd(int fd, CLTimerApplyMsg *pMsg)$/;"	f	class:CLDataReceiverByTimerFd
CLEPOLLEVENT_H	include/CLEpollEvent.h	2;"	d
CLEPOLL_H	include/CLEpoll.h	2;"	d
CLEVENT_H	include/CLEvent.h	2;"	d
CLEXECUTIVEFUNCTIONFORMSGLOOP_H	include/CLExecutiveFunctionForMsgLoop.h	2;"	d
CLEXECUTIVEFUNCTIONPROVIDER_H	include/CLExecutiveFunctionProvider.h	2;"	d
CLEXECUTIVE_H	include/CLExecutive.h	2;"	d
CLEpoll	include/CLEpoll.h	/^class CLEpoll$/;"	c
CLEpoll	src/CLEpoll.cpp	/^CLEpoll::CLEpoll()$/;"	f	class:CLEpoll
CLEpollEvent	include/CLEpollEvent.h	/^class CLEpollEvent$/;"	c
CLEpollEvent	src/CLEpollEvent.cpp	/^CLEpollEvent::CLEpollEvent(CLEpoll *pEpoll)$/;"	f	class:CLEpollEvent
CLEvent	include/CLEvent.h	/^class CLEvent$/;"	c
CLEvent	src/CLEvent.cpp	/^CLEvent::CLEvent()$/;"	f	class:CLEvent
CLEvent	src/CLEvent.cpp	/^CLEvent::CLEvent(bool bSemaphore)$/;"	f	class:CLEvent
CLEvent	src/CLEvent.cpp	/^CLEvent::CLEvent(const char *pstrEventName) : m_Mutex(pstrEventName, MUTEX_USE_SHARED_PTHREAD), m_Cond(pstrEventName)$/;"	f	class:CLEvent
CLEvent	src/CLEvent.cpp	/^CLEvent::CLEvent(const char *pstrEventName, bool bSemaphore) : m_Mutex(pstrEventName, MUTEX_USE_SHARED_PTHREAD), m_Cond(pstrEventName)$/;"	f	class:CLEvent
CLExecutive	include/CLExecutive.h	/^class CLExecutive$/;"	c
CLExecutive	src/CLExecutive.cpp	/^CLExecutive::CLExecutive(CLExecutiveFunctionProvider *pExecutiveFunctionProvider)$/;"	f	class:CLExecutive
CLExecutiveCommunication	include/CLExecutiveCommunication.h	/^class CLExecutiveCommunication$/;"	c
CLExecutiveCommunication	src/CLExecutiveCommunication.cpp	/^CLExecutiveCommunication::CLExecutiveCommunication()$/;"	f	class:CLExecutiveCommunication
CLExecutiveCommunicationByNamedPipe	include/CLExecutiveCommunicationByNamedPipe.h	/^class CLExecutiveCommunicationByNamedPipe : public CLExecutiveCommunication$/;"	c
CLExecutiveCommunicationByNamedPipe	src/CLExecutiveCommunicationByNamedPipe.cpp	/^CLExecutiveCommunicationByNamedPipe::CLExecutiveCommunicationByNamedPipe(const char *pstrExecutiveName, bool bDeleteMsg) : m_Event(pstrExecutiveName, true)$/;"	f	class:CLExecutiveCommunicationByNamedPipe
CLExecutiveCommunicationByNamedPipe_H	include/CLExecutiveCommunicationByNamedPipe.h	2;"	d
CLExecutiveCommunication_H	include/CLExecutiveCommunication.h	2;"	d
CLExecutiveFunctionForMsgLoop	include/CLExecutiveFunctionForMsgLoop.h	/^class CLExecutiveFunctionForMsgLoop : public CLExecutiveFunctionProvider$/;"	c
CLExecutiveFunctionForMsgLoop	src/CLExecutiveFunctionForMsgLoop.cpp	/^CLExecutiveFunctionForMsgLoop::CLExecutiveFunctionForMsgLoop(CLMessageLoopManager *pMsgLoopManager)$/;"	f	class:CLExecutiveFunctionForMsgLoop
CLExecutiveFunctionProvider	include/CLExecutiveFunctionProvider.h	/^class CLExecutiveFunctionProvider$/;"	c
CLExecutiveFunctionProvider	src/CLExecutiveFunctionProvider.cpp	/^CLExecutiveFunctionProvider::CLExecutiveFunctionProvider()$/;"	f	class:CLExecutiveFunctionProvider
CLExecutiveInitialFinishedNotifier	include/CLExecutiveInitialFinishedNotifier.h	/^class CLExecutiveInitialFinishedNotifier$/;"	c
CLExecutiveInitialFinishedNotifier	src/CLExecutiveInitialFinishedNotifier.cpp	/^CLExecutiveInitialFinishedNotifier::CLExecutiveInitialFinishedNotifier()$/;"	f	class:CLExecutiveInitialFinishedNotifier
CLExecutiveInitialFinishedNotifier_H	include/CLExecutiveInitialFinishedNotifier.h	2;"	d
CLExecutiveNameServer	include/CLExecutiveNameServer.h	/^class CLExecutiveNameServer$/;"	c
CLExecutiveNameServer	src/CLExecutiveNameServer.cpp	/^CLExecutiveNameServer::CLExecutiveNameServer()$/;"	f	class:CLExecutiveNameServer
CLExecutiveNameServer_H	include/CLExecutiveNameServer.h	2;"	d
CLFalseCommunication	test/CLExecutiveNameServerTester.cpp	/^class CLFalseCommunication : public CLExecutiveCommunication$/;"	c	file:
CLFalseCommunication2	test/CLExecutiveNameServerTester.cpp	/^class CLFalseCommunication2 : public CLExecutiveCommunication$/;"	c	file:
CLIOVECTOR_H	include/CLIOVector.h	2;"	d
CLIOVector	include/CLIOVector.h	/^class CLIOVector$/;"	c
CLIOVector	src/CLIOVector.cpp	/^CLIOVector::CLIOVector()$/;"	f	class:CLIOVector
CLIOVector	src/CLIOVector.cpp	/^CLIOVector::CLIOVector(const CLIOVector& rhs)$/;"	f	class:CLIOVector
CLLibExecutiveInitializer	include/CLLibExecutiveInitializer.h	/^class CLLibExecutiveInitializer$/;"	c
CLLibExecutiveInitializer_H	include/CLLibExecutiveInitializer.h	2;"	d
CLLogger	include/CLLogger.h	/^class CLLogger$/;"	c
CLLogger	src/CLLogger.cpp	/^CLLogger::CLLogger()$/;"	f	class:CLLogger
CLLogger_H	include/CLLogger.h	2;"	d
CLMESSAGEOBSERVER_H	include/CLMessageObserver.h	2;"	d
CLMESSAGEPOSTER_H	include/CLMessagePoster.h	2;"	d
CLMESSAGERECEIVERBYTCPLISTENER_H	include/CLMessageReceiverByTCPListener.h	2;"	d
CLMESSAGERECEIVERBYTIMERFD_H	include/CLMessageReceiverByTimerFd.h	2;"	d
CLMESSAGERECEIVER_H	include/CLMessageReceiver.h	2;"	d
CLMSGLOOPMANAGERFOREPOLL_H	include/CLMsgLoopManagerForEpoll.h	2;"	d
CLMSGLOOPMANAGERFORSOCKET_H	include/CLMsgLoopManagerForSocket.h	2;"	d
CLMULTIMSGDESERIALIZER_H	include/CLMultiMsgDeserializer.h	2;"	d
CLMULTIMSGSERIALIZER_H	include/CLMultiMsgSerializer.h	2;"	d
CLMessage	include/CLMessage.h	/^class CLMessage$/;"	c
CLMessage	src/CLMessage.cpp	/^CLMessage::CLMessage(unsigned long lMsgID) : m_clMsgID(m_lMsgID)$/;"	f	class:CLMessage
CLMessage1ForCLMessageQueueBySTLqueue	test/CLMessageQueueBySTLqueueTester.cpp	/^	CLMessage1ForCLMessageQueueBySTLqueue(int j) : CLMessage(j)$/;"	f	class:CLMessage1ForCLMessageQueueBySTLqueue
CLMessage1ForCLMessageQueueBySTLqueue	test/CLMessageQueueBySTLqueueTester.cpp	/^class CLMessage1ForCLMessageQueueBySTLqueue : public CLMessage$/;"	c	file:
CLMessageDeserializer	include/CLMessageDeserializer.h	/^class CLMessageDeserializer$/;"	c
CLMessageDeserializer	src/CLMessageDeserializer.cpp	/^CLMessageDeserializer::CLMessageDeserializer()$/;"	f	class:CLMessageDeserializer
CLMessageDeserializer_H	include/CLMessageDeserializer.h	2;"	d
CLMessageLoopManager	include/CLMessageLoopManager.h	/^class CLMessageLoopManager$/;"	c
CLMessageLoopManager	src/CLMessageLoopManager.cpp	/^CLMessageLoopManager::CLMessageLoopManager(CLMessageObserver *pMessageObserver)$/;"	f	class:CLMessageLoopManager
CLMessageLoopManager_H	include/CLMessageLoopManager.h	2;"	d
CLMessageObserver	include/CLMessageObserver.h	/^class CLMessageObserver$/;"	c
CLMessageObserver	src/CLMessageObserver.cpp	/^CLMessageObserver::CLMessageObserver()$/;"	f	class:CLMessageObserver
CLMessagePoster	include/CLMessagePoster.h	/^class CLMessagePoster$/;"	c
CLMessagePoster	src/CLMessagePoster.cpp	/^CLMessagePoster::CLMessagePoster(CLDataPosterChannelMaintainer *pDataPosterChannel, CLMessageSerializer *pMsgSerializer, CLProtocolEncapsulator *pProtoEncapsulator, CLEvent *pEvent)$/;"	f	class:CLMessagePoster
CLMessageReceiver	include/CLMessageReceiver.h	/^class CLMessageReceiver$/;"	c
CLMessageReceiver	src/CLMessageReceiver.cpp	/^CLMessageReceiver::CLMessageReceiver()$/;"	f	class:CLMessageReceiver
CLMessageReceiver	src/CLMessageReceiver.cpp	/^CLMessageReceiver::CLMessageReceiver(CLDataReceiver *pDataReceiver, CLProtoParser *pProtoParser, CLMessageDeserializer *pMsgDeserializer)$/;"	f	class:CLMessageReceiver
CLMessageReceiverByNamedPipe	include/CLMessageReceiverByNamedPipe.h	/^class CLMessageReceiverByNamedPipe : public CLMessageReceiver$/;"	c
CLMessageReceiverByNamedPipe	src/CLMessageReceiverByNamedPipe.cpp	/^CLMessageReceiverByNamedPipe::CLMessageReceiverByNamedPipe(const char *pstrPipeName) $/;"	f	class:CLMessageReceiverByNamedPipe
CLMessageReceiverByNamedPipe_H	include/CLMessageReceiverByNamedPipe.h	2;"	d
CLMessageReceiverBySTLqueue	include/CLMessageReceiverBySTLqueue.h	/^class CLMessageReceiverBySTLqueue : public CLMessageReceiver$/;"	c
CLMessageReceiverBySTLqueue	src/CLMessageReceiverBySTLqueue.cpp	/^CLMessageReceiverBySTLqueue::CLMessageReceiverBySTLqueue() : CLMessageReceiver(NULL)$/;"	f	class:CLMessageReceiverBySTLqueue
CLMessageReceiverBySTLqueue_H	include/CLMessageReceiverBySTLqueue.h	2;"	d
CLMessageReceiverByTCPListener	include/CLMessageReceiverByTCPListener.h	/^class CLMessageReceiverByTCPListener : public CLMessageReceiver$/;"	c
CLMessageReceiverByTCPListener	src/CLMessageReceiverByTCPListener.cpp	/^CLMessageReceiverByTCPListener::CLMessageReceiverByTCPListener($/;"	f	class:CLMessageReceiverByTCPListener
CLMessageReceiverByTimerFd	include/CLMessageReceiverByTimerFd.h	/^class CLMessageReceiverByTimerFd : public CLMessageReceiver$/;"	c
CLMessageReceiverByTimerFd	src/CLMessageReceiverByTimerFd.cpp	/^CLMessageReceiverByTimerFd::CLMessageReceiverByTimerFd(CLTimerFd *pTimer)$/;"	f	class:CLMessageReceiverByTimerFd
CLMessageSerializer	include/CLMessageSerializer.h	/^class CLMessageSerializer$/;"	c
CLMessageSerializer	src/CLMessageSerializer.cpp	/^CLMessageSerializer::CLMessageSerializer()$/;"	f	class:CLMessageSerializer
CLMessageSerializer_H	include/CLMessageSerializer.h	2;"	d
CLMessage_H	include/CLMessage.h	2;"	d
CLMsg1ForCLMsgLoopManagerForPipeQueue	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLMsg1ForCLMsgLoopManagerForPipeQueue() : CLMessage(1)$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue
CLMsg1ForCLMsgLoopManagerForPipeQueue	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLMsg1ForCLMsgLoopManagerForPipeQueue : public CLMessage$/;"	c	file:
CLMsg1ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	CLMsg1ForCLMsgLoopManagerForPipeQueue() : CLMessage(1)$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue
CLMsg1ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^class CLMsg1ForCLMsgLoopManagerForPipeQueue : public CLMessage$/;"	c	file:
CLMsg1ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	CLMsg1ForCLMsgLoopManagerForPipeQueue() : CLMessage(1)$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue
CLMsg1ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^class CLMsg1ForCLMsgLoopManagerForPipeQueue : public CLMessage$/;"	c	file:
CLMsg1ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	CLMsg1ForCLMsgLoopManagerForPipeQueue() : CLMessage(1)$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue
CLMsg1ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^class CLMsg1ForCLMsgLoopManagerForPipeQueue : public CLMessage$/;"	c	file:
CLMsg1ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	CLMsg1ForCLMsgLoopManagerForPipeQueue() : CLMessage(1)$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue
CLMsg1ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^class CLMsg1ForCLMsgLoopManagerForPipeQueue : public CLMessage$/;"	c	file:
CLMsg1ForCLMsgLoopManagerForPipeQueue	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLMsg1ForCLMsgLoopManagerForPipeQueue() : CLMessage(1)$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue
CLMsg1ForCLMsgLoopManagerForPipeQueue	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLMsg1ForCLMsgLoopManagerForPipeQueue : public CLMessage$/;"	c	file:
CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer : public CLMessageDeserializer$/;"	c	file:
CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^class CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer : public CLMessageDeserializer$/;"	c	file:
CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^class CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer : public CLMessageDeserializer$/;"	c	file:
CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^class CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer : public CLMessageDeserializer$/;"	c	file:
CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^class CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer : public CLMessageDeserializer$/;"	c	file:
CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer : public CLMessageDeserializer$/;"	c	file:
CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer : public CLMessageSerializer$/;"	c	file:
CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^class CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer : public CLMessageSerializer$/;"	c	file:
CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^class CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer : public CLMessageSerializer$/;"	c	file:
CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^class CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer : public CLMessageSerializer$/;"	c	file:
CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^class CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer : public CLMessageSerializer$/;"	c	file:
CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer : public CLMessageSerializer$/;"	c	file:
CLMsg1ForCLNonThreadForMsgLoop	test/CLNonThreadForMsgLoopTester.cpp	/^	CLMsg1ForCLNonThreadForMsgLoop() : CLMessage(1)$/;"	f	class:CLMsg1ForCLNonThreadForMsgLoop
CLMsg1ForCLNonThreadForMsgLoop	test/CLNonThreadForMsgLoopTester.cpp	/^class CLMsg1ForCLNonThreadForMsgLoop : public CLMessage$/;"	c	file:
CLMsg1ForCLNonThreadForMsgLoop_Deserializer	test/CLNonThreadForMsgLoopTester.cpp	/^class CLMsg1ForCLNonThreadForMsgLoop_Deserializer : public CLMessageDeserializer$/;"	c	file:
CLMsg1ForCLNonThreadForMsgLoop_Serializer	test/CLNonThreadForMsgLoopTester.cpp	/^class CLMsg1ForCLNonThreadForMsgLoop_Serializer : public CLMessageSerializer$/;"	c	file:
CLMsg1ForCLThreadForMsgLoop	test/CLThreadForMsgLoopTester.cpp	/^	CLMsg1ForCLThreadForMsgLoop() : CLMessage(1)$/;"	f	class:CLMsg1ForCLThreadForMsgLoop
CLMsg1ForCLThreadForMsgLoop	test/CLThreadForMsgLoopTester.cpp	/^class CLMsg1ForCLThreadForMsgLoop : public CLMessage$/;"	c	file:
CLMsg1ForCLThreadForMsgLoop_Deserializer	test/CLThreadForMsgLoopTester.cpp	/^class CLMsg1ForCLThreadForMsgLoop_Deserializer : public CLMessageDeserializer$/;"	c	file:
CLMsg1ForCLThreadForMsgLoop_Serializer	test/CLThreadForMsgLoopTester.cpp	/^class CLMsg1ForCLThreadForMsgLoop_Serializer : public CLMessageSerializer$/;"	c	file:
CLMsg2ForCLMsgLoopManagerForPipeQueue	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLMsg2ForCLMsgLoopManagerForPipeQueue() : CLMessage(2)$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue
CLMsg2ForCLMsgLoopManagerForPipeQueue	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLMsg2ForCLMsgLoopManagerForPipeQueue : public CLMessage$/;"	c	file:
CLMsg2ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	CLMsg2ForCLMsgLoopManagerForPipeQueue() : CLMessage(2)$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue
CLMsg2ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^class CLMsg2ForCLMsgLoopManagerForPipeQueue : public CLMessage$/;"	c	file:
CLMsg2ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	CLMsg2ForCLMsgLoopManagerForPipeQueue() : CLMessage(2)$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue
CLMsg2ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^class CLMsg2ForCLMsgLoopManagerForPipeQueue : public CLMessage$/;"	c	file:
CLMsg2ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	CLMsg2ForCLMsgLoopManagerForPipeQueue() : CLMessage(2)$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue
CLMsg2ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^class CLMsg2ForCLMsgLoopManagerForPipeQueue : public CLMessage$/;"	c	file:
CLMsg2ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	CLMsg2ForCLMsgLoopManagerForPipeQueue() : CLMessage(2)$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue
CLMsg2ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^class CLMsg2ForCLMsgLoopManagerForPipeQueue : public CLMessage$/;"	c	file:
CLMsg2ForCLMsgLoopManagerForPipeQueue	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLMsg2ForCLMsgLoopManagerForPipeQueue() : CLMessage(2)$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue
CLMsg2ForCLMsgLoopManagerForPipeQueue	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLMsg2ForCLMsgLoopManagerForPipeQueue : public CLMessage$/;"	c	file:
CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer : public CLMessageDeserializer$/;"	c	file:
CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^class CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer : public CLMessageDeserializer$/;"	c	file:
CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^class CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer : public CLMessageDeserializer$/;"	c	file:
CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^class CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer : public CLMessageDeserializer$/;"	c	file:
CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^class CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer : public CLMessageDeserializer$/;"	c	file:
CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer : public CLMessageDeserializer$/;"	c	file:
CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer : public CLMessageSerializer$/;"	c	file:
CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^class CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer : public CLMessageSerializer$/;"	c	file:
CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^class CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer : public CLMessageSerializer$/;"	c	file:
CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^class CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer : public CLMessageSerializer$/;"	c	file:
CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^class CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer : public CLMessageSerializer$/;"	c	file:
CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer : public CLMessageSerializer$/;"	c	file:
CLMsg2ForCLNonThreadForMsgLoop	test/CLNonThreadForMsgLoopTester.cpp	/^	CLMsg2ForCLNonThreadForMsgLoop() : CLMessage(2)$/;"	f	class:CLMsg2ForCLNonThreadForMsgLoop
CLMsg2ForCLNonThreadForMsgLoop	test/CLNonThreadForMsgLoopTester.cpp	/^class CLMsg2ForCLNonThreadForMsgLoop : public CLMessage$/;"	c	file:
CLMsg2ForCLNonThreadForMsgLoop_Deserializer	test/CLNonThreadForMsgLoopTester.cpp	/^class CLMsg2ForCLNonThreadForMsgLoop_Deserializer : public CLMessageDeserializer$/;"	c	file:
CLMsg2ForCLNonThreadForMsgLoop_Serializer	test/CLNonThreadForMsgLoopTester.cpp	/^class CLMsg2ForCLNonThreadForMsgLoop_Serializer : public CLMessageSerializer$/;"	c	file:
CLMsg2ForCLThreadForMsgLoop	test/CLThreadForMsgLoopTester.cpp	/^	CLMsg2ForCLThreadForMsgLoop() : CLMessage(2)$/;"	f	class:CLMsg2ForCLThreadForMsgLoop
CLMsg2ForCLThreadForMsgLoop	test/CLThreadForMsgLoopTester.cpp	/^class CLMsg2ForCLThreadForMsgLoop : public CLMessage$/;"	c	file:
CLMsg2ForCLThreadForMsgLoop_Deserializer	test/CLThreadForMsgLoopTester.cpp	/^class CLMsg2ForCLThreadForMsgLoop_Deserializer : public CLMessageDeserializer$/;"	c	file:
CLMsg2ForCLThreadForMsgLoop_Serializer	test/CLThreadForMsgLoopTester.cpp	/^class CLMsg2ForCLThreadForMsgLoop_Serializer : public CLMessageSerializer$/;"	c	file:
CLMsgLoopManagerForEpoll	include/CLMsgLoopManagerForEpoll.h	/^class CLMsgLoopManagerForEpoll : public CLMessageLoopManager$/;"	c
CLMsgLoopManagerForEpoll	src/CLMsgLoopManagerForEpoll.cpp	/^CLMsgLoopManagerForEpoll::CLMsgLoopManagerForEpoll(CLMessageObserver *pMessageObserver, CLEpoll *pEpoll, CLMultiMsgDeserializer *pMsgDeserializer) : CLMessageLoopManager(pMessageObserver)$/;"	f	class:CLMsgLoopManagerForEpoll
CLMsgLoopManagerForIOMultiplex	include/CLMsgLoopManagerForIOMultiplex.h	/^class CLMsgLoopManagerForIOMultiplex : public CLMessageLoopManager$/;"	c
CLMsgLoopManagerForIOMultiplex	src/CLMsgLoopManagerForIOMultiplex.cpp	/^CLMsgLoopManagerForIOMultiplex::CLMsgLoopManagerForIOMultiplex(CLMessageObserver *pMsgObserver, const char* pstrThreadName, int PipeQueueType) : CLMessageLoopManager(pMsgObserver)$/;"	f	class:CLMsgLoopManagerForIOMultiplex
CLMsgLoopManagerForIOMultiplex_H	include/CLMsgLoopManagerForIOMultiplex.h	2;"	d
CLMsgLoopManagerForPipeQueue	include/CLMsgLoopManagerForPipeQueue.h	/^class CLMsgLoopManagerForPipeQueue : public CLMessageLoopManager$/;"	c
CLMsgLoopManagerForPipeQueue	src/CLMsgLoopManagerForPipeQueue.cpp	/^CLMsgLoopManagerForPipeQueue::CLMsgLoopManagerForPipeQueue(CLMessageObserver *pMsgObserver, const char* pstrThreadName, int PipeQueueType,  CLMessageDeserializer *pMsgDeserializer) : CLMessageLoopManager(pMsgObserver), m_bIsShared(false)$/;"	f	class:CLMsgLoopManagerForPipeQueue
CLMsgLoopManagerForPipeQueue_H	include/CLMsgLoopManagerForPipeQueue.h	2;"	d
CLMsgLoopManagerForSTLqueue	include/CLMsgLoopManagerForSTLqueue.h	/^class CLMsgLoopManagerForSTLqueue : public CLMessageLoopManager$/;"	c
CLMsgLoopManagerForSTLqueue	src/CLMsgLoopManagerForSTLqueue.cpp	/^CLMsgLoopManagerForSTLqueue::CLMsgLoopManagerForSTLqueue(CLMessageObserver *pMsgObserver, const char* pstrThreadName) : CLMessageLoopManager(pMsgObserver)$/;"	f	class:CLMsgLoopManagerForSTLqueue
CLMsgLoopManagerForSTLqueue_H	include/CLMsgLoopManagerForSTLqueue.h	2;"	d
CLMsgLoopManagerForSocket	include/CLMsgLoopManagerForSocket.h	/^class CLMsgLoopManagerForSocket : public CLMessageLoopManager$/;"	c
CLMultiMsgDeserializer	include/CLMultiMsgDeserializer.h	/^class CLMultiMsgDeserializer : public CLMessageDeserializer$/;"	c
CLMultiMsgDeserializer	src/CLMultiMsgDeserializer.cpp	/^CLMultiMsgDeserializer::CLMultiMsgDeserializer()$/;"	f	class:CLMultiMsgDeserializer
CLMultiMsgSerializer	include/CLMultiMsgSerializer.h	/^class CLMultiMsgSerializer : public CLMessageSerializer$/;"	c
CLMultiMsgSerializer	src/CLMultiMsgSerializer.cpp	/^CLMultiMsgSerializer::CLMultiMsgSerializer()$/;"	f	class:CLMultiMsgSerializer
CLMutex	include/CLMutex.h	/^class CLMutex$/;"	c
CLMutex	src/CLMutex.cpp	/^CLMutex::CLMutex()$/;"	f	class:CLMutex
CLMutex	src/CLMutex.cpp	/^CLMutex::CLMutex(const char *pstrFileName, int nType)$/;"	f	class:CLMutex
CLMutex	src/CLMutex.cpp	/^CLMutex::CLMutex(const char *pstrFileName, pthread_mutex_t *pMutex)$/;"	f	class:CLMutex
CLMutex	src/CLMutex.cpp	/^CLMutex::CLMutex(pthread_mutex_t *pMutex)$/;"	f	class:CLMutex
CLMutexByPThread	include/CLMutexByPThread.h	/^class CLMutexByPThread : public CLMutexInterface$/;"	c
CLMutexByPThread	src/CLMutexByPThread.cpp	/^CLMutexByPThread::CLMutexByPThread()$/;"	f	class:CLMutexByPThread
CLMutexByPThread	src/CLMutexByPThread.cpp	/^CLMutexByPThread::CLMutexByPThread(pthread_mutex_t *pMutex)$/;"	f	class:CLMutexByPThread
CLMutexByPThread_H	include/CLMutexByPThread.h	2;"	d
CLMutexByRecordLocking	include/CLMutexByRecordLocking.h	/^class CLMutexByRecordLocking : public CLMutexInterface$/;"	c
CLMutexByRecordLocking	src/CLMutexByRecordLocking.cpp	/^CLMutexByRecordLocking::CLMutexByRecordLocking(const char *pstrFileName)$/;"	f	class:CLMutexByRecordLocking
CLMutexByRecordLockingAndPThread	include/CLMutexByRecordLockingAndPThread.h	/^class CLMutexByRecordLockingAndPThread : public CLMutexInterface$/;"	c
CLMutexByRecordLockingAndPThread	src/CLMutexByRecordLockingAndPThread.cpp	/^CLMutexByRecordLockingAndPThread::CLMutexByRecordLockingAndPThread(const char *pstrFileName) : m_ProcessMutex(pstrFileName, MUTEX_USE_RECORD_LOCK)$/;"	f	class:CLMutexByRecordLockingAndPThread
CLMutexByRecordLockingAndPThread	src/CLMutexByRecordLockingAndPThread.cpp	/^CLMutexByRecordLockingAndPThread::CLMutexByRecordLockingAndPThread(const char *pstrFileName, pthread_mutex_t *pMutex) : m_ThreadMutex(pMutex), m_ProcessMutex(pstrFileName, MUTEX_USE_RECORD_LOCK)$/;"	f	class:CLMutexByRecordLockingAndPThread
CLMutexByRecordLockingAndPThread_H	include/CLMutexByRecordLockingAndPThread.h	2;"	d
CLMutexByRecordLocking_H	include/CLMutexByRecordLocking.h	2;"	d
CLMutexBySharedPThread	include/CLMutexBySharedPThread.h	/^class CLMutexBySharedPThread : public CLMutexInterface$/;"	c
CLMutexBySharedPThread	src/CLMutexBySharedPThread.cpp	/^CLMutexBySharedPThread::CLMutexBySharedPThread(const char *pstrMutexName)$/;"	f	class:CLMutexBySharedPThread
CLMutexBySharedPThread_H	include/CLMutexBySharedPThread.h	2;"	d
CLMutexInterface	include/CLMutexInterface.h	/^class CLMutexInterface$/;"	c
CLMutexInterface	src/CLMutexInterface.cpp	/^CLMutexInterface::CLMutexInterface()$/;"	f	class:CLMutexInterface
CLMutexInterface_H	include/CLMutexInterface.h	2;"	d
CLMutex_H	include/CLMutex.h	2;"	d
CLMyMsgLoopManagerForExecutiveFunctionTest	test/CLExecutiveFunctionForMsgLoopTester.cpp	/^	CLMyMsgLoopManagerForExecutiveFunctionTest(CLMessageObserver *pMessageObserver) : CLMessageLoopManager(pMessageObserver)$/;"	f	class:CLMyMsgLoopManagerForExecutiveFunctionTest
CLMyMsgLoopManagerForExecutiveFunctionTest	test/CLExecutiveFunctionForMsgLoopTester.cpp	/^class CLMyMsgLoopManagerForExecutiveFunctionTest : public CLMessageLoopManager$/;"	c	file:
CLMyObserverforExecutiveFunctionTest	test/CLExecutiveFunctionForMsgLoopTester.cpp	/^class CLMyObserverforExecutiveFunctionTest : public CLMessageObserver$/;"	c	file:
CLNAMEDPIPE_H	include/CLNamedPipe.h	2;"	d
CLNamedPipe	include/CLNamedPipe.h	/^class CLNamedPipe$/;"	c
CLNamedPipe	src/CLNamedPipe.cpp	/^CLNamedPipe::CLNamedPipe(const char* pStrPipeName, bool isShared, int flag)$/;"	f	class:CLNamedPipe
CLNonThreadForMsgLoop	include/CLNonThreadForMsgLoop.h	/^class CLNonThreadForMsgLoop$/;"	c
CLNonThreadForMsgLoop	src/CLNonThreadForMsgLoop.cpp	/^CLNonThreadForMsgLoop::CLNonThreadForMsgLoop(CLMessageObserver *pMsgObserver, const char *pstrThreadName, int ExecutiveType)$/;"	f	class:CLNonThreadForMsgLoop
CLNonThreadForMsgLoop_H	include/CLNonThreadForMsgLoop.h	2;"	d
CLObserverTester1ForCLMsgLoopManagerForSTLqueue	test/CLMsgLoopManagerForSTLQueueTester.cpp	/^class CLObserverTester1ForCLMsgLoopManagerForSTLqueue : public CLMessageObserver$/;"	c	file:
CLObserverTester1ForCLMsgLoopManagerForSTLqueue	test_for_me/CLMsgLoopManagerForSTLQueueTester.cpp	/^class CLObserverTester1ForCLMsgLoopManagerForSTLqueue : public CLMessageObserver$/;"	c	file:
CLObserverTesterForCLMsgLoopManagerForSTLqueue	test/CLMsgLoopManagerForSTLQueueTester.cpp	/^class CLObserverTesterForCLMsgLoopManagerForSTLqueue : public CLMessageObserver$/;"	c	file:
CLObserverTesterForCLMsgLoopManagerForSTLqueue	test_for_exe_forgzh/test_for_QueuLoop/CLSTLQueueLoopTest.cpp	/^class CLObserverTesterForCLMsgLoopManagerForSTLqueue : public CLMessageObserver$/;"	c	file:
CLObserverTesterForCLMsgLoopManagerForSTLqueue	test_for_me/CLMsgLoopManagerForSTLQueueTester.cpp	/^class CLObserverTesterForCLMsgLoopManagerForSTLqueue : public CLMessageObserver$/;"	c	file:
CLPOINTERMSGDESERIALIZER_H	include/CLPointerMsgDeserializer.h	2;"	d
CLPOINTERMSGSERIALIZER_H	include/CLPointerMsgSerializer.h	2;"	d
CLPROTOCOLDATAPOSTER_H	include/CLProtocolDataPoster.h	2;"	d
CLPROTOENCAPFORDEFAULTMSGFORMAT_H	include/CLProtoEncapForDefaultMsgFormat.h	2;"	d
CLPROTOPARSERFORDEFAULTMSGFORMAT_H	include/CLProtoParserForDefaultMsgFormat.h	2;"	d
CLPROTOPARSERFORPOINTERMSG_H	include/CLProtoParserForPointerMsg.h	2;"	d
CLPROTOPARSER_H	include/CLProtoParser.h	3;"	d
CLPipeQueue_CLNonThreadForMsgLoop	test/CLNonThreadForMsgLoopTester.cpp	/^class CLPipeQueue_CLNonThreadForMsgLoop : public CLMessageObserver$/;"	c	file:
CLPipeQueue_CLThreadForMsgLoop	test/CLThreadForMsgLoopTester.cpp	/^class CLPipeQueue_CLThreadForMsgLoop : public CLMessageObserver$/;"	c	file:
CLPointerMsgDeserializer	include/CLPointerMsgDeserializer.h	/^class CLPointerMsgDeserializer : public CLMessageDeserializer$/;"	c
CLPointerMsgDeserializer	src/CLPointerMsgDeserializer.cpp	/^CLPointerMsgDeserializer::CLPointerMsgDeserializer()$/;"	f	class:CLPointerMsgDeserializer
CLPointerMsgSerializer	include/CLPointerMsgSerializer.h	/^class CLPointerMsgSerializer : public CLMessageSerializer$/;"	c
CLPointerMsgSerializer	src/CLPointerMsgSerializer.cpp	/^CLPointerMsgSerializer::CLPointerMsgSerializer()$/;"	f	class:CLPointerMsgSerializer
CLPrivateExecutiveCommunicationByNamedPipe	include/CLPrivateExecutiveCommunicationByNamedPipe.h	/^class CLPrivateExecutiveCommunicationByNamedPipe : public CLExecutiveCommunicationByNamedPipe$/;"	c
CLPrivateExecutiveCommunicationByNamedPipe	src/CLPrivateExecutiveCommunicationByNamedPipe.cpp	/^CLPrivateExecutiveCommunicationByNamedPipe::CLPrivateExecutiveCommunicationByNamedPipe(const char *pstrExecutiveName) : CLExecutiveCommunicationByNamedPipe(pstrExecutiveName, false)$/;"	f	class:CLPrivateExecutiveCommunicationByNamedPipe
CLPrivateExecutiveCommunicationByNamedPipe_H	include/CLPrivateExecutiveCommunicationByNamedPipe.h	2;"	d
CLPrivateMsgReceiverbyNamedPipe	include/CLPrivateMsgReceiverByNamedPipe.h	/^class CLPrivateMsgReceiverbyNamedPipe : public CLMessageQueueByNamedPipe$/;"	c
CLPrivateMsgReceiverbyNamedPipe	src/CLPrivateMsgReceiverbyNamedPipe.cpp	/^CLPrivateMsgReceiverbyNamedPipe::CLPrivateMsgReceiverbyNamedPipe(const char *pstrPipeName) : CLMessageQueueByNamedPipe(pstrPipeName)$/;"	f	class:CLPrivateMsgReceiverbyNamedPipe
CLPrivateMsgReceiverbyNamedPipe_H	include/CLPrivateMsgReceiverByNamedPipe.h	2;"	d
CLPrivateQueueForPostMsg_CLMsgLoopManagerForPipeQueue	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLPrivateQueueForPostMsg_CLMsgLoopManagerForPipeQueue : public CLMessageObserver$/;"	c	file:
CLPrivateQueueForPostMsg_CLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^class CLPrivateQueueForPostMsg_CLMsgLoopManagerForPipeQueue : public CLMessageObserver$/;"	c	file:
CLPrivateQueueForPostMsg_CLMsgLoopManagerForPipeQueue	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLPrivateQueueForPostMsg_CLMsgLoopManagerForPipeQueue : public CLMessageObserver$/;"	c	file:
CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue : public CLMessageObserver$/;"	c	file:
CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^class CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue : public CLMessageObserver$/;"	c	file:
CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^class CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue : public CLMessageObserver$/;"	c	file:
CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue : public CLMessageObserver$/;"	c	file:
CLProcess	include/CLProcess.h	/^class CLProcess : public CLExecutive$/;"	c
CLProcess	src/CLProcess.cpp	/^CLProcess::CLProcess(CLExecutiveFunctionProvider *pExecutiveFunctionProvider) : CLExecutive(pExecutiveFunctionProvider)$/;"	f	class:CLProcess
CLProcess	src/CLProcess.cpp	/^CLProcess::CLProcess(CLExecutiveFunctionProvider *pExecutiveFunctionProvider, bool bWaitForDeath) : CLExecutive(pExecutiveFunctionProvider)$/;"	f	class:CLProcess
CLProcessFunctionForExec	include/CLProcessFunctionForExec.h	/^class CLProcessFunctionForExec : public CLExecutiveFunctionProvider$/;"	c
CLProcessFunctionForExec	src/CLProcessFunctionForExec.cpp	/^CLProcessFunctionForExec::CLProcessFunctionForExec()$/;"	f	class:CLProcessFunctionForExec
CLProcessFunctionForExec_H	include/CLProcessFunctionForExec.h	2;"	d
CLProcess_H	include/CLProcess.h	2;"	d
CLProtoEncapForDefaultMsgFormat	include/CLProtoEncapForDefaultMsgFormat.h	/^class CLProtoEncapForDefaultMsgFormat : public CLProtocolEncapsulator$/;"	c
CLProtoEncapForDefaultMsgFormat	src/CLProtoEncapForDefaultMsgFormat.cpp	/^CLProtoEncapForDefaultMsgFormat::CLProtoEncapForDefaultMsgFormat()$/;"	f	class:CLProtoEncapForDefaultMsgFormat
CLProtoParser	include/CLProtoParser.h	/^class CLProtoParser$/;"	c
CLProtoParser	src/CLProtoParser.cpp	/^CLProtoParser::CLProtoParser()$/;"	f	class:CLProtoParser
CLProtoParserForDefaultMsgFormat	include/CLProtoParserForDefaultMsgFormat.h	/^class CLProtoParserForDefaultMsgFormat : public CLProtoParser$/;"	c
CLProtoParserForDefaultMsgFormat	src/CLProtoParserForDefaultMsgFormat.cpp	/^CLProtoParserForDefaultMsgFormat::CLProtoParserForDefaultMsgFormat()$/;"	f	class:CLProtoParserForDefaultMsgFormat
CLProtoParserForPointerMsg	include/CLProtoParserForPointerMsg.h	/^class CLProtoParserForPointerMsg : public CLProtoParser$/;"	c
CLProtoParserForPointerMsg	src/CLProtoParserForPointerMsg.cpp	/^CLProtoParserForPointerMsg::CLProtoParserForPointerMsg()$/;"	f	class:CLProtoParserForPointerMsg
CLProtocolDataPoster	include/CLProtocolDataPoster.h	/^class CLProtocolDataPoster \/\/deal with the msgDataVec buffer free and delete$/;"	c
CLProtocolDataPoster	src/CLProtocolDataPoster.cpp	/^CLProtocolDataPoster::CLProtocolDataPoster() : m_topMsgBufIndex(0), m_pDataPoster(0), m_bDataLeftFlag(false), m_pEvent(0)$/;"	f	class:CLProtocolDataPoster
CLProtocolEncapsulator	include/CLProtocolEncapsulator.h	/^class CLProtocolEncapsulator$/;"	c
CLProtocolEncapsulator	src/CLProtocolEncapsulator.cpp	/^CLProtocolEncapsulator::CLProtocolEncapsulator()$/;"	f	class:CLProtocolEncapsulator
CLProtocolEncapsulator_H	include/CLProtocolEncapsulator.h	2;"	d
CLQuitMessage	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	CLQuitMessage() : CLMessage(100)$/;"	f	class:CLQuitMessage
CLQuitMessage	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^class CLQuitMessage : public CLMessage$/;"	c	file:
CLQuitMessage	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	CLQuitMessage() : CLMessage(100)$/;"	f	class:CLQuitMessage
CLQuitMessage	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^class CLQuitMessage : public CLMessage$/;"	c	file:
CLSOCKETADDRESS_H	include/CLSocketAddress.h	2;"	d
CLSOCKET_H	include/CLSocket.h	2;"	d
CLSTATUS_H	include/CLStatus.h	2;"	d
CLSTLQUEUE_H	include/CLSTLQueue.h	2;"	d
CLSTLQueue	include/CLSTLQueue.h	/^class CLSTLQueue$/;"	c
CLSTLQueue	src/CLSTLQueue.cpp	/^CLSTLQueue::CLSTLQueue()$/;"	f	class:CLSTLQueue
CLSTLQueue_CLNonThreadForMsgLoop	test/CLNonThreadForMsgLoopTester.cpp	/^class CLSTLQueue_CLNonThreadForMsgLoop : public CLMessageObserver$/;"	c	file:
CLSTLQueue_CLThreadForMsgLoop	test/CLThreadForMsgLoopTester.cpp	/^class CLSTLQueue_CLThreadForMsgLoop : public CLMessageObserver$/;"	c	file:
CLSharedConditionVariableImpl	include/CLSharedConditionVariableImpl.h	/^class CLSharedConditionVariableImpl : public CLSharedObjectsImpl$/;"	c
CLSharedConditionVariableImpl	src/CLSharedConditionVariableImpl.cpp	/^CLSharedConditionVariableImpl::CLSharedConditionVariableImpl()$/;"	f	class:CLSharedConditionVariableImpl
CLSharedConditionVariableImpl_H	include/CLSharedConditionVariableImpl.h	2;"	d
CLSharedEventImpl	include/CLSharedEventImpl.h	/^class CLSharedEventImpl : public CLSharedObjectsImpl$/;"	c
CLSharedEventImpl	src/CLSharedEventImpl.cpp	/^CLSharedEventImpl::CLSharedEventImpl()$/;"	f	class:CLSharedEventImpl
CLSharedEventImpl_H	include/CLSharedEventImpl.h	2;"	d
CLSharedExecutiveCommunicationByNamedPipe	include/CLSharedExecutiveCommunicationByNamedPipe.h	/^class CLSharedExecutiveCommunicationByNamedPipe : public CLExecutiveCommunicationByNamedPipe$/;"	c
CLSharedExecutiveCommunicationByNamedPipe	src/CLSharedExecutiveCommunicationByNamedPipe.cpp	/^CLSharedExecutiveCommunicationByNamedPipe::CLSharedExecutiveCommunicationByNamedPipe(const char *pstrExecutiveName) : CLExecutiveCommunicationByNamedPipe(pstrExecutiveName, true)$/;"	f	class:CLSharedExecutiveCommunicationByNamedPipe
CLSharedExecutiveCommunicationByNamedPipe_H	include/CLSharedExecutiveCommunicationByNamedPipe.h	2;"	d
CLSharedMemory	include/CLSharedMemory.h	/^class CLSharedMemory$/;"	c
CLSharedMemory	src/CLSharedMemory.cpp	/^CLSharedMemory::CLSharedMemory(const char *pstrFileName, size_t nSize) : m_Mutex(pstrFileName, MUTEX_USE_RECORD_LOCK)$/;"	f	class:CLSharedMemory
CLSharedMemory_H	include/CLSharedMemory.h	2;"	d
CLSharedMsgReceiverByNamedPipe	include/CLSharedMsgReceiverByNamedPipe.h	/^class CLSharedMsgReceiverByNamedPipe : public CLMessageReceiverByNamedPipe$/;"	c
CLSharedMsgReceiverByNamedPipe	src/CLSharedMsgReceiverByNamedPipe.cpp	/^CLSharedMsgReceiverByNamedPipe::CLSharedMsgReceiverByNamedPipe(const char *pstrPipeName) : CLMessageQueueByNamedPipe(pstrPipeName)$/;"	f	class:CLSharedMsgReceiverByNamedPipe
CLSharedMsgReceiverByNamedPipe_H	include/CLSharedMsgReceiverByNamedPipe.h	2;"	d
CLSharedMutexImpl	include/CLSharedMutexImpl.h	/^class CLSharedMutexImpl : public CLSharedObjectsImpl$/;"	c
CLSharedMutexImpl	src/CLSharedMutexImpl.cpp	/^CLSharedMutexImpl::CLSharedMutexImpl()$/;"	f	class:CLSharedMutexImpl
CLSharedMutexImpl_H	include/CLSharedMutexImpl.h	2;"	d
CLSharedObjectAllocator	include/CLSharedObjectAllocator.h	/^CLSharedObjectAllocator<TSharedObjectPool, TSharedObject>::CLSharedObjectAllocator()$/;"	f	class:CLSharedObjectAllocator
CLSharedObjectAllocator	include/CLSharedObjectAllocator.h	/^class CLSharedObjectAllocator$/;"	c
CLSharedObjectAllocator_H	include/CLSharedObjectAllocator.h	2;"	d
CLSharedObjectsImpl	include/CLSharedObjectsImpl.h	/^class CLSharedObjectsImpl$/;"	c
CLSharedObjectsImpl	src/CLSharedObjectsImpl.cpp	/^CLSharedObjectsImpl::CLSharedObjectsImpl()$/;"	f	class:CLSharedObjectsImpl
CLSharedObjectsImpl_H	include/CLSharedObjectsImpl.h	2;"	d
CLSharedQueueForProcessPostMsg_CLMsgLoopManagerForPipeQueue	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLSharedQueueForProcessPostMsg_CLMsgLoopManagerForPipeQueue : public CLMessageObserver$/;"	c	file:
CLSharedQueueForProcessPostMsg_CLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^class CLSharedQueueForProcessPostMsg_CLMsgLoopManagerForPipeQueue : public CLMessageObserver$/;"	c	file:
CLSharedQueueForProcessPostMsg_CLMsgLoopManagerForPipeQueue	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLSharedQueueForProcessPostMsg_CLMsgLoopManagerForPipeQueue : public CLMessageObserver$/;"	c	file:
CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue : public CLMessageObserver$/;"	c	file:
CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^class CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue : public CLMessageObserver$/;"	c	file:
CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^class CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue : public CLMessageObserver$/;"	c	file:
CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue : public CLMessageObserver$/;"	c	file:
CLSocket	include/CLSocket.h	/^class CLSocket$/;"	c
CLSocket	src/CLSocket.cpp	/^CLSocket::CLSocket(const char *pHostNameOrIp, const char *pServiceNameOrPort, bool forServer, int sockeType, bool isBlock, int listenNum)$/;"	f	class:CLSocket
CLSocket	src/CLSocket.cpp	/^CLSocket::CLSocket(int sockFd, bool isBlock = true)$/;"	f	class:CLSocket
CLSocketAddress	include/CLSocketAddress.h	/^class CLSocketAddress$/;"	c
CLSocketAddress	src/CLSocketAddress.cpp	/^CLSocketAddress::CLSocketAddress()$/;"	f	class:CLSocketAddress
CLSocketAddress	src/CLSocketAddress.cpp	/^CLSocketAddress::CLSocketAddress(struct sockaddr& addr)$/;"	f	class:CLSocketAddress
CLStatus	include/CLStatus.h	/^class CLStatus$/;"	c
CLStatus	src/CLStatus.cpp	/^CLStatus::CLStatus(const CLStatus& status) : m_clReturnCode(m_lReturnCode), m_clErrorCode(m_lErrorCode)$/;"	f	class:CLStatus
CLStatus	src/CLStatus.cpp	/^CLStatus::CLStatus(long lReturnCode, long lErrorCode) : m_clReturnCode(m_lReturnCode), m_clErrorCode(m_lErrorCode)$/;"	f	class:CLStatus
CLStressObserverForCLNonThreadForMsgLoop	test/CLNonThreadForMsgLoopTester.cpp	/^class CLStressObserverForCLNonThreadForMsgLoop : public CLMessageObserver$/;"	c	file:
CLStressObserverForCLNonThreadForMsgLoop_Process	test/CLNonThreadForMsgLoopTester.cpp	/^class CLStressObserverForCLNonThreadForMsgLoop_Process : public CLMessageObserver$/;"	c	file:
CLStressTester	test/CLNonThreadForMsgLoopTester.cpp	/^class CLStressTester : public CLExecutiveFunctionProvider$/;"	c	file:
CLTCPCLIENTSOCKET_H	include/CLTCPClientSocket.h	2;"	d
CLTCPClientArrivedMessage	include/CLTCPClientArrivedMessage.h	/^	CLTCPClientArrivedMessage() : CLMessage(TCP_CLIENT_ARRIVED_MSG_ID)$/;"	f	class:CLTCPClientArrivedMessage
CLTCPClientArrivedMessage	include/CLTCPClientArrivedMessage.h	/^	CLTCPClientArrivedMessage(CLSocket *pSock, CLSocketAddress *pAddr) : CLMessage(TCP_CLIENT_ARRIVED_MSG_ID)$/;"	f	class:CLTCPClientArrivedMessage
CLTCPClientArrivedMessage	include/CLTCPClientArrivedMessage.h	/^class CLTCPClientArrivedMessage : public CLMessage$/;"	c
CLTCPClientArrivedMessage_h	include/CLTCPClientArrivedMessage.h	2;"	d
CLTCPClientSocket	include/CLTCPClientSocket.h	/^class CLTCPClientSocket : public CLBaseSocket$/;"	c
CLTCPClientSocket	src/CLTCPClientSocket.cpp	/^CLTCPClientSocket::CLTCPClientSocket(const char *pHostNameOrIp, const char *pServiceNameOrPort, bool isBlock) : CLBaseSocket(isBlock)$/;"	f	class:CLTCPClientSocket
CLTCPLISTENSOCKET_H	include/CLTCPListenSocket.h	2;"	d
CLTCPListenSocket	include/CLTCPListenSocket.h	/^class CLTCPListenSocket : public CLBaseSocket$/;"	c
CLTCPListenSocket	src/CLTCPListenSocket.cpp	/^CLTCPListenSocket::CLTCPListenSocket(const char *pHostNameOrIp, const char *pServiceNameOrPort, bool isBlock, int listenNum) : CLBaseSocket(isBlock)$/;"	f	class:CLTCPListenSocket
CLTHREAD_H	include/CLThread.h	2;"	d
CLTIMERAPPLYMSGDESERIALIZER_H	include/CLTimerApplyMsgDeserializer.h	2;"	d
CLTIMERAPPLYMSGSERIALIZER_H	include/CLTimerApplyMsgSerializer.h	2;"	d
CLTIMERAPPLYMSG_H	include/CLTimerApplyMsg.h	2;"	d
CLTIMERFD_H	include/CLTimerFd.h	2;"	d
CLTIMERMSGOBSERVER_H	timer/CLTimerMsgObserver.h	2;"	d
CLTIMEROUTMSG_H	include/CLTimerOutMsg.h	2;"	d
CLTIMEROUTNOTIFYMSGSERIALIZER_H	include/CLTimerOutNotifyMsgSerializer.h	2;"	d
CLTIMEROUTNOTIFYMSG_H	include/CLTimerOutNotifyMsg.h	2;"	d
CLTIMTEROUTNOTIFYMSGDESERIALIZER_H	include/CLTimerOutNotifyMsgDeserializer.h	2;"	d
CLTestAddMsgForCLMessageLoopManager	test/CLMessageLoopManagerTester.cpp	/^	CLTestAddMsgForCLMessageLoopManager(int i, int j) : CLMessage(ADD_MSG_ID)$/;"	f	class:CLTestAddMsgForCLMessageLoopManager
CLTestAddMsgForCLMessageLoopManager	test/CLMessageLoopManagerTester.cpp	/^class CLTestAddMsgForCLMessageLoopManager : public CLMessage$/;"	c	file:
CLTestMsgForNameServer	test/CLExecutiveNameServerTester.cpp	/^	CLTestMsgForNameServer(int id) : CLMessage(id)$/;"	f	class:CLTestMsgForNameServer
CLTestMsgForNameServer	test/CLExecutiveNameServerTester.cpp	/^class CLTestMsgForNameServer : public CLMessage$/;"	c	file:
CLThread	include/CLThread.h	/^class CLThread : public CLExecutive$/;"	c
CLThread	src/CLThread.cpp	/^CLThread::CLThread(CLExecutiveFunctionProvider *pExecutiveFunctionProvider) : CLExecutive(pExecutiveFunctionProvider)$/;"	f	class:CLThread
CLThread	src/CLThread.cpp	/^CLThread::CLThread(CLExecutiveFunctionProvider *pExecutiveFunctionProvider, bool bWaitForDeath) : CLExecutive(pExecutiveFunctionProvider)$/;"	f	class:CLThread
CLThreadCommunicationBySTLqueue	include/CLThreadCommunicationBySTLqueue.h	/^class CLThreadCommunicationBySTLqueue : public CLExecutiveCommunication$/;"	c
CLThreadCommunicationBySTLqueue	src/CLThreadCommunicationBySTLqueue.cpp	/^CLThreadCommunicationBySTLqueue::CLThreadCommunicationBySTLqueue(CLMessageReceiverBySTLqueue *pMsgReceiver, CLEvent *pEvent)$/;"	f	class:CLThreadCommunicationBySTLqueue
CLThreadCommunicationBySTLqueue_H	include/CLThreadCommunicationBySTLqueue.h	2;"	d
CLThreadDriv	test/CLThreadTester.cpp	/^	CLThreadDriv(CLExecutiveFunctionProvider *p) : CLThread(p)$/;"	f	class:CLThreadDriv
CLThreadDriv	test/CLThreadTester.cpp	/^	CLThreadDriv(CLExecutiveFunctionProvider *p, bool b) : CLThread(p, b)$/;"	f	class:CLThreadDriv
CLThreadDriv	test/CLThreadTester.cpp	/^class CLThreadDriv : public CLThread$/;"	c	file:
CLThreadForCLThreadInitialFinishedNotifier_Notify	test/CLThreadInitialFinishedNotifierTester.cpp	/^class CLThreadForCLThreadInitialFinishedNotifier_Notify : public CLExecutiveFunctionProvider$/;"	c	file:
CLThreadForMsgLoop	include/CLThreadForMsgLoop.h	/^class CLThreadForMsgLoop$/;"	c
CLThreadForMsgLoop	src/CLThreadForMsgLoop.cpp	/^CLThreadForMsgLoop::CLThreadForMsgLoop(CLMessageObserver *pMsgObserver, const char *pstrThreadName, bool bWaitForDeath, int ExecutiveType)$/;"	f	class:CLThreadForMsgLoop
CLThreadForMsgLoop_H	include/CLThreadForMsgLoop.h	2;"	d
CLThreadForTestingCLMsgLoopManagerForPipeQueue_PrivateQueueForPostMsg	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLThreadForTestingCLMsgLoopManagerForPipeQueue_PrivateQueueForPostMsg : public CLExecutiveFunctionProvider$/;"	c	file:
CLThreadForTestingCLMsgLoopManagerForPipeQueue_PrivateQueueForPostMsg	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^class CLThreadForTestingCLMsgLoopManagerForPipeQueue_PrivateQueueForPostMsg : public CLExecutiveFunctionProvider$/;"	c	file:
CLThreadForTestingCLMsgLoopManagerForPipeQueue_PrivateQueueForPostMsg	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^class CLThreadForTestingCLMsgLoopManagerForPipeQueue_PrivateQueueForPostMsg : public CLExecutiveFunctionProvider$/;"	c	file:
CLThreadInitialFinishedNotifier	include/CLThreadInitialFinishedNotifier.h	/^class CLThreadInitialFinishedNotifier : public CLExecutiveInitialFinishedNotifier$/;"	c
CLThreadInitialFinishedNotifier	src/CLThreadInitialFinishedNotifier.cpp	/^CLThreadInitialFinishedNotifier::CLThreadInitialFinishedNotifier(CLEvent *pEvent)$/;"	f	class:CLThreadInitialFinishedNotifier
CLThreadInitialFinishedNotifier_H	include/CLThreadInitialFinishedNotifier.h	2;"	d
CLTimerApplyMsg	include/CLTimerApplyMsg.h	/^	CLTimerApplyMsg()	 : CLMessage(TIMER_APPLY_MSG_ID)$/;"	f	class:CLTimerApplyMsg
CLTimerApplyMsg	include/CLTimerApplyMsg.h	/^class CLTimerApplyMsg : public CLMessage$/;"	c
CLTimerApplyMsgDeserializer	include/CLTimerApplyMsgDeserializer.h	/^class CLTimerApplyMsgDeserializer : public CLMessageDeserializer$/;"	c
CLTimerApplyMsgDeserializer	src/CLTimerApplyMsgDeserializer.cpp	/^CLTimerApplyMsgDeserializer::CLTimerApplyMsgDeserializer()$/;"	f	class:CLTimerApplyMsgDeserializer
CLTimerApplyMsgSerializer	include/CLTimerApplyMsgSerializer.h	/^class CLTimerApplyMsgSerializer : public CLMessageSerializer$/;"	c
CLTimerApplyMsgSerializer	src/CLTimerApplyMsgSerializer.cpp	/^CLTimerApplyMsgSerializer::CLTimerApplyMsgSerializer()$/;"	f	class:CLTimerApplyMsgSerializer
CLTimerFd	include/CLTimerFd.h	/^class CLTimerFd$/;"	c
CLTimerFd	src/CLTimerFd.cpp	/^CLTimerFd::CLTimerFd(struct itimerspec& sTimerValue, string pstrRemoteName, const int& ID)$/;"	f	class:CLTimerFd
CLTimerMsgObserver	timer/CLTimerMsgObserver.cpp	/^CLTimerMsgObserver::CLTimerMsgObserver()$/;"	f	class:CLTimerMsgObserver
CLTimerMsgObserver	timer/CLTimerMsgObserver.h	/^class CLTimerMsgObserver : public CLMessageObserver$/;"	c
CLTimerOutMsg	include/CLTimerOutMsg.h	/^	CLTimerOutMsg() : CLMessage(TIMER_OUT_MSG_ID)$/;"	f	class:CLTimerOutMsg
CLTimerOutMsg	include/CLTimerOutMsg.h	/^class CLTimerOutMsg : public CLMessage$/;"	c
CLTimerOutNotifyMsg	include/CLTimerOutNotifyMsg.h	/^	CLTimerOutNotifyMsg() : CLMessage(TIMER_OUT_NOTIFY_MSG_ID)$/;"	f	class:CLTimerOutNotifyMsg
CLTimerOutNotifyMsg	include/CLTimerOutNotifyMsg.h	/^	explicit CLTimerOutNotifyMsg(const int& echoID) : CLMessage(TIMER_OUT_NOTIFY_MSG_ID)$/;"	f	class:CLTimerOutNotifyMsg
CLTimerOutNotifyMsg	include/CLTimerOutNotifyMsg.h	/^class CLTimerOutNotifyMsg : public CLMessage$/;"	c
CLTimerOutNotifyMsgDeserializer	include/CLTimerOutNotifyMsgDeserializer.h	/^class CLTimerOutNotifyMsgDeserializer : public CLMessageDeserializer$/;"	c
CLTimerOutNotifyMsgDeserializer	src/CLTimerOutNotifyMsgDeserializer.cpp	/^CLTimerOutNotifyMsgDeserializer::CLTimerOutNotifyMsgDeserializer()$/;"	f	class:CLTimerOutNotifyMsgDeserializer
CLTimerOutNotifyMsgSerializer	include/CLTimerOutNotifyMsgSerializer.h	/^class CLTimerOutNotifyMsgSerializer : public CLMessageSerializer$/;"	c
CLTimerOutNotifyMsgSerializer	src/CLTimerOutNotifyMsgSerializer.cpp	/^CLTimerOutNotifyMsgSerializer::CLTimerOutNotifyMsgSerializer()$/;"	f	class:CLTimerOutNotifyMsgSerializer
CLUDPCLIENTSOCKET_H	include/CLUDPClientSocket.h	2;"	d
CLUDPClientSocket	include/CLUDPClientSocket.h	/^class CLUDPClientSocket : public CLBaseSocket$/;"	c
CLUDPClientSocket	src/CLUDPClientSocket.cpp	/^CLUDPClientSocket::CLUDPClientSocket(const char *pHostNameOrIp, const char *pServiceNameOrPort, bool isBlock) : CLBaseSocket(isBlock)$/;"	f	class:CLUDPClientSocket
CLUDPServerSOCKET_H	include/CLUDPServerSocket.h	2;"	d
CLUDPServerSocket	include/CLUDPServerSocket.h	/^class CLUDPServerSocket : public CLBaseSocket$/;"	c
CLUDPServerSocket	src/CLUDPServerSocket.cpp	/^CLUDPServerSocket::CLUDPServerSocket(const char *pHostNameOrIp, const char *pServiceNameOrPort, bool isBlock) : CLBaseSocket(isBlock)$/;"	f	class:CLUDPServerSocket
CONNECT_PENDING	include/errCode.h	/^const int CONNECT_PENDING = BASE_CODE + 41;$/;"	v
CThreadFunctionForCLMessageQueue	test/CLMessageQueueBySTLqueueTester.cpp	/^	CThreadFunctionForCLMessageQueue()$/;"	f	class:CThreadFunctionForCLMessageQueue
CThreadFunctionForCLMessageQueue	test/CLMessageQueueBySTLqueueTester.cpp	/^class CThreadFunctionForCLMessageQueue: public CLExecutiveFunctionProvider$/;"	c	file:
CThreadFunctionForCLMessageQueue2	test/CLMessageQueueBySTLqueueTester.cpp	/^	CThreadFunctionForCLMessageQueue2()$/;"	f	class:CThreadFunctionForCLMessageQueue2
CThreadFunctionForCLMessageQueue2	test/CLMessageQueueBySTLqueueTester.cpp	/^class CThreadFunctionForCLMessageQueue2: public CLExecutiveFunctionProvider$/;"	c	file:
CThreadFunctionForCLThread	test/CLThreadTester.cpp	/^	CThreadFunctionForCLThread()$/;"	f	class:CThreadFunctionForCLThread
CThreadFunctionForCLThread	test/CLThreadTester.cpp	/^class CThreadFunctionForCLThread: public CLExecutiveFunctionProvider$/;"	c	file:
CallBackForMessageLoop	include/CLMessageLoopManager.h	/^typedef CLStatus (CLMessageObserver::*CallBackForMessageLoop)(CLMessage *);$/;"	t
CheckForRestBuffer	src/CLBuffer.cpp	/^CLStatus CLBuffer::CheckForRestBuffer()$/;"	f	class:CLBuffer
CloseFileDescriptor	src/CLProcess.cpp	/^CLStatus CLProcess::CloseFileDescriptor()$/;"	f	class:CLProcess
CloseREvent	src/CLEpollEvent.cpp	/^CLStatus CLEpollEvent::CloseREvent()$/;"	f	class:CLEpollEvent
CloseWEvent	src/CLEpollEvent.cpp	/^CLStatus CLEpollEvent::CloseWEvent()$/;"	f	class:CLEpollEvent
Connect	src/CLSocket.cpp	/^CLStatus CLSocket::Connect()$/;"	f	class:CLSocket
Connect	src/CLTCPClientSocket.cpp	/^CLStatus CLTCPClientSocket::Connect()$/;"	f	class:CLTCPClientSocket
Context	include/CLSharedEventImpl.h	/^	long Context;$/;"	m	struct:SLEventInfo
Create	include/CLSharedObjectAllocator.h	/^CLStatus CLSharedObjectAllocator<TSharedObjectPool, TSharedObject>::Create()$/;"	f	class:CLSharedObjectAllocator
Create	src/CLExecutiveNameServer.cpp	/^CLStatus CLExecutiveNameServer::Create()$/;"	f	class:CLExecutiveNameServer
Create	src/CLLogger.cpp	/^CLStatus CLLogger::Create()$/;"	f	class:CLLogger
DEAFULT_BUFFER_LENGTH	include/definition.h	9;"	d
DEFAULT_EPOLLWAIT_TIME	src/CLEpoll.cpp	11;"	d	file:
DEFINITION_H	include/definition.h	2;"	d
DataStartIndex	src/CLBuffer.cpp	/^CLStatus CLBuffer::DataStartIndex(const int& newIndex)$/;"	f	class:CLBuffer
DataStartIndex	src/CLBuffer.cpp	/^const int& CLBuffer::DataStartIndex() const $/;"	f	class:CLBuffer
Decapsulate	src/CLProtoParser.cpp	/^CLStatus CLProtoParser::Decapsulate(CLBuffer* pBuffer, vector<CLIOVector *> &vSerializedMsgs)$/;"	f	class:CLProtoParser
DecapsulateMsg	src/CLProtoParserForDefaultMsgFormat.cpp	/^CLStatus CLProtoParserForDefaultMsgFormat::DecapsulateMsg(CLIOVector& dataVec, vector<CLIOVector *> &vSerializedMsgs)$/;"	f	class:CLProtoParserForDefaultMsgFormat
DecapsulateMsg	src/CLProtoParserForPointerMsg.cpp	/^CLStatus CLProtoParserForPointerMsg::DecapsulateMsg(CLIOVector& dataVec, vector<CLIOVector *> &vSerializedMsgs)$/;"	f	class:CLProtoParserForPointerMsg
DeleteSharedMemory	src/CLSharedMemory.cpp	/^CLStatus CLSharedMemory::DeleteSharedMemory()$/;"	f	class:CLSharedMemory
Deserialize	src/CLMultiMsgDeserializer.cpp	/^CLStatus CLMultiMsgDeserializer::Deserialize(CLIOVector &dataVec, CLMessage **pMsg)$/;"	f	class:CLMultiMsgDeserializer
Deserialize	src/CLPointerMsgDeserializer.cpp	/^CLStatus CLPointerMsgDeserializer::Deserialize(CLIOVector &dataVec, CLMessage **pMsg)$/;"	f	class:CLPointerMsgDeserializer
Deserialize	src/CLTimerApplyMsgDeserializer.cpp	/^CLStatus CLTimerApplyMsgDeserializer::Deserialize(CLIOVector &dataVec, CLMessage **pMsg)$/;"	f	class:CLTimerApplyMsgDeserializer
Deserialize	src/CLTimerOutNotifyMsgDeserializer.cpp	/^CLStatus CLTimerOutNotifyMsgDeserializer::Deserialize(CLIOVector &dataVec, CLMessage **pMsg)$/;"	f	class:CLTimerOutNotifyMsgDeserializer
Deserialize	test/CLMessageQueueByNamedPipeTester.cpp	/^	virtual CLMessage *Deserialize(char *pBuffer)$/;"	f	class:Test2MsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsgDeserializer
Deserialize	test/CLMessageQueueByNamedPipeTester.cpp	/^	virtual CLMessage *Deserialize(char *pBuffer)$/;"	f	class:TestMsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsgDeserializer
Deserialize	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual CLMessage *Deserialize(char *pBuffer)$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer
Deserialize	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual CLMessage *Deserialize(char *pBuffer)$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer
Deserialize	test/CLNonThreadForMsgLoopTester.cpp	/^	virtual CLMessage *Deserialize(char *pBuffer)$/;"	f	class:CLMsg1ForCLNonThreadForMsgLoop_Deserializer
Deserialize	test/CLNonThreadForMsgLoopTester.cpp	/^	virtual CLMessage *Deserialize(char *pBuffer)$/;"	f	class:CLMsg2ForCLNonThreadForMsgLoop_Deserializer
Deserialize	test/CLThreadForMsgLoopTester.cpp	/^	virtual CLMessage *Deserialize(char *pBuffer)$/;"	f	class:CLMsg1ForCLThreadForMsgLoop_Deserializer
Deserialize	test/CLThreadForMsgLoopTester.cpp	/^	virtual CLMessage *Deserialize(char *pBuffer)$/;"	f	class:CLMsg2ForCLThreadForMsgLoop_Deserializer
Deserialize	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	virtual CLStatus Deserialize(CLIOVector &dataVec, CLMessage **pMsg)$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer
Deserialize	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	virtual CLStatus Deserialize(CLIOVector &dataVec, CLMessage **pMsg)$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer
Deserialize	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	virtual CLMessage *Deserialize(char *pBuffer)$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer
Deserialize	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	virtual CLMessage *Deserialize(char *pBuffer)$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer
Deserialize	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	virtual CLStatus Deserialize(CLIOVector &dataVec, CLMessage **pMsg)$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer
Deserialize	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	virtual CLStatus Deserialize(CLIOVector &dataVec, CLMessage **pMsg)$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer
Deserialize	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	virtual CLMessage *Deserialize(char *pBuffer)$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer
Deserialize	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	virtual CLMessage *Deserialize(char *pBuffer)$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer
Deserialize	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual CLStatus Deserialize(CLIOVector &dataVec, CLMessage **pMsg)$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer
Deserialize	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual CLStatus Deserialize(CLIOVector &dataVec, CLMessage **pMsg)$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer
Destroy	include/CLSharedObjectAllocator.h	/^CLStatus CLSharedObjectAllocator<TSharedObjectPool, TSharedObject>::Destroy()$/;"	f	class:CLSharedObjectAllocator
Destroy	src/CLExecutiveNameServer.cpp	/^CLStatus CLExecutiveNameServer::Destroy()$/;"	f	class:CLExecutiveNameServer
Destroy	src/CLLibExecutiveInitializer.cpp	/^CLStatus CLLibExecutiveInitializer::Destroy()$/;"	f	class:CLLibExecutiveInitializer
Destroy	src/CLLogger.cpp	/^CLStatus CLLogger::Destroy()$/;"	f	class:CLLogger
Destroy	src/CLSharedObjectsImpl.cpp	/^CLStatus CLSharedObjectsImpl::Destroy()$/;"	f	class:CLSharedObjectsImpl
DestroySharedObject	src/CLSharedConditionVariableImpl.cpp	/^CLStatus CLSharedConditionVariableImpl::DestroySharedObject(SLSharedObjectHead *pObject)$/;"	f	class:CLSharedConditionVariableImpl
DestroySharedObject	src/CLSharedEventImpl.cpp	/^CLStatus CLSharedEventImpl::DestroySharedObject(SLSharedObjectHead *pObject)$/;"	f	class:CLSharedEventImpl
DestroySharedObject	src/CLSharedMutexImpl.cpp	/^CLStatus CLSharedMutexImpl::DestroySharedObject(SLSharedObjectHead *pObject)$/;"	f	class:CLSharedMutexImpl
DirectoryOfThisScript	.ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f
DispatchMessage	src/CLMessageLoopManager.cpp	/^CLStatus CLMessageLoopManager::DispatchMessage(CLMessage *pMessage)$/;"	f	class:CLMessageLoopManager
DispatchMessage	test/CLExecutiveFunctionForMsgLoopTester.cpp	/^	virtual CLStatus DispatchMessage(CLMessage *pMessage)$/;"	f	class:CLMyMsgLoopManagerForExecutiveFunctionTest
DoEvent	src/CLEpoll.cpp	/^CLStatus CLEpoll::DoEvent(CLEpollEvent *pEvent, int fd, int epollOpt, unsigned int epollEvents)$/;"	f	class:CLEpoll
EDGEMODE	src/CLEpollEvent.cpp	13;"	d	file:
EPOLL_MAX_FD_SIZE	include/CLEpoll.h	7;"	d
ERRCODE_H	include/errCode.h	2;"	d
EVENTADD	src/CLEpollEvent.cpp	9;"	d	file:
EVENTCHANGE	src/CLEpollEvent.cpp	11;"	d	file:
EVENTDEL	src/CLEpollEvent.cpp	10;"	d	file:
EXECUTIVE_BETWEEN_PROCESS_USE_PIPE_QUEUE	include/CLNonThreadForMsgLoop.h	13;"	d
EXECUTIVE_IN_PROCESS_USE_PIPE_QUEUE	include/CLNonThreadForMsgLoop.h	12;"	d
EXECUTIVE_IN_PROCESS_USE_STL_QUEUE	include/CLNonThreadForMsgLoop.h	11;"	d
Encapsulate	src/CLProtoEncapForDefaultMsgFormat.cpp	/^CLStatus CLProtoEncapForDefaultMsgFormat::Encapsulate(CLIOVector *pDataVec)$/;"	f	class:CLProtoEncapForDefaultMsgFormat
EnterMessageLoop	src/CLMessageLoopManager.cpp	/^CLStatus CLMessageLoopManager::EnterMessageLoop(void *pContext)$/;"	f	class:CLMessageLoopManager
EnterMessageLoop	src/CLMsgLoopManagerForEpoll.cpp	/^CLStatus CLMsgLoopManagerForEpoll::EnterMessageLoop(void *pContext)$/;"	f	class:CLMsgLoopManagerForEpoll
EnterMessageLoop	test/CLExecutiveFunctionForMsgLoopTester.cpp	/^	virtual CLStatus EnterMessageLoop(void *pContext)$/;"	f	class:CLMyMsgLoopManagerForExecutiveFunctionTest
EventInfo	include/CLSharedEventImpl.h	/^	SLEventInfo EventInfo;$/;"	m	struct:SLSharedEventItem
FILE_PATH_FOR_COMMUNICATION_NAMED_PIPE	src/CLExecutiveCommunicationByNamedPipe.cpp	9;"	d	file:
FILE_PATH_FOR_NAMED_PIPE	include/CLNamedPipe.h	10;"	d
FILE_PATH_FOR_NAMED_PIPE	src/CLMessageReceiverByNamedPipe.cpp	11;"	d	file:
FILE_PATH_FOR_RECORD_LOCKING	src/CLMutexByRecordLocking.cpp	11;"	d	file:
FILE_PATH_FOR_SHARED_MEMORY	src/CLSharedMemory.cpp	16;"	d	file:
Flag	include/CLSharedEventImpl.h	/^	long Flag;$/;"	m	struct:SLEventInfo
FlagsForFile	.ycm_extra_conf.py	/^def FlagsForFile( filename, **kwargs ):$/;"	f
FreeAndPopAll	src/CLIOVector.cpp	/^CLStatus CLIOVector::FreeAndPopAll()$/;"	f	class:CLIOVector
Get	include/CLSharedObjectAllocator.h	/^TSharedObject* CLSharedObjectAllocator<TSharedObjectPool, TSharedObject>::Get(const char *pstrEventName)$/;"	f	class:CLSharedObjectAllocator
GetAddress	src/CLSharedMemory.cpp	/^void *CLSharedMemory::GetAddress()$/;"	f	class:CLSharedMemory
GetAddress	src/CLSocketAddress.cpp	/^struct sockaddr_in* CLSocketAddress::GetAddress()$/;"	f	class:CLSocketAddress
GetAddressLength	src/CLSocketAddress.cpp	/^socklen_t CLSocketAddress::GetAddressLength()$/;"	f	class:CLSocketAddress
GetAtomWriteSize	src/CLNamedPipe.cpp	/^long CLNamedPipe::GetAtomWriteSize()$/;"	f	class:CLNamedPipe
GetBufPtr	src/CLIOVector.cpp	/^int CLIOVector::GetBufPtr(int index, char** pBuffer)$/;"	f	class:CLIOVector
GetCommunicationPtr	src/CLExecutiveNameServer.cpp	/^CLMessagePoster* CLExecutiveNameServer::GetCommunicationPtr(const char* strExecutiveName)$/;"	f	class:CLExecutiveNameServer
GetCompilationInfoForFile	.ycm_extra_conf.py	/^def GetCompilationInfoForFile( filename ):$/;"	f
GetData	src/CLDataReceiverByNamedPipe.cpp	/^CLStatus CLDataReceiverByNamedPipe::GetData(CLIOVector &IOVec)$/;"	f	class:CLDataReceiverByNamedPipe
GetData	src/CLDataReceiverBySTLQueue.cpp	/^CLStatus CLDataReceiverBySTLQueue::GetData(CLIOVector &IOVec)$/;"	f	class:CLDataReceiverBySTLQueue
GetData	src/CLDataReceiverByTCPAccept.cpp	/^CLStatus CLDataReceiverByTCPAccept::GetData(CLIOVector &IOVec)$/;"	f	class:CLDataReceiverByTCPAccept
GetData	src/CLDataReceiverByTimerFd.cpp	/^CLStatus CLDataReceiverByTimerFd::GetData(CLIOVector &IOVec)$/;"	f	class:CLDataReceiverByTimerFd
GetDataIOVecs	src/CLBuffer.cpp	/^CLStatus CLBuffer::GetDataIOVecs(CLIOVector& IOVector)$/;"	f	class:CLBuffer
GetDataPoster	src/CLDataPosterChannelByNamedPipeMaintainer.cpp	/^CLDataPoster* CLDataPosterChannelByNamedPipeMaintainer::GetDataPoster()$/;"	f	class:CLDataPosterChannelByNamedPipeMaintainer
GetDataPoster	src/CLDataPosterChannelBySTLQueueMaintainer.cpp	/^CLDataPoster* CLDataPosterChannelBySTLQueueMaintainer::GetDataPoster()$/;"	f	class:CLDataPosterChannelBySTLQueueMaintainer
GetFd	include/CLDataReceiver.h	/^	virtual const int GetFd(){return -1;}$/;"	f	class:CLDataReceiver
GetFd	src/CLDataReceiverByNamedPipe.cpp	/^const int CLDataReceiverByNamedPipe::GetFd()$/;"	f	class:CLDataReceiverByNamedPipe
GetFd	src/CLDataReceiverByTCPAccept.cpp	/^const int CLDataReceiverByTCPAccept::GetFd()$/;"	f	class:CLDataReceiverByTCPAccept
GetFd	src/CLDataReceiverByTimerFd.cpp	/^const int CLDataReceiverByTimerFd::GetFd()$/;"	f	class:CLDataReceiverByTimerFd
GetFd	src/CLEpollEvent.cpp	/^const int CLEpollEvent::GetFd()$/;"	f	class:CLEpollEvent
GetFd	src/CLMessageReceiver.cpp	/^const int& CLMessageReceiver::GetFd()$/;"	f	class:CLMessageReceiver
GetFd	src/CLMessageReceiverByTimerFd.cpp	/^const int& CLMessageReceiverByTimerFd::GetFd()$/;"	f	class:CLMessageReceiverByTimerFd
GetHandler	src/CLEpollEvent.cpp	/^void* CLEpollEvent::GetHandler()$/;"	f	class:CLEpollEvent
GetIOVecStructs	src/CLIOVector.cpp	/^struct iovec* CLIOVector::GetIOVecStructs() const$/;"	f	class:CLIOVector
GetIOVecs	src/CLBuffer.cpp	/^CLStatus CLBuffer::GetIOVecs(int index, int len, CLIOVector& IOVector)$/;"	f	class:CLBuffer
GetIOVecs	src/CLIOVector.cpp	/^CLStatus CLIOVector::GetIOVecs(int index, int len, CLIOVector& IOVector)$/;"	f	class:CLIOVector
GetInstance	include/CLSharedObjectAllocator.h	/^CLSharedObjectAllocator<TSharedObjectPool, TSharedObject>* CLSharedObjectAllocator<TSharedObjectPool,TSharedObject>::GetInstance()$/;"	f	class:CLSharedObjectAllocator
GetInstance	src/CLExecutiveNameServer.cpp	/^CLExecutiveNameServer* CLExecutiveNameServer::GetInstance()$/;"	f	class:CLExecutiveNameServer
GetInstance	src/CLLogger.cpp	/^CLLogger* CLLogger::GetInstance()$/;"	f	class:CLLogger
GetMessage	src/CLMessageReceiver.cpp	/^CLStatus CLMessageReceiver::GetMessage(queue<CLMessage*> &MessageQueue)$/;"	f	class:CLMessageReceiver
GetMessage	src/CLMessageReceiverByNamedPipe.cpp	/^CLMessage* CLMessageReceiverByNamedPipe::GetMessage()$/;"	f	class:CLMessageReceiverByNamedPipe
GetMessage	src/CLMessageReceiverByTimerFd.cpp	/^CLStatus CLMessageReceiverByTimerFd::GetMessage(std::queue<CLMessage*> &MessageQueue)$/;"	f	class:CLMessageReceiverByTimerFd
GetMsgBuf	src/CLPrivateExecutiveCommunicationByNamedPipe.cpp	/^char *CLPrivateExecutiveCommunicationByNamedPipe::GetMsgBuf(CLMessage *pMsg, unsigned int *pLength)$/;"	f	class:CLPrivateExecutiveCommunicationByNamedPipe
GetMsgBuf	src/CLSharedExecutiveCommunicationByNamedPipe.cpp	/^char *CLSharedExecutiveCommunicationByNamedPipe::GetMsgBuf(CLMessage *pMsg, unsigned int *pLength)$/;"	f	class:CLSharedExecutiveCommunicationByNamedPipe
GetMutex	include/CLSharedObjectAllocator.h	/^inline CLMutex* CLSharedObjectAllocator<CLSharedConditionVariableImpl, pthread_cond_t>::GetMutex()$/;"	f	class:CLSharedObjectAllocator
GetMutex	include/CLSharedObjectAllocator.h	/^inline CLMutex* CLSharedObjectAllocator<CLSharedEventImpl, SLEventInfo>::GetMutex()$/;"	f	class:CLSharedObjectAllocator
GetMutex	include/CLSharedObjectAllocator.h	/^inline CLMutex* CLSharedObjectAllocator<CLSharedMutexImpl, pthread_mutex_t>::GetMutex()$/;"	f	class:CLSharedObjectAllocator
GetMutexInterface	src/CLMutex.cpp	/^CLMutexInterface *CLMutex::GetMutexInterface()$/;"	f	class:CLMutex
GetMutexPointer	src/CLMutexByPThread.cpp	/^pthread_mutex_t *CLMutexByPThread::GetMutexPointer()$/;"	f	class:CLMutexByPThread
GetMutexPointer	src/CLMutexBySharedPThread.cpp	/^pthread_mutex_t *CLMutexBySharedPThread::GetMutexPointer()$/;"	f	class:CLMutexBySharedPThread
GetNumberOfLinesOfLogFile	test/CLLoggerTester.cpp	/^static int GetNumberOfLinesOfLogFile()$/;"	f	file:
GetPipeFd	src/CLNamedPipe.cpp	/^const int CLNamedPipe::GetPipeFd() const$/;"	f	class:CLNamedPipe
GetRefCount	src/CLSharedMemory.cpp	/^int CLSharedMemory::GetRefCount()$/;"	f	class:CLSharedMemory
GetRemoteName	src/CLTimerFd.cpp	/^const string& CLTimerFd::GetRemoteName()$/;"	f	class:CLTimerFd
GetRestBufPtr	src/CLBuffer.cpp	/^CLStatus CLBuffer::GetRestBufPtr(char** pBuf, int &restLen)$/;"	f	class:CLBuffer
GetRestIOVecs	src/CLBuffer.cpp	/^CLStatus CLBuffer::GetRestIOVecs(CLIOVector& IOVector)$/;"	f	class:CLBuffer
GetSharedObject	include/CLSharedObjectAllocator.h	/^TSharedObject *CLSharedObjectAllocator<TSharedObjectPool, TSharedObject>::GetSharedObject(const char *pstrObjectName)$/;"	f	class:CLSharedObjectAllocator
GetSharedObject	src/CLSharedObjectsImpl.cpp	/^void *CLSharedObjectsImpl::GetSharedObject(const char *pstrSharedObjectName)$/;"	f	class:CLSharedObjectsImpl
GetSocketFd	src/CLBaseSocket.cpp	/^const int CLBaseSocket::GetSocketFd() const$/;"	f	class:CLBaseSocket
GetSocketFd	src/CLSocket.cpp	/^const int CLSocket::GetSocketFd() const$/;"	f	class:CLSocket
GetTimerFd	src/CLTimerFd.cpp	/^const int& CLTimerFd::GetTimerFd()$/;"	f	class:CLTimerFd
GetTimerID	src/CLTimerFd.cpp	/^const int& CLTimerFd::GetTimerID()$/;"	f	class:CLTimerFd
ID_FOR_KEY	src/CLSharedMemory.cpp	14;"	d	file:
INITIALIZED_SHARED_OBJECT	include/CLSharedObjectsImpl.h	12;"	d
IOVecNum	src/CLIOVector.cpp	/^const int CLIOVector::IOVecNum() const$/;"	f	class:CLIOVector
IO_PAUSE	include/errCode.h	/^const int IO_PAUSE = BASE_CODE + 42;$/;"	v
IO_PENDING	include/errCode.h	/^const int IO_PENDING = BASE_CODE + 43;$/;"	v
InitSocketFd	src/CLBaseSocket.cpp	/^CLStatus CLBaseSocket::InitSocketFd(int fd, bool isBlock)$/;"	f	class:CLBaseSocket
Initialize	src/CLDataPosterChannelByNamedPipeMaintainer.cpp	/^CLStatus CLDataPosterChannelByNamedPipeMaintainer::Initialize(void *pContext)$/;"	f	class:CLDataPosterChannelByNamedPipeMaintainer
Initialize	src/CLDataPosterChannelBySTLQueueMaintainer.cpp	/^CLStatus CLDataPosterChannelBySTLQueueMaintainer::Initialize(void *pContext)$/;"	f	class:CLDataPosterChannelBySTLQueueMaintainer
Initialize	src/CLEpoll.cpp	/^CLStatus CLEpoll::Initialize(int maxFdSize)$/;"	f	class:CLEpoll
Initialize	src/CLLibExecutiveInitializer.cpp	/^CLStatus CLLibExecutiveInitializer::Initialize()$/;"	f	class:CLLibExecutiveInitializer
Initialize	src/CLMessagePoster.cpp	/^CLStatus CLMessagePoster::Initialize(void *pContext)$/;"	f	class:CLMessagePoster
Initialize	src/CLMsgLoopManagerForEpoll.cpp	/^CLStatus CLMsgLoopManagerForEpoll::Initialize()$/;"	f	class:CLMsgLoopManagerForEpoll
Initialize	src/CLMsgLoopManagerForIOMultiplex.cpp	/^CLStatus CLMsgLoopManagerForIOMultiplex::Initialize()$/;"	f	class:CLMsgLoopManagerForIOMultiplex
Initialize	src/CLMsgLoopManagerForPipeQueue.cpp	/^CLStatus CLMsgLoopManagerForPipeQueue::Initialize()$/;"	f	class:CLMsgLoopManagerForPipeQueue
Initialize	src/CLMsgLoopManagerForSTLqueue.cpp	/^CLStatus CLMsgLoopManagerForSTLqueue::Initialize()$/;"	f	class:CLMsgLoopManagerForSTLqueue
Initialize	src/CLMutexByPThread.cpp	/^CLStatus CLMutexByPThread::Initialize()$/;"	f	class:CLMutexByPThread
Initialize	src/CLMutexByRecordLocking.cpp	/^CLStatus CLMutexByRecordLocking::Initialize()$/;"	f	class:CLMutexByRecordLocking
Initialize	src/CLMutexByRecordLockingAndPThread.cpp	/^CLStatus CLMutexByRecordLockingAndPThread::Initialize()$/;"	f	class:CLMutexByRecordLockingAndPThread
Initialize	src/CLMutexBySharedPThread.cpp	/^CLStatus CLMutexBySharedPThread::Initialize()$/;"	f	class:CLMutexBySharedPThread
Initialize	src/CLNamedPipe.cpp	/^CLStatus CLNamedPipe::Initialize(const char* pStrPipeName, int flag)$/;"	f	class:CLNamedPipe
Initialize	src/CLSharedObjectsImpl.cpp	/^CLStatus CLSharedObjectsImpl::Initialize()$/;"	f	class:CLSharedObjectsImpl
Initialize	test/CLExecutiveFunctionForMsgLoopTester.cpp	/^	virtual CLStatus Initialize()$/;"	f	class:CLMyMsgLoopManagerForExecutiveFunctionTest
Initialize	test/CLExecutiveFunctionForMsgLoopTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLMyObserverforExecutiveFunctionTest
Initialize	test/CLMessageLoopManagerTester.cpp	/^	virtual CLStatus Initialize()$/;"	f	class:TestClassForCLMessageLoopManager
Initialize	test/CLMessageLoopManagerTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:TestObserverForCLMessageLoopManager
Initialize	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLPrivateQueueForPostMsg_CLMsgLoopManagerForPipeQueue
Initialize	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
Initialize	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLSharedQueueForProcessPostMsg_CLMsgLoopManagerForPipeQueue
Initialize	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
Initialize	test/CLMsgLoopManagerForSTLQueueTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLObserverTester1ForCLMsgLoopManagerForSTLqueue
Initialize	test/CLMsgLoopManagerForSTLQueueTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLObserverTesterForCLMsgLoopManagerForSTLqueue
Initialize	test/CLNonThreadForMsgLoopTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLPipeQueue_CLNonThreadForMsgLoop
Initialize	test/CLNonThreadForMsgLoopTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLSTLQueue_CLNonThreadForMsgLoop
Initialize	test/CLNonThreadForMsgLoopTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLStressObserverForCLNonThreadForMsgLoop
Initialize	test/CLNonThreadForMsgLoopTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLStressObserverForCLNonThreadForMsgLoop_Process
Initialize	test/CLThreadForMsgLoopTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLPipeQueue_CLThreadForMsgLoop
Initialize	test/CLThreadForMsgLoopTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLSTLQueue_CLThreadForMsgLoop
Initialize	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLSharedQueueForProcessPostMsg_CLMsgLoopManagerForPipeQueue
Initialize	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
Initialize	test_for_exe_forgzh/test_for_QueuLoop/CLSTLQueueLoopTest.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLObserverTesterForCLMsgLoopManagerForSTLqueue
Initialize	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
Initialize	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
Initialize	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLPrivateQueueForPostMsg_CLMsgLoopManagerForPipeQueue
Initialize	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
Initialize	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLPrivateQueueForPostMsg_CLMsgLoopManagerForPipeQueue
Initialize	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
Initialize	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLSharedQueueForProcessPostMsg_CLMsgLoopManagerForPipeQueue
Initialize	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
Initialize	test_for_me/CLMsgLoopManagerForSTLQueueTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLObserverTester1ForCLMsgLoopManagerForSTLqueue
Initialize	test_for_me/CLMsgLoopManagerForSTLQueueTester.cpp	/^	virtual CLStatus Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLObserverTesterForCLMsgLoopManagerForSTLqueue
Initialize	timer/CLTimerMsgObserver.cpp	/^CLStatus CLTimerMsgObserver::Initialize(CLMessageLoopManager *pMessageLoop, void* pContext)$/;"	f	class:CLTimerMsgObserver
InitializeIOMultiplex	src/CLMsgLoopManagerForIOMultiplex.cpp	/^CLStatus CLMsgLoopManagerForIOMultiplex::InitializeIOMultiplex()$/;"	f	class:CLMsgLoopManagerForIOMultiplex
InitializeSharedObject	src/CLSharedConditionVariableImpl.cpp	/^CLStatus CLSharedConditionVariableImpl::InitializeSharedObject(SLSharedObjectHead *pObject)$/;"	f	class:CLSharedConditionVariableImpl
InitializeSharedObject	src/CLSharedEventImpl.cpp	/^CLStatus CLSharedEventImpl::InitializeSharedObject(SLSharedObjectHead *pObject)$/;"	f	class:CLSharedEventImpl
InitializeSharedObject	src/CLSharedMutexImpl.cpp	/^CLStatus CLSharedMutexImpl::InitializeSharedObject(SLSharedObjectHead *pObject)$/;"	f	class:CLSharedMutexImpl
IsHeaderFile	.ycm_extra_conf.py	/^def IsHeaderFile( filename ):$/;"	f
IsInitialSuccess	src/CLThreadInitialFinishedNotifier.cpp	/^bool CLThreadInitialFinishedNotifier::IsInitialSuccess()$/;"	f	class:CLThreadInitialFinishedNotifier
IsRepeatTimer	src/CLTimerFd.cpp	/^const bool& CLTimerFd::IsRepeatTimer()$/;"	f	class:CLTimerFd
IsSuccess	src/CLStatus.cpp	/^bool CLStatus::IsSuccess()$/;"	f	class:CLStatus
LENGTH_OF_PATH	src/CLProcess.cpp	18;"	d	file:
LENGTH_OF_PROCESSID	src/CLProcess.cpp	17;"	d	file:
LENGTH_OF_SHARED_OBJECT_NAME	include/CLSharedObjectsImpl.h	9;"	d
LEVELEVENTS	src/CLEpollEvent.cpp	17;"	d	file:
LEVELREVENT	src/CLEpollEvent.cpp	15;"	d	file:
LEVELWEVENT	src/CLEpollEvent.cpp	16;"	d	file:
LIBEXECUTIVE_H	include/LibExecutive.h	2;"	d
LOG_FILE_NAME	src/CLLogger.cpp	9;"	d	file:
Length	src/CLIOVector.cpp	/^const int CLIOVector::Length() const$/;"	f	class:CLIOVector
Lock	src/CLMutex.cpp	/^CLStatus CLMutex::Lock()$/;"	f	class:CLMutex
Lock	src/CLMutexByPThread.cpp	/^CLStatus CLMutexByPThread::Lock()$/;"	f	class:CLMutexByPThread
Lock	src/CLMutexByRecordLocking.cpp	/^CLStatus CLMutexByRecordLocking::Lock()$/;"	f	class:CLMutexByRecordLocking
Lock	src/CLMutexByRecordLockingAndPThread.cpp	/^CLStatus CLMutexByRecordLockingAndPThread::Lock()$/;"	f	class:CLMutexByRecordLockingAndPThread
Lock	src/CLMutexBySharedPThread.cpp	/^CLStatus CLMutexBySharedPThread::Lock()$/;"	f	class:CLMutexBySharedPThread
MAGIC_NUMBER_FOR_SHARED_OBJECT	include/CLSharedObjectsImpl.h	16;"	d
MAX_EVENT_SIZE	include/CLMsgLoopManagerForIOMultiplex.h	17;"	d
MAX_FD_SIZE	include/CLMsgLoopManagerForIOMultiplex.h	18;"	d
MAX_LENGTH_OF_PATH	src/CLProcessFunctionForExec.cpp	11;"	d	file:
MAX_LISTEN_NUM	include/definition.h	/^const int MAX_LISTEN_NUM = 1024;$/;"	v
MAX_SIZE	src/CLLogger.cpp	10;"	d	file:
MESSAGEID_H	include/MessageID.h	2;"	d
MINIMUN_BUFFER_LENGTH	include/definition.h	10;"	d
MUTEX_FOR_SHARED_CONDITION_VARIABLE_ALLOCATOR	include/CLSharedObjectAllocator.h	14;"	d
MUTEX_FOR_SHARED_EVENT_ALLOCATOR	include/CLSharedObjectAllocator.h	16;"	d
MUTEX_FOR_SHARED_MUTEX_ALLOCATOR	include/CLSharedObjectAllocator.h	15;"	d
MUTEX_USE_RECORD_LOCK	include/CLMutex.h	8;"	d
MUTEX_USE_RECORD_LOCK_AND_PTHREAD	include/CLMutex.h	9;"	d
MUTEX_USE_SHARED_PTHREAD	include/CLMutex.h	10;"	d
MakeRelativePathsInFlagsAbsolute	.ycm_extra_conf.py	/^def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):$/;"	f
NUM	test/ATester.cpp	4;"	d	file:
NUM	test/CLLoggerTester.cpp	95;"	d	file:
NUM	test/ZTester.cpp	4;"	d	file:
NUM	test_for_me/ATester.cpp	4;"	d	file:
NUM	test_for_me/ZTester.cpp	4;"	d	file:
NUMBER_OF_SHARED_OBJECT	include/CLSharedObjectsImpl.h	15;"	d
NewBuffer	src/CLBuffer.cpp	/^CLStatus CLBuffer::NewBuffer(int size)$/;"	f	class:CLBuffer
NotifyConnectResult	src/CLSocket.cpp	/^void  CLSocket::NotifyConnectResult(bool bResult)$/;"	f	class:CLSocket
NotifyConnectResult	src/CLTCPClientSocket.cpp	/^void  CLTCPClientSocket::NotifyConnectResult(bool bResult)$/;"	f	class:CLTCPClientSocket
NotifyFailure	src/CLDataPostResultNotifier.cpp	/^CLStatus CLDataPostResultNotifier::NotifyFailure()$/;"	f	class:CLDataPostResultNotifier
NotifyInitialFinished	src/CLThreadInitialFinishedNotifier.cpp	/^CLStatus CLThreadInitialFinishedNotifier::NotifyInitialFinished(bool bInitialSuccess)$/;"	f	class:CLThreadInitialFinishedNotifier
NotifyReadable	src/CLMsgLoopManagerForEpoll.cpp	/^CLStatus CLMsgLoopManagerForEpoll::NotifyReadable(int fd)$/;"	f	class:CLMsgLoopManagerForEpoll
NotifyResult	src/CLDataPostResultNotifier.cpp	/^CLStatus CLDataPostResultNotifier::NotifyResult(int result)$/;"	f	class:CLDataPostResultNotifier
NotifySuccess	src/CLDataPostResultNotifier.cpp	/^CLStatus CLDataPostResultNotifier::NotifySuccess()$/;"	f	class:CLDataPostResultNotifier
ObjectsForLog	test/ATester.cpp	/^static long ObjectsForLog[NUM];$/;"	v	file:
ObjectsForLog	test_for_me/ZTester.cpp	/^static long ObjectsForLog[NUM];$/;"	v	file:
ObjectsForNameServer	test/ATester.cpp	/^static long ObjectsForNameServer[NUM];$/;"	v	file:
ObjectsForNameServer	test_for_me/ZTester.cpp	/^static long ObjectsForNameServer[NUM];$/;"	v	file:
On_1	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLPrivateQueueForPostMsg_CLMsgLoopManagerForPipeQueue
On_1	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
On_1	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLSharedQueueForProcessPostMsg_CLMsgLoopManagerForPipeQueue
On_1	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
On_1	test/CLMsgLoopManagerForSTLQueueTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLObserverTesterForCLMsgLoopManagerForSTLqueue
On_1	test/CLNonThreadForMsgLoopTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLPipeQueue_CLNonThreadForMsgLoop
On_1	test/CLNonThreadForMsgLoopTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLSTLQueue_CLNonThreadForMsgLoop
On_1	test/CLNonThreadForMsgLoopTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLStressObserverForCLNonThreadForMsgLoop
On_1	test/CLNonThreadForMsgLoopTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLStressObserverForCLNonThreadForMsgLoop_Process
On_1	test/CLThreadForMsgLoopTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLPipeQueue_CLThreadForMsgLoop
On_1	test/CLThreadForMsgLoopTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLSTLQueue_CLThreadForMsgLoop
On_1	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLSharedQueueForProcessPostMsg_CLMsgLoopManagerForPipeQueue
On_1	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
On_1	test_for_exe_forgzh/test_for_QueuLoop/CLSTLQueueLoopTest.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLObserverTesterForCLMsgLoopManagerForSTLqueue
On_1	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
On_1	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
On_1	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLPrivateQueueForPostMsg_CLMsgLoopManagerForPipeQueue
On_1	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
On_1	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLPrivateQueueForPostMsg_CLMsgLoopManagerForPipeQueue
On_1	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
On_1	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLSharedQueueForProcessPostMsg_CLMsgLoopManagerForPipeQueue
On_1	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
On_1	test_for_me/CLMsgLoopManagerForSTLQueueTester.cpp	/^	CLStatus On_1(CLMessage *pm)$/;"	f	class:CLObserverTesterForCLMsgLoopManagerForSTLqueue
On_2	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLPrivateQueueForPostMsg_CLMsgLoopManagerForPipeQueue
On_2	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
On_2	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLSharedQueueForProcessPostMsg_CLMsgLoopManagerForPipeQueue
On_2	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
On_2	test/CLMsgLoopManagerForSTLQueueTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLObserverTesterForCLMsgLoopManagerForSTLqueue
On_2	test/CLNonThreadForMsgLoopTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLPipeQueue_CLNonThreadForMsgLoop
On_2	test/CLNonThreadForMsgLoopTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLSTLQueue_CLNonThreadForMsgLoop
On_2	test/CLThreadForMsgLoopTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLPipeQueue_CLThreadForMsgLoop
On_2	test/CLThreadForMsgLoopTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLSTLQueue_CLThreadForMsgLoop
On_2	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLSharedQueueForProcessPostMsg_CLMsgLoopManagerForPipeQueue
On_2	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
On_2	test_for_exe_forgzh/test_for_QueuLoop/CLSTLQueueLoopTest.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLObserverTesterForCLMsgLoopManagerForSTLqueue
On_2	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
On_2	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
On_2	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLPrivateQueueForPostMsg_CLMsgLoopManagerForPipeQueue
On_2	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
On_2	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLPrivateQueueForPostMsg_CLMsgLoopManagerForPipeQueue
On_2	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
On_2	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLSharedQueueForProcessPostMsg_CLMsgLoopManagerForPipeQueue
On_2	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLSharedQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
On_2	test_for_me/CLMsgLoopManagerForSTLQueueTester.cpp	/^	CLStatus On_2(CLMessage *pm)$/;"	f	class:CLObserverTesterForCLMsgLoopManagerForSTLqueue
On_3	test/CLMsgLoopManagerForSTLQueueTester.cpp	/^	CLStatus On_3(CLMessage *pm)$/;"	f	class:CLObserverTesterForCLMsgLoopManagerForSTLqueue
On_3	test_for_exe_forgzh/test_for_QueuLoop/CLSTLQueueLoopTest.cpp	/^	CLStatus On_3(CLMessage *pm)$/;"	f	class:CLObserverTesterForCLMsgLoopManagerForSTLqueue
On_3	test_for_me/CLMsgLoopManagerForSTLQueueTester.cpp	/^	CLStatus On_3(CLMessage *pm)$/;"	f	class:CLObserverTesterForCLMsgLoopManagerForSTLqueue
On_Add	test/CLMessageLoopManagerTester.cpp	/^	CLStatus On_Add(CLMessage* pMsg)$/;"	f	class:TestObserverForCLMessageLoopManager
On_Quit	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	CLStatus On_Quit(CLMessage *pm)$/;"	f	class:CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
On_Quit	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	CLStatus On_Quit(CLMessage *pm)$/;"	f	class:CLPrivateQueueForSelfPostMsg_CLMsgLoopManagerForPipeQueue
On_TimerApply	timer/CLTimerMsgObserver.cpp	/^CLStatus CLTimerMsgObserver::On_TimerApply(CLMessage *pM)$/;"	f	class:CLTimerMsgObserver
On_TimerOut	timer/CLTimerMsgObserver.cpp	/^CLStatus CLTimerMsgObserver::On_TimerOut(CLMessage *pM)$/;"	f	class:CLTimerMsgObserver
OpenREvent	src/CLEpollEvent.cpp	/^CLStatus CLEpollEvent::OpenREvent()$/;"	f	class:CLEpollEvent
OpenRead	src/CLNamedPipe.cpp	/^CLStatus CLNamedPipe::OpenRead()$/;"	f	class:CLNamedPipe
OpenReadAndWrite	src/CLNamedPipe.cpp	/^CLStatus CLNamedPipe::OpenReadAndWrite()$/;"	f	class:CLNamedPipe
OpenWEvent	src/CLEpollEvent.cpp	/^CLStatus CLEpollEvent::OpenWEvent()$/;"	f	class:CLEpollEvent
OpenWrite	src/CLNamedPipe.cpp	/^CLStatus CLNamedPipe::OpenWrite()$/;"	f	class:CLNamedPipe
PIPE_FOR_READ	include/CLNamedPipe.h	8;"	d
PIPE_FOR_WRITE	include/CLNamedPipe.h	9;"	d
PIPE_QUEUE_BETWEEN_PROCESS	include/CLMsgLoopManagerForIOMultiplex.h	15;"	d
PIPE_QUEUE_BETWEEN_PROCESS	include/CLMsgLoopManagerForPipeQueue.h	16;"	d
PIPE_QUEUE_IN_PROCESS	include/CLMsgLoopManagerForIOMultiplex.h	16;"	d
PIPE_QUEUE_IN_PROCESS	include/CLMsgLoopManagerForPipeQueue.h	17;"	d
PNUM	test/CLLoggerTester.cpp	124;"	d	file:
POST_DATA_COMPLETE	include/CLProtocolDataPoster.h	7;"	d
POST_DATA_ERROR	include/CLProtocolDataPoster.h	9;"	d
POST_DATA_PARTION	include/CLProtocolDataPoster.h	8;"	d
POST_MSG_ERROR	include/CLDataPostResultNotifier.h	6;"	d
POST_MSG_PARTION	include/CLDataPostResultNotifier.h	7;"	d
POST_MSG_SUCCESS	include/CLDataPostResultNotifier.h	8;"	d
PopAll	src/CLIOVector.cpp	/^CLStatus CLIOVector::PopAll()$/;"	f	class:CLIOVector
PopBack	src/CLIOVector.cpp	/^CLStatus CLIOVector::PopBack(char** pBuffer, int* bufLen)$/;"	f	class:CLIOVector
PopFront	src/CLIOVector.cpp	/^CLStatus CLIOVector::PopFront(char** pBuffer, int* bufLen)$/;"	f	class:CLIOVector
PopMessage	src/CLSTLQueue.cpp	/^CLMessage* CLSTLQueue::PopMessage()$/;"	f	class:CLSTLQueue
PostData	src/CLDataPosterByNamedPipe.cpp	/^CLStatus CLDataPosterByNamedPipe::PostData(CLIOVector* pDataVec) $/;"	f	class:CLDataPosterByNamedPipe
PostData	src/CLDataPosterBySTLQueue.cpp	/^CLStatus CLDataPosterBySTLQueue::PostData(CLIOVector* pDataVec) \/\/do not deal with the free of data vec$/;"	f	class:CLDataPosterBySTLQueue
PostData	src/CLProtocolDataPoster.cpp	/^CLStatus CLProtocolDataPoster::PostData(CLIOVector *pDataVec)$/;"	f	class:CLProtocolDataPoster
PostExecutiveMessage	src/CLExecutiveCommunicationByNamedPipe.cpp	/^CLStatus CLExecutiveCommunicationByNamedPipe::PostExecutiveMessage(CLMessage *pMessage)$/;"	f	class:CLExecutiveCommunicationByNamedPipe
PostExecutiveMessage	src/CLExecutiveNameServer.cpp	/^CLStatus CLExecutiveNameServer::PostExecutiveMessage(const char* pstrExecutiveName, CLMessage *pMessage, CLDataPostResultNotifier *pResNotifier)$/;"	f	class:CLExecutiveNameServer
PostExecutiveMessage	src/CLThreadCommunicationBySTLqueue.cpp	/^CLStatus CLThreadCommunicationBySTLqueue::PostExecutiveMessage(CLMessage *pMessage)$/;"	f	class:CLThreadCommunicationBySTLqueue
PostExecutiveMessage	test/CLExecutiveNameServerTester.cpp	/^	virtual CLStatus PostExecutiveMessage(CLMessage *pMessage)$/;"	f	class:CLFalseCommunication
PostExecutiveMessage	test/CLExecutiveNameServerTester.cpp	/^	virtual CLStatus PostExecutiveMessage(CLMessage *pMessage)$/;"	f	class:CLFalseCommunication2
PostLeftMessage	src/CLMessagePoster.cpp	/^CLStatus CLMessagePoster::PostLeftMessage()$/;"	f	class:CLMessagePoster
PostLeftProtoData	src/CLProtocolDataPoster.cpp	/^CLStatus CLProtocolDataPoster::PostLeftProtoData()$/;"	f	class:CLProtocolDataPoster
PostMessage	src/CLMessagePoster.cpp	/^CLStatus CLMessagePoster::PostMessage(CLMessage* pMsg, CLDataPostResultNotifier *pResNotifier)$/;"	f	class:CLMessagePoster
PostProtoData	src/CLProtocolDataPoster.cpp	/^CLStatus CLProtocolDataPoster::PostProtoData(SLDataAndNotifier *pDataAndNotifier)\/\/this dataVec must be one Msg`s buffer$/;"	f	class:CLProtocolDataPoster
PushBack	src/CLIOVector.cpp	/^CLStatus CLIOVector::PushBack(char* pBuffer, int bufLen)$/;"	f	class:CLIOVector
PushBackIOVecs	src/CLBuffer.cpp	/^CLStatus CLBuffer::PushBackIOVecs(CLIOVector& IOVector)$/;"	f	class:CLBuffer
PushBackIOVecs	src/CLIOVector.cpp	/^CLStatus CLIOVector::PushBackIOVecs(CLIOVector& IOVector)$/;"	f	class:CLIOVector
PushFront	src/CLIOVector.cpp	/^CLStatus CLIOVector::PushFront(char* pBuffer, int bufLen)$/;"	f	class:CLIOVector
PushIOVecs	src/CLIOVector.cpp	/^CLStatus CLIOVector::PushIOVecs(int index, CLIOVector& IOVector) \/\/最好写一个从哪里开始到最后都pop出来的iovec！！！要写一个由index得到该index所在iterator位置的接口！！！$/;"	f	class:CLIOVector
PushMessage	src/CLMessageReceiverBySTLqueue.cpp	/^CLStatus CLMessageReceiverBySTLqueue::PushMessage(CLMessage * pMessage)$/;"	f	class:CLMessageReceiverBySTLqueue
PushMessage	src/CLSTLQueue.cpp	/^CLStatus CLSTLQueue::PushMessage(CLMessage* pMsg)$/;"	f	class:CLSTLQueue
QUIT_MESSAGE_LOOP	include/MessageID.h	5;"	d
READ_END	include/CLDataReader.h	4;"	d
READ_ERROR	include/CLDataReader.h	5;"	d
Read	src/CLBaseSocket.cpp	/^CLStatus CLBaseSocket::Read(CLIOVector& IOVec, CLSocketAddress *pAddr)$/;"	f	class:CLBaseSocket
Read	src/CLNamedPipe.cpp	/^CLStatus CLNamedPipe::Read(char *pBuf, int length)$/;"	f	class:CLNamedPipe
Read	src/CLSocket.cpp	/^CLStatus CLSocket::Read(CLIOVector& IOVec, CLSocketAddress* pAddr)$/;"	f	class:CLSocket
Read	src/CLTimerFd.cpp	/^CLStatus CLTimerFd::Read()$/;"	f	class:CLTimerFd
ReadContext	src/CLDataReader.cpp	/^CLStatus CLDataReader::ReadContext(int fd)$/;"	f	class:CLDataReader
ReadData	src/CLBuffer.cpp	/^CLStatus CLBuffer::ReadData(char* pBuffer, const int& index, const int& len)$/;"	f	class:CLBuffer
ReadData	src/CLIOVector.cpp	/^CLStatus CLIOVector::ReadData(char* pBuffer, const int& index, const int& len)$/;"	f	class:CLIOVector
ReadDataAndGetMessage	src/CLDataReader.cpp	/^CLMessage* CLDataReader::ReadDataAndGetMessage()$/;"	f	class:CLDataReader
ReadDataToMessageQueue	src/CLMessageReceiverBySTLqueue.cpp	/^CLMessage* CLMessageReceiverBySTLqueue::ReadDataToMessageQueue()$/;"	f	class:CLMessageReceiverBySTLqueue
ReadHeader	src/CLDataReader.cpp	/^CLStatus CLDataReader::ReadHeader(int fd)$/;"	f	class:CLDataReader
ReadMsgFromPipe	src/CLPrivateMsgReceiverbyNamedPipe.cpp	/^CLStatus CLPrivateMsgReceiverbyNamedPipe::ReadMsgFromPipe(int fd)$/;"	f	class:CLPrivateMsgReceiverbyNamedPipe
ReadMsgFromPipe	src/CLSharedMsgReceiverByNamedPipe.cpp	/^CLStatus CLSharedMsgReceiverByNamedPipe::ReadMsgFromPipe(int fd)$/;"	f	class:CLSharedMsgReceiverByNamedPipe
ReadOrWrite	src/CLBaseSocket.cpp	/^CLStatus CLBaseSocket::ReadOrWrite(CLIOVector& IOVec, CLSocketAddress *pAddr, bool bWrite)$/;"	f	class:CLBaseSocket
ReadVecs	src/CLNamedPipe.cpp	/^CLStatus CLNamedPipe::ReadVecs(CLIOVector& dataVec)$/;"	f	class:CLNamedPipe
RefCount	include/CLSharedObjectsImpl.h	/^	int RefCount;$/;"	m	struct:SLSharedObjectHead
Register	src/CLExecutiveNameServer.cpp	/^CLStatus CLExecutiveNameServer::Register(const char* strExecutiveName, CLMessagePoster *pMsgPoster)$/;"	f	class:CLExecutiveNameServer
Register	src/CLMessageLoopManager.cpp	/^CLStatus CLMessageLoopManager::Register(unsigned long lMsgID, CallBackForMessageLoop pMsgProcessFunction)$/;"	f	class:CLMessageLoopManager
Register	src/CLMsgLoopManagerForEpoll.cpp	/^CLStatus CLMsgLoopManagerForEpoll::Register(unsigned long lMsgID, CallBackForMessageLoop pMsgProcessFunction)$/;"	f	class:CLMsgLoopManagerForEpoll
RegisterDeserializer	src/CLMsgLoopManagerForEpoll.cpp	/^CLStatus CLMsgLoopManagerForEpoll::RegisterDeserializer(unsigned long lMsgID, CLMessageDeserializer *pDeserializer)$/;"	f	class:CLMsgLoopManagerForEpoll
RegisterDeserializer	src/CLMsgLoopManagerForIOMultiplex.cpp	/^CLStatus CLMsgLoopManagerForIOMultiplex::RegisterDeserializer(string strQueueName, unsigned long lMsgID, CLMessageDeserializer *pDeserializer)$/;"	f	class:CLMsgLoopManagerForIOMultiplex
RegisterDeserializer	src/CLMsgLoopManagerForPipeQueue.cpp	/^CLStatus CLMsgLoopManagerForPipeQueue::RegisterDeserializer(unsigned long lMsgID, CLMessageDeserializer *pDeserializer)$/;"	f	class:CLMsgLoopManagerForPipeQueue
RegisterDeserializer	src/CLMultiMsgDeserializer.cpp	/^CLStatus CLMultiMsgDeserializer::RegisterDeserializer(unsigned long lMsgID, CLMessageDeserializer *pDeserializer)$/;"	f	class:CLMultiMsgDeserializer
RegisterDeserializer	src/CLNonThreadForMsgLoop.cpp	/^CLStatus CLNonThreadForMsgLoop::RegisterDeserializer(unsigned long lMsgID, CLMessageDeserializer *pDeserializer)$/;"	f	class:CLNonThreadForMsgLoop
RegisterDeserializer	src/CLSharedMsgReceiverByNamedPipe.cpp	/^CLStatus CLSharedMsgReceiverByNamedPipe::RegisterDeserializer(unsigned long lMsgID, CLMessageDeserializer *pDeserializer)$/;"	f	class:CLSharedMsgReceiverByNamedPipe
RegisterDeserializer	src/CLThreadForMsgLoop.cpp	/^CLStatus CLThreadForMsgLoop::RegisterDeserializer(unsigned long lMsgID, CLMessageDeserializer *pDeserializer)$/;"	f	class:CLThreadForMsgLoop
RegisterMsgQueue	src/CLMsgLoopManagerForIOMultiplex.cpp	/^CLStatus CLMsgLoopManagerForIOMultiplex::RegisterMsgQueue(string strQueueName, CLMessageQueue *pMsgQueue, bool isShort)$/;"	f	class:CLMsgLoopManagerForIOMultiplex
RegisterMsgReceiver	src/CLMsgLoopManagerForEpoll.cpp	/^CLStatus CLMsgLoopManagerForEpoll::RegisterMsgReceiver(CLMessageReceiver *pReceiver)$/;"	f	class:CLMsgLoopManagerForEpoll
RegisterPipeReceiver	src/CLMsgLoopManagerForEpoll.cpp	/^CLStatus CLMsgLoopManagerForEpoll::RegisterPipeReceiver(string strPipeName, int pipeType)$/;"	f	class:CLMsgLoopManagerForEpoll
RegisterREvent	src/CLEpollEvent.cpp	/^CLStatus CLEpollEvent::RegisterREvent()$/;"	f	class:CLEpollEvent
RegisterRWEvents	src/CLEpollEvent.cpp	/^CLStatus CLEpollEvent::RegisterRWEvents()$/;"	f	class:CLEpollEvent
RegisterSerializer	src/CLMessagePoster.cpp	/^CLStatus CLMessagePoster::RegisterSerializer(unsigned long lMsgID, CLMessageSerializer *pSerializer)$/;"	f	class:CLMessagePoster
RegisterSerializer	src/CLMultiMsgSerializer.cpp	/^CLStatus CLMultiMsgSerializer::RegisterSerializer(unsigned long lMsgID, CLMessageSerializer *pSerializer)$/;"	f	class:CLMultiMsgSerializer
RegisterSerializer	src/CLSharedExecutiveCommunicationByNamedPipe.cpp	/^CLStatus CLSharedExecutiveCommunicationByNamedPipe::RegisterSerializer(unsigned long lMsgID, CLMessageSerializer *pSerializer)$/;"	f	class:CLSharedExecutiveCommunicationByNamedPipe
RegisterTimerReceiver	src/CLMsgLoopManagerForEpoll.cpp	/^CLStatus CLMsgLoopManagerForEpoll::RegisterTimerReceiver(struct itimerspec& sTimerValue, string pstrRemoteName, const int& ID)$/;"	f	class:CLMsgLoopManagerForEpoll
RegisterWEvent	src/CLEpollEvent.cpp	/^CLStatus CLEpollEvent::RegisterWEvent()$/;"	f	class:CLEpollEvent
Release	include/CLSharedObjectAllocator.h	/^CLStatus CLSharedObjectAllocator<TSharedObjectPool, TSharedObject>::Release(const char *pstrEventName)$/;"	f	class:CLSharedObjectAllocator
ReleaseCommunicationPtr	src/CLExecutiveNameServer.cpp	/^CLStatus CLExecutiveNameServer::ReleaseCommunicationPtr(const char* strExecutiveName)$/;"	f	class:CLExecutiveNameServer
ReleaseSharedObject	include/CLSharedObjectAllocator.h	/^CLStatus CLSharedObjectAllocator<TSharedObjectPool, TSharedObject>::ReleaseSharedObject(const char *pstrObjectName)$/;"	f	class:CLSharedObjectAllocator
ReleaseSharedObject	src/CLSharedObjectsImpl.cpp	/^CLStatus CLSharedObjectsImpl::ReleaseSharedObject(const char *pstrSharedObjectName)$/;"	f	class:CLSharedObjectsImpl
Run	src/CLEpoll.cpp	/^CLStatus CLEpoll::Run()$/;"	f	class:CLEpoll
Run	src/CLNonThreadForMsgLoop.cpp	/^CLStatus CLNonThreadForMsgLoop::Run(void *pContext)$/;"	f	class:CLNonThreadForMsgLoop
Run	src/CLProcess.cpp	/^CLStatus CLProcess::Run(void *pstrCmdLine)$/;"	f	class:CLProcess
Run	src/CLThread.cpp	/^CLStatus CLThread::Run(void *pContext)$/;"	f	class:CLThread
Run	src/CLThreadForMsgLoop.cpp	/^CLStatus CLThreadForMsgLoop::Run(void *pContext)$/;"	f	class:CLThreadForMsgLoop
RunChildFunction	src/CLProcess.cpp	/^void CLProcess::RunChildFunction(void *pstrCmdLine)$/;"	f	class:CLProcess
RunExecutiveFunction	src/CLExecutiveFunctionForMsgLoop.cpp	/^CLStatus CLExecutiveFunctionForMsgLoop::RunExecutiveFunction(void* pContext)$/;"	f	class:CLExecutiveFunctionForMsgLoop
RunExecutiveFunction	src/CLProcessFunctionForExec.cpp	/^CLStatus CLProcessFunctionForExec::RunExecutiveFunction(void* pCmdLine)$/;"	f	class:CLProcessFunctionForExec
RunExecutiveFunction	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^	virtual CLStatus RunExecutiveFunction(void* pContext)$/;"	f	class:TestThreadForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg
RunExecutiveFunction	test/CLMessageQueueByNamedPipeTester.cpp	/^	virtual CLStatus RunExecutiveFunction(void* pContext)$/;"	f	class:TestThreadForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg
RunExecutiveFunction	test/CLMessageQueueBySTLqueueTester.cpp	/^	virtual CLStatus RunExecutiveFunction(void* pContext)$/;"	f	class:CThreadFunctionForCLMessageQueue
RunExecutiveFunction	test/CLMessageQueueBySTLqueueTester.cpp	/^	virtual CLStatus RunExecutiveFunction(void* pContext)$/;"	f	class:CThreadFunctionForCLMessageQueue2
RunExecutiveFunction	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual CLStatus RunExecutiveFunction(void* pContext)$/;"	f	class:CLThreadForTestingCLMsgLoopManagerForPipeQueue_PrivateQueueForPostMsg
RunExecutiveFunction	test/CLNonThreadForMsgLoopTester.cpp	/^	virtual CLStatus RunExecutiveFunction(void* pContext)$/;"	f	class:CLStressTester
RunExecutiveFunction	test/CLThreadInitialFinishedNotifierTester.cpp	/^	virtual CLStatus RunExecutiveFunction(void* pContext)$/;"	f	class:CLThreadForCLThreadInitialFinishedNotifier_Notify
RunExecutiveFunction	test/CLThreadTester.cpp	/^	virtual CLStatus RunExecutiveFunction(void* pContext)$/;"	f	class:CThreadFunctionForCLThread
RunExecutiveFunction	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	virtual CLStatus RunExecutiveFunction(void* pContext)$/;"	f	class:CLThreadForTestingCLMsgLoopManagerForPipeQueue_PrivateQueueForPostMsg
RunExecutiveFunction	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual CLStatus RunExecutiveFunction(void* pContext)$/;"	f	class:CLThreadForTestingCLMsgLoopManagerForPipeQueue_PrivateQueueForPostMsg
SHARED_SPACE_FOR_SHARED_CONDITION_VARIABLE_ALLOCATOR	src/CLSharedConditionVariableImpl.cpp	4;"	d	file:
SHARED_SPACE_FOR_SHARED_EVENT_ALLOCATOR	src/CLSharedEventImpl.cpp	3;"	d	file:
SHARED_SPACE_FOR_SHARED_MUTEX_ALLOCATOR	src/CLSharedMutexImpl.cpp	4;"	d	file:
SLDataAndNotifier	include/CLProtocolDataPoster.h	/^}SLDataAndNotifier;$/;"	t	typeref:struct:_proto_data
SLEventInfo	include/CLSharedEventImpl.h	/^struct SLEventInfo$/;"	s
SLExecutiveInitialParameter	include/CLMessageLoopManager.h	/^struct SLExecutiveInitialParameter$/;"	s
SLMessagePosterPtrCount	include/CLExecutiveNameServer.h	/^struct SLMessagePosterPtrCount$/;"	s
SLSharedConditionVariableItem	include/CLSharedConditionVariableImpl.h	/^struct SLSharedConditionVariableItem$/;"	s
SLSharedEventItem	include/CLSharedEventImpl.h	/^struct SLSharedEventItem$/;"	s
SLSharedMutexItem	include/CLSharedMutexImpl.h	/^struct SLSharedMutexItem$/;"	s
SLSharedObjectHead	include/CLSharedObjectsImpl.h	/^struct SLSharedObjectHead$/;"	s
SOURCE_EXTENSIONS	.ycm_extra_conf.py	/^SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]$/;"	v
Serialize	src/CLMultiMsgSerializer.cpp	/^CLStatus CLMultiMsgSerializer::Serialize(CLMessage *pMsg, CLIOVector *pDataVec)$/;"	f	class:CLMultiMsgSerializer
Serialize	src/CLPointerMsgSerializer.cpp	/^CLStatus CLPointerMsgSerializer::Serialize(CLMessage *pMsg, CLIOVector *pDataVec)$/;"	f	class:CLPointerMsgSerializer
Serialize	src/CLTimerApplyMsgSerializer.cpp	/^CLStatus CLTimerApplyMsgSerializer::Serialize(CLMessage *pMsg, CLIOVector *pDataVec)$/;"	f	class:CLTimerApplyMsgSerializer
Serialize	src/CLTimerOutNotifyMsgSerializer.cpp	/^CLStatus CLTimerOutNotifyMsgSerializer::Serialize(CLMessage *pMsg, CLIOVector *pDataVec)$/;"	f	class:CLTimerOutNotifyMsgSerializer
Serialize	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^	virtual char *Serialize(CLMessage *pMsg, unsigned int *pFullLength, unsigned int HeadLength)$/;"	f	class:Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer
Serialize	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^	virtual char *Serialize(CLMessage *pMsg, unsigned int *pFullLength, unsigned int HeadLength)$/;"	f	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer
Serialize	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual char *Serialize(CLMessage *pMsg, unsigned int *pFullLength, unsigned int HeadLength)$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer
Serialize	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual char *Serialize(CLMessage *pMsg, unsigned int *pFullLength, unsigned int HeadLength)$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer
Serialize	test/CLNonThreadForMsgLoopTester.cpp	/^	virtual char *Serialize(CLMessage *pMsg, unsigned int *pFullLength, unsigned int HeadLength)$/;"	f	class:CLMsg1ForCLNonThreadForMsgLoop_Serializer
Serialize	test/CLNonThreadForMsgLoopTester.cpp	/^	virtual char *Serialize(CLMessage *pMsg, unsigned int *pFullLength, unsigned int HeadLength)$/;"	f	class:CLMsg2ForCLNonThreadForMsgLoop_Serializer
Serialize	test/CLThreadForMsgLoopTester.cpp	/^	virtual char *Serialize(CLMessage *pMsg, unsigned int *pFullLength, unsigned int HeadLength)$/;"	f	class:CLMsg1ForCLThreadForMsgLoop_Serializer
Serialize	test/CLThreadForMsgLoopTester.cpp	/^	virtual char *Serialize(CLMessage *pMsg, unsigned int *pFullLength, unsigned int HeadLength)$/;"	f	class:CLMsg2ForCLThreadForMsgLoop_Serializer
Serialize	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	virtual CLStatus Serialize(CLMessage *pMsg, CLIOVector *pDataVec)$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer
Serialize	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	virtual CLStatus Serialize(CLMessage *pMsg, CLIOVector *pDataVec)$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer
Serialize	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	virtual char *Serialize(CLMessage *pMsg, unsigned int *pFullLength, unsigned int HeadLength)$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer
Serialize	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	virtual char *Serialize(CLMessage *pMsg, unsigned int *pFullLength, unsigned int HeadLength)$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer
Serialize	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	virtual CLStatus Serialize(CLMessage *pMsg, CLIOVector *pDataVec)$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer
Serialize	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	virtual CLStatus Serialize(CLMessage *pMsg, CLIOVector *pDataVec)$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer
Serialize	test_for_exe_forgzh/test_for_processProvider/CLProcessTestProvider.cpp	/^	virtual CLStatus Serialize(CLMessage *pMsg, CLIOVector *pDataVec)$/;"	f	class:Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer
Serialize	test_for_exe_forgzh/test_for_processProvider/CLProcessTestProvider.cpp	/^	virtual CLStatus Serialize(CLMessage *pMsg, CLIOVector *pDataVec)$/;"	f	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer
Serialize	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	virtual char *Serialize(CLMessage *pMsg, unsigned int *pFullLength, unsigned int HeadLength)$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer
Serialize	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	virtual char *Serialize(CLMessage *pMsg, unsigned int *pFullLength, unsigned int HeadLength)$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer
Serialize	test_for_exec/test_for_CLExecutiveCommunicationByNamedPipe/test.cpp	/^	virtual char *Serialize(CLMessage *pMsg, unsigned int *pFullLength, unsigned int HeadLength)$/;"	f	class:Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer
Serialize	test_for_exec/test_for_CLExecutiveCommunicationByNamedPipe/test.cpp	/^	virtual char *Serialize(CLMessage *pMsg, unsigned int *pFullLength, unsigned int HeadLength)$/;"	f	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer
Serialize	test_for_exec/test_for_CLNonThreadForMsgLoop_Stress_Testing/test.cpp	/^	virtual char *Serialize(CLMessage *pMsg, unsigned int *pFullLength, unsigned int HeadLength)$/;"	f	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer
Serialize	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual CLStatus Serialize(CLMessage *pMsg, CLIOVector *pDataVec)$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer
Serialize	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual CLStatus Serialize(CLMessage *pMsg, CLIOVector *pDataVec)$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer
Set	src/CLEvent.cpp	/^CLStatus CLEvent::Set()$/;"	f	class:CLEvent
SetFd	src/CLEpollEvent.cpp	/^CLStatus CLEpollEvent::SetFd(int fd)$/;"	f	class:CLEpollEvent
SetHandler	src/CLEpollEvent.cpp	/^CLStatus CLEpollEvent::SetHandler(void* pHandler)$/;"	f	class:CLEpollEvent
SetMessage	src/CLDataPostResultNotifier.cpp	/^CLStatus CLDataPostResultNotifier::SetMessage(CLMessage *pMsg)$/;"	f	class:CLDataPostResultNotifier
SetNonBlocking	src/CLMsgLoopManagerForIOMultiplex.cpp	/^CLStatus CLMsgLoopManagerForIOMultiplex::SetNonBlocking(int fd)$/;"	f	class:CLMsgLoopManagerForIOMultiplex
SetParameters	src/CLProtocolDataPoster.cpp	/^CLStatus CLProtocolDataPoster::SetParameters(CLDataPoster *pDataPoster, CLEvent *pEvent)$/;"	f	class:CLProtocolDataPoster
SetProtocolDataPoster	src/CLDataPoster.cpp	/^CLStatus CLDataPoster::SetProtocolDataPoster(CLProtocolDataPoster *pProtoDataPoster)$/;"	f	class:CLDataPoster
SetWorkDirectory	src/CLProcessFunctionForExec.cpp	/^CLStatus CLProcessFunctionForExec::SetWorkDirectory(char *pstrArgv0)$/;"	f	class:CLProcessFunctionForExec
StartClock	src/CLTimerFd.cpp	/^CLStatus CLTimerFd::StartClock()$/;"	f	class:CLTimerFd
StartFunctionOfThread	src/CLThread.cpp	/^void* CLThread::StartFunctionOfThread(void *pThis)$/;"	f	class:CLThread
Status	include/CLSharedObjectsImpl.h	/^	int Status;$/;"	m	struct:SLSharedObjectHead
TCP_CLIENT_ARRIVED_MSG_ID	include/MessageID.h	8;"	d
TCP_SOCKET	include/definition.h	/^const int TCP_SOCKET = 1;$/;"	v
TEST	test/ATester.cpp	/^TEST(CLLibExecutiveInitializer, FirstCallDestroy)$/;"	f
TEST	test/ATester.cpp	/^TEST(CLLibExecutiveInitializer, Singleton)$/;"	f
TEST	test/CLConditionVariableTester.cpp	/^TEST(CLConditionVariable, Multi_process_for_Shared_Cond)$/;"	f
TEST	test/CLConditionVariableTester.cpp	/^TEST(CLConditionVariable, Normal)$/;"	f
TEST	test/CLConditionVariableTester.cpp	/^TEST(CLConditionVariable, Normal2)$/;"	f
TEST	test/CLConditionVariableTester.cpp	/^TEST(CLConditionVariable, Wait_null)$/;"	f
TEST	test/CLCriticalSectionTester.cpp	/^TEST(CLCriticalSection, Normal)$/;"	f
TEST	test/CLEventTester.cpp	/^TEST(CLEvent, ResetAutomatically)$/;"	f
TEST	test/CLEventTester.cpp	/^TEST(CLEvent, ResetAutomatically_shared)$/;"	f
TEST	test/CLEventTester.cpp	/^TEST(CLEvent, Semaphore)$/;"	f
TEST	test/CLEventTester.cpp	/^TEST(CLEvent, Semaphore_shared)$/;"	f
TEST	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^TEST(CLExecutiveCommunicationByNamedPipe, PrivateQueueForPostMsg)$/;"	f
TEST	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^TEST(CLExecutiveCommunicationByNamedPipe, PrivateQueueForSelfPostMsg)$/;"	f
TEST	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^TEST(CLExecutiveCommunicationByNamedPipe, SharedQueueForPostMsg)$/;"	f
TEST	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^TEST(CLExecutiveCommunicationByNamedPipe, SharedQueueForSelfPostMsg)$/;"	f
TEST	test/CLExecutiveFunctionForMsgLoopTester.cpp	/^TEST(CLExecutiveFunctionForMsgLoop, deconstructor_and_entermsgloop)$/;"	f
TEST	test/CLExecutiveFunctionForMsgLoopTester.cpp	/^TEST(CLExecutiveFunctionForMsgLoop, parameter_null)$/;"	f
TEST	test/CLExecutiveNameServerTester.cpp	/^TEST(CLExecutiveNameServer, GetCommunicationPtr)$/;"	f
TEST	test/CLExecutiveNameServerTester.cpp	/^TEST(CLExecutiveNameServer, PostExecutiveMessage)$/;"	f
TEST	test/CLExecutiveNameServerTester.cpp	/^TEST(CLExecutiveNameServer, Register)$/;"	f
TEST	test/CLExecutiveNameServerTester.cpp	/^TEST(CLExecutiveNameServer, ReleaseCommunicationPtr)$/;"	f
TEST	test/CLExecutiveNameServerTester.cpp	/^TEST(CLExecutiveNameServer, normal)$/;"	f
TEST	test/CLLoggerTester.cpp	/^TEST(CLLogger, Features)$/;"	f
TEST	test/CLLoggerTester.cpp	/^TEST(CLLogger, ProcessSafety)$/;"	f
TEST	test/CLLoggerTester.cpp	/^TEST(CLLogger, WriteLogForMultiThread)$/;"	f
TEST	test/CLLoggerTester.cpp	/^TEST(CLLogger, WriteLogMsg_pstrmsg_0)$/;"	f
TEST	test/CLLoggerTester.cpp	/^TEST(CLLogger, WriteLogMsg_pstrmsg_empty)$/;"	f
TEST	test/CLLoggerTester.cpp	/^TEST(CLLogger, WriteLog_pstrmsg_0)$/;"	f
TEST	test/CLLoggerTester.cpp	/^TEST(CLLogger, WriteLog_pstrmsg_empty)$/;"	f
TEST	test/CLMessageLoopManagerTester.cpp	/^TEST(CLMessageLoopManager, Normal)$/;"	f
TEST	test/CLMessageQueueByNamedPipeTester.cpp	/^TEST(CLMessageQueueByNamedPipe, PrivateQueueForPostMsg)$/;"	f
TEST	test/CLMessageQueueByNamedPipeTester.cpp	/^TEST(CLMessageQueueByNamedPipe, PrivateQueueForSelfPostMsg)$/;"	f
TEST	test/CLMessageQueueByNamedPipeTester.cpp	/^TEST(CLMessageQueueByNamedPipe, SharedQueueForPostMsg)$/;"	f
TEST	test/CLMessageQueueByNamedPipeTester.cpp	/^TEST(CLMessageQueueByNamedPipe, SharedQueueForSelfPostMsg)$/;"	f
TEST	test/CLMessageQueueBySTLqueueTester.cpp	/^TEST(CLMessageQueueBySTLqueue, MutipleThread)$/;"	f
TEST	test/CLMessageQueueBySTLqueueTester.cpp	/^TEST(CLMessageQueueBySTLqueue, Normal)$/;"	f
TEST	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^TEST(CLMsgLoopManagerForPipeQueue, PrivateQueueForSelfPostMsg)$/;"	f
TEST	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^TEST(CLMsgLoopManagerForPipeQueue, PrivateQueueForfPostMsg)$/;"	f
TEST	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^TEST(CLMsgLoopManagerForPipeQueue, SharedQueueForProcessPostMsg)$/;"	f
TEST	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^TEST(CLMsgLoopManagerForPipeQueue, SharedQueueForSelfPostMsg)$/;"	f
TEST	test/CLMsgLoopManagerForSTLQueueTester.cpp	/^TEST(CLMsgLoopManagerForSTLqueue, Normal)$/;"	f
TEST	test/CLMsgLoopManagerForSTLQueueTester.cpp	/^TEST(CLMsgLoopManagerForSTLqueue, ObserverInitializeFailure)$/;"	f
TEST	test/CLMutexTester.cpp	/^TEST(CLMutex, MultiThread)$/;"	f
TEST	test/CLMutexTester.cpp	/^TEST(CLMutex, MultiThread_Pthread)$/;"	f
TEST	test/CLMutexTester.cpp	/^TEST(CLMutex, RecordLock)$/;"	f
TEST	test/CLMutexTester.cpp	/^TEST(CLMutex, RecordLockAndPthread)$/;"	f
TEST	test/CLMutexTester.cpp	/^TEST(CLMutex, RecordLockAndPthread2)$/;"	f
TEST	test/CLMutexTester.cpp	/^TEST(CLMutex, SharedMutexByPthread)$/;"	f
TEST	test/CLNonThreadForMsgLoopTester.cpp	/^TEST(CLNonThreadForMsgLoop, Constructor)$/;"	f
TEST	test/CLNonThreadForMsgLoopTester.cpp	/^TEST(CLNonThreadForMsgLoop, Constructor1)$/;"	f
TEST	test/CLNonThreadForMsgLoopTester.cpp	/^TEST(CLNonThreadForMsgLoop, Constructor2)$/;"	f
TEST	test/CLNonThreadForMsgLoopTester.cpp	/^TEST(CLNonThreadForMsgLoop, Constructor3)$/;"	f
TEST	test/CLNonThreadForMsgLoopTester.cpp	/^TEST(CLNonThreadForMsgLoop, Constructor4)$/;"	f
TEST	test/CLNonThreadForMsgLoopTester.cpp	/^TEST(CLNonThreadForMsgLoop, PRIVATE_PIPE_QUEUE)$/;"	f
TEST	test/CLNonThreadForMsgLoopTester.cpp	/^TEST(CLNonThreadForMsgLoop, PRIVATE_PIPE_QUEUE_STRESS)$/;"	f
TEST	test/CLNonThreadForMsgLoopTester.cpp	/^TEST(CLNonThreadForMsgLoop, SHARED_PIPE_QUEUE_STRESS)$/;"	f
TEST	test/CLNonThreadForMsgLoopTester.cpp	/^TEST(CLNonThreadForMsgLoop, STL_QUEUE)$/;"	f
TEST	test/CLNonThreadForMsgLoopTester.cpp	/^TEST(CLNonThreadForMsgLoop, STL_QUEUE_STRESS)$/;"	f
TEST	test/CLNonThreadForMsgLoopTester.cpp	/^TEST(CLNonThreadForMsgLoop, Shared_PIPE_QUEUE)$/;"	f
TEST	test/CLProcessTester.cpp	/^TEST(CLProcess, Exception)$/;"	f
TEST	test/CLProcessTester.cpp	/^TEST(CLProcess, NoWait)$/;"	f
TEST	test/CLProcessTester.cpp	/^TEST(CLProcess, Normal)$/;"	f
TEST	test/CLSharedMemoryTester.cpp	/^TEST(CLSharedMemory, Normal)$/;"	f
TEST	test/CLSharedObjectAllocatorTester.cpp	/^TEST(CLSharedConditionVariableAllocator, CheckingForAllocate)$/;"	f
TEST	test/CLSharedObjectAllocatorTester.cpp	/^TEST(CLSharedConditionVariableAllocator, CheckingForPoolAgain)$/;"	f
TEST	test/CLSharedObjectAllocatorTester.cpp	/^TEST(CLSharedConditionVariableAllocator, MultiProcess)$/;"	f
TEST	test/CLSharedObjectAllocatorTester.cpp	/^TEST(CLSharedMutexAllocator, MultiProcess)$/;"	f
TEST	test/CLSharedObjectAllocatorTester.cpp	/^TEST(CLSharedObjectAllocator, CheckingForPool)$/;"	f
TEST	test/CLStatusTester.cpp	/^TEST(CLStatus, FunctionReturnFalse)$/;"	f
TEST	test/CLStatusTester.cpp	/^TEST(CLStatus, FunctionReturnRight)$/;"	f
TEST	test/CLThreadForMsgLoopTester.cpp	/^TEST(CLThreadForMsgLoop, Constructor)$/;"	f
TEST	test/CLThreadForMsgLoopTester.cpp	/^TEST(CLThreadForMsgLoop, Constructor1)$/;"	f
TEST	test/CLThreadForMsgLoopTester.cpp	/^TEST(CLThreadForMsgLoop, Constructor2)$/;"	f
TEST	test/CLThreadForMsgLoopTester.cpp	/^TEST(CLThreadForMsgLoop, Constructor3)$/;"	f
TEST	test/CLThreadForMsgLoopTester.cpp	/^TEST(CLThreadForMsgLoop, Constructor4)$/;"	f
TEST	test/CLThreadForMsgLoopTester.cpp	/^TEST(CLThreadForMsgLoop, PRIVATE_PIPE_QUEUE)$/;"	f
TEST	test/CLThreadForMsgLoopTester.cpp	/^TEST(CLThreadForMsgLoop, STL_QUEUE)$/;"	f
TEST	test/CLThreadForMsgLoopTester.cpp	/^TEST(CLThreadForMsgLoop, Shared_PIPE_QUEUE)$/;"	f
TEST	test/CLThreadInitialFinishedNotifierTester.cpp	/^TEST(CLThreadInitialFinishedNotifier, Notify)$/;"	f
TEST	test/CLThreadTester.cpp	/^TEST(CLThread, Normal)$/;"	f
TEST	test/CLThreadTester.cpp	/^TEST(CLThread, Normal2)$/;"	f
TEST	test/CLThreadTester.cpp	/^TEST(CLThread, Normal3)$/;"	f
TEST	test/ZTester.cpp	/^TEST(CLLibExecutiveInitializerDestroy, DestroyAgain)$/;"	f
TEST	test/ZTester.cpp	/^TEST(CLLibExecutiveInitializerDestroy, InitialAgain)$/;"	f
TEST	test/ZTester.cpp	/^TEST(CLLibExecutiveInitializerDestroy, Normal)$/;"	f
TEST	test_for_exe_forgzh/test_for_socket/EchoClient/CLSocketClientTester.cpp	/^TEST(CLSocket, TCPClient)$/;"	f
TEST	test_for_exe_forgzh/test_for_socket/EchoServer/CLSocketServerTester.cpp	/^TEST(CLSocket, TCPServer)$/;"	f
TEST	test_for_me/ATester.cpp	/^TEST(CLLibExecutiveInitializerDestroy, DestroyAgain)$/;"	f
TEST	test_for_me/ATester.cpp	/^TEST(CLLibExecutiveInitializerDestroy, InitialAgain)$/;"	f
TEST	test_for_me/ATester.cpp	/^TEST(CLLibExecutiveInitializerDestroy, Normal)$/;"	f
TEST	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^TEST(CLMsgLoopManagerForPipeQueue, PrivateQueueForSelfPostMsg)$/;"	f
TEST	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^TEST(CLMsgLoopManagerForPipeQueue, PrivateQueueForfPostMsg)$/;"	f
TEST	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^TEST(CLMsgLoopManagerForPipeQueue, SharedQueueForProcessPostMsg)$/;"	f
TEST	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^TEST(CLMsgLoopManagerForPipeQueue, SharedQueueForSelfPostMsg)$/;"	f
TEST	test_for_me/CLMsgLoopManagerForSTLQueueTester.cpp	/^TEST(CLMsgLoopManagerForSTLqueue, Normal)$/;"	f
TEST	test_for_me/CLMsgLoopManagerForSTLQueueTester.cpp	/^TEST(CLMsgLoopManagerForSTLqueue, ObserverInitializeFailure)$/;"	f
TEST	test_for_me/CLSocketTester.cpp	/^TEST(CLSocket, CLSocket)$/;"	f
TEST	test_for_me/ZTester.cpp	/^TEST(CLLibExecutiveInitializer, FirstCallDestroy)$/;"	f
TEST	test_for_me/ZTester.cpp	/^TEST(CLLibExecutiveInitializer, Singleton)$/;"	f
TIMER_APPLY_MSG_ID	include/MessageID.h	12;"	d
TIMER_OUT_MSG_ID	include/MessageID.h	13;"	d
TIMER_OUT_NOTIFY_MSG_ID	include/MessageID.h	14;"	d
TIMER_PIPE_NAME	timer/CLTimerMsgObserver.cpp	7;"	d	file:
TIMER_PIPE_NAME	timer/CLTimerMsgObserver.h	7;"	d
Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^	Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg() : CLMessage(2)$/;"	f	class:Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg
Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^class Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg : public CLMessage$/;"	c	file:
Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test_for_exe_forgzh/test_for_processProvider/CLProcessTestProvider.cpp	/^	Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg() : CLMessage(2)$/;"	f	class:Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg
Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test_for_exe_forgzh/test_for_processProvider/CLProcessTestProvider.cpp	/^class Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg : public CLMessage$/;"	c	file:
Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test_for_exec/test_for_CLExecutiveCommunicationByNamedPipe/test.cpp	/^	Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg() : CLMessage(2)$/;"	f	class:Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg
Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test_for_exec/test_for_CLExecutiveCommunicationByNamedPipe/test.cpp	/^class Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg : public CLMessage$/;"	c	file:
Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^class Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer : public CLMessageSerializer$/;"	c	file:
Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer	test_for_exe_forgzh/test_for_processProvider/CLProcessTestProvider.cpp	/^class Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer : public CLMessageSerializer$/;"	c	file:
Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer	test_for_exec/test_for_CLExecutiveCommunicationByNamedPipe/test.cpp	/^class Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer : public CLMessageSerializer$/;"	c	file:
Test2MsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg	test/CLMessageQueueByNamedPipeTester.cpp	/^	Test2MsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg() : CLMessage(2)$/;"	f	class:Test2MsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg
Test2MsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg	test/CLMessageQueueByNamedPipeTester.cpp	/^class Test2MsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg : public CLMessage$/;"	c	file:
Test2MsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsgDeserializer	test/CLMessageQueueByNamedPipeTester.cpp	/^class Test2MsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsgDeserializer : public CLMessageDeserializer$/;"	c	file:
TestClassForCLMessageLoopManager	test/CLMessageLoopManagerTester.cpp	/^	TestClassForCLMessageLoopManager(CLMessageObserver *pMessageObserver) : CLMessageLoopManager(pMessageObserver)$/;"	f	class:TestClassForCLMessageLoopManager
TestClassForCLMessageLoopManager	test/CLMessageLoopManagerTester.cpp	/^class TestClassForCLMessageLoopManager : public CLMessageLoopManager$/;"	c	file:
TestForAllocate	test/CLSharedObjectAllocatorTester.cpp	/^static void TestForAllocate(const char* name)$/;"	f	file:
TestForCLConditionVariable	test/CLConditionVariableTester.cpp	/^struct TestForCLConditionVariable$/;"	s	file:
TestForCLCriticalSection	test/CLCriticalSectionTester.cpp	/^struct TestForCLCriticalSection$/;"	s	file:
TestForCLEvent	test/CLEventTester.cpp	/^struct TestForCLEvent$/;"	s	file:
TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^	TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg() : CLMessage(1)$/;"	f	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg
TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^class TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg : public CLMessage$/;"	c	file:
TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test_for_exe_forgzh/test_for_processProvider/CLProcessTestProvider.cpp	/^	TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg() : CLMessage(1)$/;"	f	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg
TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test_for_exe_forgzh/test_for_processProvider/CLProcessTestProvider.cpp	/^class TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg : public CLMessage$/;"	c	file:
TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test_for_exec/test_for_CLExecutiveCommunicationByNamedPipe/test.cpp	/^	TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg() : CLMessage(1)$/;"	f	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg
TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test_for_exec/test_for_CLExecutiveCommunicationByNamedPipe/test.cpp	/^class TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg : public CLMessage$/;"	c	file:
TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test_for_exec/test_for_CLNonThreadForMsgLoop_Stress_Testing/test.cpp	/^	TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg() : CLMessage(1)$/;"	f	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg
TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test_for_exec/test_for_CLNonThreadForMsgLoop_Stress_Testing/test.cpp	/^class TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg : public CLMessage$/;"	c	file:
TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^class TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer : public CLMessageSerializer$/;"	c	file:
TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer	test_for_exe_forgzh/test_for_processProvider/CLProcessTestProvider.cpp	/^class TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer : public CLMessageSerializer$/;"	c	file:
TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer	test_for_exec/test_for_CLExecutiveCommunicationByNamedPipe/test.cpp	/^class TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer : public CLMessageSerializer$/;"	c	file:
TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer	test_for_exec/test_for_CLNonThreadForMsgLoop_Stress_Testing/test.cpp	/^class TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer : public CLMessageSerializer$/;"	c	file:
TestMsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg	test/CLMessageQueueByNamedPipeTester.cpp	/^	TestMsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg() : CLMessage(1)$/;"	f	class:TestMsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg
TestMsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg	test/CLMessageQueueByNamedPipeTester.cpp	/^class TestMsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg : public CLMessage$/;"	c	file:
TestMsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsgDeserializer	test/CLMessageQueueByNamedPipeTester.cpp	/^class TestMsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsgDeserializer : public CLMessageDeserializer$/;"	c	file:
TestObserverForCLMessageLoopManager	test/CLMessageLoopManagerTester.cpp	/^	TestObserverForCLMessageLoopManager()$/;"	f	class:TestObserverForCLMessageLoopManager
TestObserverForCLMessageLoopManager	test/CLMessageLoopManagerTester.cpp	/^class TestObserverForCLMessageLoopManager : public CLMessageObserver$/;"	c	file:
TestStructForCLMutex	test/CLMutexTester.cpp	/^struct TestStructForCLMutex$/;"	s	file:
TestThreadForCLConditionVariable	test/CLConditionVariableTester.cpp	/^void* TestThreadForCLConditionVariable(void *arg)$/;"	f
TestThreadForCLConditionVariable2	test/CLConditionVariableTester.cpp	/^void* TestThreadForCLConditionVariable2(void *arg)$/;"	f
TestThreadForCLCriticalSection	test/CLCriticalSectionTester.cpp	/^static void* TestThreadForCLCriticalSection(void *arg)$/;"	f	file:
TestThreadForCLEvent	test/CLEventTester.cpp	/^static void* TestThreadForCLEvent(void *arg)$/;"	f	file:
TestThreadForCLEvent2	test/CLEventTester.cpp	/^static void* TestThreadForCLEvent2(void *arg)$/;"	f	file:
TestThreadForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^class TestThreadForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg : public CLExecutiveFunctionProvider$/;"	c	file:
TestThreadForCLLibExecutiveInitializerDestroy	test/ZTester.cpp	/^void* TestThreadForCLLibExecutiveInitializerDestroy(void *arg)$/;"	f
TestThreadForCLLibExecutiveInitializerDestroy	test_for_me/ATester.cpp	/^void* TestThreadForCLLibExecutiveInitializerDestroy(void *arg)$/;"	f
TestThreadForCLLibExecutiveInitializerSingleton	test/ATester.cpp	/^void* TestThreadForCLLibExecutiveInitializerSingleton(void *arg)$/;"	f
TestThreadForCLLibExecutiveInitializerSingleton	test_for_me/ZTester.cpp	/^void* TestThreadForCLLibExecutiveInitializerSingleton(void *arg)$/;"	f
TestThreadForCLLogger	test/CLLoggerTester.cpp	/^static void* TestThreadForCLLogger(void *arg)$/;"	f	file:
TestThreadForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg	test/CLMessageQueueByNamedPipeTester.cpp	/^class TestThreadForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg : public CLExecutiveFunctionProvider$/;"	c	file:
TestThreadForCLMutex_MultiThread	test/CLMutexTester.cpp	/^static void* TestThreadForCLMutex_MultiThread(void *arg)$/;"	f	file:
UDP_SOCKET	include/definition.h	/^const int UDP_SOCKET = 2;$/;"	v
UNINITIALIZED_SHARED_OBJECT	include/CLSharedObjectsImpl.h	11;"	d
UnInitialize	src/CLDataPosterChannelByNamedPipeMaintainer.cpp	/^CLStatus CLDataPosterChannelByNamedPipeMaintainer::UnInitialize(void *pContext)$/;"	f	class:CLDataPosterChannelByNamedPipeMaintainer
UnInitialize	src/CLDataPosterChannelBySTLQueueMaintainer.cpp	/^CLStatus CLDataPosterChannelBySTLQueueMaintainer::UnInitialize(void *pContext)$/;"	f	class:CLDataPosterChannelBySTLQueueMaintainer
UnInitialize	src/CLMessagePoster.cpp	/^CLStatus CLMessagePoster::UnInitialize(void *pContext)$/;"	f	class:CLMessagePoster
UnRegisterDeserializer	src/CLMultiMsgDeserializer.cpp	/^CLStatus CLMultiMsgDeserializer::UnRegisterDeserializer(unsigned long lMsgID)$/;"	f	class:CLMultiMsgDeserializer
UnRegisterMsgQueue	src/CLMsgLoopManagerForIOMultiplex.cpp	/^CLStatus CLMsgLoopManagerForIOMultiplex::UnRegisterMsgQueue(string strQueueName)$/;"	f	class:CLMsgLoopManagerForIOMultiplex
UnRegisterMsgReceiver	src/CLMsgLoopManagerForEpoll.cpp	/^CLStatus CLMsgLoopManagerForEpoll::UnRegisterMsgReceiver(int fd)$/;"	f	class:CLMsgLoopManagerForEpoll
UnRegisterRWEvents	src/CLEpollEvent.cpp	/^CLStatus CLEpollEvent::UnRegisterRWEvents()$/;"	f	class:CLEpollEvent
UnRegisterSerializer	src/CLMultiMsgSerializer.cpp	/^CLStatus CLMultiMsgSerializer::UnRegisterSerializer(unsigned long lMsgID)$/;"	f	class:CLMultiMsgSerializer
Uninitialize	src/CLMsgLoopManagerForEpoll.cpp	/^CLStatus CLMsgLoopManagerForEpoll::Uninitialize()$/;"	f	class:CLMsgLoopManagerForEpoll
Uninitialize	src/CLMsgLoopManagerForIOMultiplex.cpp	/^CLStatus CLMsgLoopManagerForIOMultiplex::Uninitialize()$/;"	f	class:CLMsgLoopManagerForIOMultiplex
Uninitialize	src/CLMsgLoopManagerForPipeQueue.cpp	/^CLStatus CLMsgLoopManagerForPipeQueue::Uninitialize()$/;"	f	class:CLMsgLoopManagerForPipeQueue
Uninitialize	src/CLMsgLoopManagerForSTLqueue.cpp	/^CLStatus CLMsgLoopManagerForSTLqueue::Uninitialize()$/;"	f	class:CLMsgLoopManagerForSTLqueue
Uninitialize	src/CLMutexByPThread.cpp	/^CLStatus CLMutexByPThread::Uninitialize()$/;"	f	class:CLMutexByPThread
Uninitialize	src/CLMutexByRecordLocking.cpp	/^CLStatus CLMutexByRecordLocking::Uninitialize()$/;"	f	class:CLMutexByRecordLocking
Uninitialize	src/CLMutexByRecordLockingAndPThread.cpp	/^CLStatus CLMutexByRecordLockingAndPThread::Uninitialize()$/;"	f	class:CLMutexByRecordLockingAndPThread
Uninitialize	src/CLMutexBySharedPThread.cpp	/^CLStatus CLMutexBySharedPThread::Uninitialize()$/;"	f	class:CLMutexBySharedPThread
Uninitialize	test/CLExecutiveFunctionForMsgLoopTester.cpp	/^	virtual CLStatus Uninitialize()$/;"	f	class:CLMyMsgLoopManagerForExecutiveFunctionTest
Uninitialize	test/CLMessageLoopManagerTester.cpp	/^	virtual CLStatus Uninitialize()$/;"	f	class:TestClassForCLMessageLoopManager
Unlock	src/CLMutex.cpp	/^CLStatus CLMutex::Unlock()$/;"	f	class:CLMutex
Unlock	src/CLMutexByPThread.cpp	/^CLStatus CLMutexByPThread::Unlock()$/;"	f	class:CLMutexByPThread
Unlock	src/CLMutexByRecordLocking.cpp	/^CLStatus CLMutexByRecordLocking::Unlock()$/;"	f	class:CLMutexByRecordLocking
Unlock	src/CLMutexByRecordLockingAndPThread.cpp	/^CLStatus CLMutexByRecordLockingAndPThread::Unlock()$/;"	f	class:CLMutexByRecordLockingAndPThread
Unlock	src/CLMutexBySharedPThread.cpp	/^CLStatus CLMutexBySharedPThread::Unlock()$/;"	f	class:CLMutexBySharedPThread
UsedBufferLen	src/CLBuffer.cpp	/^const int& CLBuffer::UsedBufferLen() const$/;"	f	class:CLBuffer
ValidatePool	test/CLSharedObjectAllocatorTester.cpp	/^static void ValidatePool(const char* SharedName)$/;"	f	file:
Wait	src/CLConditionVariable.cpp	/^CLStatus CLConditionVariable::Wait(CLMutex *pMutex)$/;"	f	class:CLConditionVariable
Wait	src/CLEvent.cpp	/^CLStatus CLEvent::Wait()$/;"	f	class:CLEvent
WaitForDeath	src/CLProcess.cpp	/^CLStatus CLProcess::WaitForDeath()$/;"	f	class:CLProcess
WaitForDeath	src/CLThread.cpp	/^CLStatus CLThread::WaitForDeath()$/;"	f	class:CLThread
WaitForMessage	src/CLMsgLoopManagerForEpoll.cpp	/^CLStatus CLMsgLoopManagerForEpoll::WaitForMessage()$/;"	f	class:CLMsgLoopManagerForEpoll
WaitForMessage	src/CLMsgLoopManagerForIOMultiplex.cpp	/^CLMessage* CLMsgLoopManagerForIOMultiplex::WaitForMessage()$/;"	f	class:CLMsgLoopManagerForIOMultiplex
WaitForMessage	src/CLMsgLoopManagerForPipeQueue.cpp	/^CLStatus CLMsgLoopManagerForPipeQueue::WaitForMessage()$/;"	f	class:CLMsgLoopManagerForPipeQueue
WaitForMessage	src/CLMsgLoopManagerForSTLqueue.cpp	/^CLStatus CLMsgLoopManagerForSTLqueue::WaitForMessage()$/;"	f	class:CLMsgLoopManagerForSTLqueue
WaitForMessage	test/CLExecutiveFunctionForMsgLoopTester.cpp	/^	virtual CLMessage* WaitForMessage()$/;"	f	class:CLMyMsgLoopManagerForExecutiveFunctionTest
WaitForMessage	test/CLMessageLoopManagerTester.cpp	/^	virtual CLMessage* WaitForMessage()$/;"	f	class:TestClassForCLMessageLoopManager
Wakeup	src/CLConditionVariable.cpp	/^CLStatus CLConditionVariable::Wakeup()$/;"	f	class:CLConditionVariable
WakeupAll	src/CLConditionVariable.cpp	/^CLStatus CLConditionVariable::WakeupAll()$/;"	f	class:CLConditionVariable
Write	src/CLBaseSocket.cpp	/^CLStatus CLBaseSocket::Write(CLIOVector& IOVec, CLSocketAddress *pAddr)$/;"	f	class:CLBaseSocket
Write	src/CLNamedPipe.cpp	/^CLStatus CLNamedPipe::Write(char *pBuf, int length)$/;"	f	class:CLNamedPipe
Write	src/CLSocket.cpp	/^CLStatus CLSocket::Write(CLIOVector& IOVec, CLSocketAddress* pAddr)$/;"	f	class:CLSocket
WriteData	src/CLBuffer.cpp	/^CLStatus CLBuffer::WriteData(char* pBuffer, const int& len)$/;"	f	class:CLBuffer
WriteData	src/CLIOVector.cpp	/^CLStatus CLIOVector::WriteData(char* pBuffer, const int& index, const int& len)$/;"	f	class:CLIOVector
WriteLog	src/CLLogger.cpp	/^CLStatus CLLogger::WriteLog(const char *pstrMsg, long lErrorCode)$/;"	f	class:CLLogger
WriteLogMsg	src/CLLogger.cpp	/^CLStatus CLLogger::WriteLogMsg(const char *pstrMsg, long lErrorCode)$/;"	f	class:CLLogger
WriteMsgAndErrcodeToFile	src/CLLogger.cpp	/^CLStatus CLLogger::WriteMsgAndErrcodeToFile(int fd, const char *pstrMsg, const char *pstrErrcode)$/;"	f	class:CLLogger
WriteVecs	src/CLNamedPipe.cpp	/^CLStatus CLNamedPipe::WriteVecs(CLIOVector& dataVec)$/;"	f	class:CLNamedPipe
_proto_data	include/CLProtocolDataPoster.h	/^typedef struct _proto_data$/;"	s
bFlag1ForCLThread	test/CLThreadTester.cpp	/^static bool bFlag1ForCLThread = false;$/;"	v	file:
bFlag2ForCLThread	test/CLThreadTester.cpp	/^static bool bFlag2ForCLThread = false;$/;"	v	file:
bSemaphore	include/CLSharedEventImpl.h	/^	long bSemaphore;$/;"	m	struct:SLEventInfo
btestformlmfeft	test/CLExecutiveFunctionForMsgLoopTester.cpp	/^static bool btestformlmfeft = false;$/;"	v	file:
btestformlmfeft2	test/CLExecutiveFunctionForMsgLoopTester.cpp	/^static bool btestformlmfeft2 = false;$/;"	v	file:
btestformlmfeft3	test/CLExecutiveFunctionForMsgLoopTester.cpp	/^static bool btestformlmfeft3 = false;$/;"	v	file:
compilation_database_folder	.ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v
cond	include/CLSharedConditionVariableImpl.h	/^	pthread_cond_t cond;$/;"	m	struct:SLSharedConditionVariableItem
cond	test/CLConditionVariableTester.cpp	/^	CLConditionVariable cond;$/;"	m	struct:TestForCLConditionVariable	file:
count	test/CLCriticalSectionTester.cpp	/^static const int count = 1000000;$/;"	v	file:
count	test/CLEventTester.cpp	/^static const int count = 1000000;$/;"	v	file:
count	test/CLMutexTester.cpp	/^static const int count = 1000000;$/;"	v	file:
count	test/CLNonThreadForMsgLoopTester.cpp	/^static const int count = 1000000;$/;"	v	file:
count	test/CLSharedObjectAllocatorTester.cpp	/^const int count = 1000000;$/;"	v
database	.ycm_extra_conf.py	/^  database = None$/;"	v
database	.ycm_extra_conf.py	/^  database = ycm_core.CompilationDatabase( compilation_database_folder )$/;"	v
event	test/CLEventTester.cpp	/^	CLEvent event;$/;"	m	struct:TestForCLEvent	file:
eventfornew	test/CLEventTester.cpp	/^	CLEvent eventfornew;$/;"	m	struct:TestForCLEvent	file:
f1	test/CLStatusTester.cpp	/^static CLStatus f1()$/;"	f	file:
f2	test/CLStatusTester.cpp	/^static CLStatus f2()$/;"	f	file:
flag	test/CLConditionVariableTester.cpp	/^	volatile int flag;$/;"	m	struct:TestForCLConditionVariable	file:
flags	.ycm_extra_conf.py	/^flags = [$/;"	v
g1	test/CLMsgLoopManagerForSTLQueueTester.cpp	/^static bool g1 = false;$/;"	v	file:
g1	test_for_exe_forgzh/test_for_QueuLoop/CLSTLQueueLoopTest.cpp	/^static bool g1 = false;$/;"	v	file:
g1	test_for_me/CLMsgLoopManagerForSTLQueueTester.cpp	/^static bool g1 = false;$/;"	v	file:
g2	test/CLMsgLoopManagerForSTLQueueTester.cpp	/^static bool g2 = false;$/;"	v	file:
g2	test_for_exe_forgzh/test_for_QueuLoop/CLSTLQueueLoopTest.cpp	/^static bool g2 = false;$/;"	v	file:
g2	test_for_me/CLMsgLoopManagerForSTLQueueTester.cpp	/^static bool g2 = false;$/;"	v	file:
g3	test/CLMsgLoopManagerForSTLQueueTester.cpp	/^static bool g3 = false;$/;"	v	file:
g3	test_for_exe_forgzh/test_for_QueuLoop/CLSTLQueueLoopTest.cpp	/^static bool g3 = false;$/;"	v	file:
g3	test_for_me/CLMsgLoopManagerForSTLQueueTester.cpp	/^static bool g3 = false;$/;"	v	file:
g_bfornameserver	test/CLExecutiveNameServerTester.cpp	/^static int g_bfornameserver = 0;$/;"	v	file:
g_bforpst	test/CLExecutiveNameServerTester.cpp	/^static int g_bforpst = 0;$/;"	v	file:
g_bforpstmsgfornameserver	test/CLExecutiveNameServerTester.cpp	/^static int g_bforpstmsgfornameserver = 0;$/;"	v	file:
g_cond	test/CLConditionVariableTester.cpp	/^static pthread_cond_t g_cond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
g_flag_for_cond	test/CLConditionVariableTester.cpp	/^static volatile int g_flag_for_cond = 0;$/;"	v	file:
g_for_msg1	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^static int g_for_msg1 = 0;$/;"	v	file:
g_for_msg1	test/CLNonThreadForMsgLoopTester.cpp	/^static int g_for_msg1 = 0;$/;"	v	file:
g_for_msg1	test/CLThreadForMsgLoopTester.cpp	/^static int g_for_msg1 = 0;$/;"	v	file:
g_for_msg1	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^static int g_for_msg1 = 0;$/;"	v	file:
g_for_msg1	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^static int g_for_msg1 = 0;$/;"	v	file:
g_for_msg1	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^static int g_for_msg1 = 0;$/;"	v	file:
g_for_msg1	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^static int g_for_msg1 = 0;$/;"	v	file:
g_for_msg1	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^static int g_for_msg1 = 0;$/;"	v	file:
g_for_msg1_dese	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^static int g_for_msg1_dese = 0;$/;"	v	file:
g_for_msg1_dese	test/CLNonThreadForMsgLoopTester.cpp	/^static int g_for_msg1_dese = 0;$/;"	v	file:
g_for_msg1_dese	test/CLThreadForMsgLoopTester.cpp	/^static int g_for_msg1_dese = 0;$/;"	v	file:
g_for_msg1_dese	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^static int g_for_msg1_dese = 0;$/;"	v	file:
g_for_msg1_dese	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^static int g_for_msg1_dese = 0;$/;"	v	file:
g_for_msg1_dese	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^static int g_for_msg1_dese = 0;$/;"	v	file:
g_for_msg1_dese	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^static int g_for_msg1_dese = 0;$/;"	v	file:
g_for_msg1_dese	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^static int g_for_msg1_dese = 0;$/;"	v	file:
g_for_msg1_se	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^static int g_for_msg1_se = 0;$/;"	v	file:
g_for_msg1_se	test/CLNonThreadForMsgLoopTester.cpp	/^static int g_for_msg1_se = 0;$/;"	v	file:
g_for_msg1_se	test/CLThreadForMsgLoopTester.cpp	/^static int g_for_msg1_se = 0;$/;"	v	file:
g_for_msg1_se	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^static int g_for_msg1_se = 0;$/;"	v	file:
g_for_msg1_se	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^static int g_for_msg1_se = 0;$/;"	v	file:
g_for_msg1_se	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^static int g_for_msg1_se = 0;$/;"	v	file:
g_for_msg1_se	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^static int g_for_msg1_se = 0;$/;"	v	file:
g_for_msg1_se	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^static int g_for_msg1_se = 0;$/;"	v	file:
g_for_msg2	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^static int g_for_msg2 = 0;$/;"	v	file:
g_for_msg2	test/CLNonThreadForMsgLoopTester.cpp	/^static int g_for_msg2 = 0;$/;"	v	file:
g_for_msg2	test/CLThreadForMsgLoopTester.cpp	/^static int g_for_msg2 = 0;$/;"	v	file:
g_for_msg2	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^static int g_for_msg2 = 0;$/;"	v	file:
g_for_msg2	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^static int g_for_msg2 = 0;$/;"	v	file:
g_for_msg2	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^static int g_for_msg2 = 0;$/;"	v	file:
g_for_msg2	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^static int g_for_msg2 = 0;$/;"	v	file:
g_for_msg2	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^static int g_for_msg2 = 0;$/;"	v	file:
g_for_msg2_dese	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^static int g_for_msg2_dese = 0;$/;"	v	file:
g_for_msg2_dese	test/CLNonThreadForMsgLoopTester.cpp	/^static int g_for_msg2_dese = 0;$/;"	v	file:
g_for_msg2_dese	test/CLThreadForMsgLoopTester.cpp	/^static int g_for_msg2_dese = 0;$/;"	v	file:
g_for_msg2_dese	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^static int g_for_msg2_dese = 0;$/;"	v	file:
g_for_msg2_dese	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^static int g_for_msg2_dese = 0;$/;"	v	file:
g_for_msg2_dese	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^static int g_for_msg2_dese = 0;$/;"	v	file:
g_for_msg2_dese	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^static int g_for_msg2_dese = 0;$/;"	v	file:
g_for_msg2_dese	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^static int g_for_msg2_dese = 0;$/;"	v	file:
g_for_msg2_se	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^static int g_for_msg2_se = 0;$/;"	v	file:
g_for_msg2_se	test/CLNonThreadForMsgLoopTester.cpp	/^static int g_for_msg2_se = 0;$/;"	v	file:
g_for_msg2_se	test/CLThreadForMsgLoopTester.cpp	/^static int g_for_msg2_se = 0;$/;"	v	file:
g_for_msg2_se	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^static int g_for_msg2_se = 0;$/;"	v	file:
g_for_msg2_se	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^static int g_for_msg2_se = 0;$/;"	v	file:
g_for_msg2_se	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^static int g_for_msg2_se = 0;$/;"	v	file:
g_for_msg2_se	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^static int g_for_msg2_se = 0;$/;"	v	file:
g_for_msg2_se	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^static int g_for_msg2_se = 0;$/;"	v	file:
g_for_on1	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^static int g_for_on1 = 0;$/;"	v	file:
g_for_on1	test/CLNonThreadForMsgLoopTester.cpp	/^static int g_for_on1 = 0;$/;"	v	file:
g_for_on1	test/CLThreadForMsgLoopTester.cpp	/^static int g_for_on1 = 0;$/;"	v	file:
g_for_on1	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^static int g_for_on1 = 0;$/;"	v	file:
g_for_on1	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^static int g_for_on1 = 0;$/;"	v	file:
g_for_on1	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^static int g_for_on1 = 0;$/;"	v	file:
g_for_on1	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^static int g_for_on1 = 0;$/;"	v	file:
g_for_on1	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^static int g_for_on1 = 0;$/;"	v	file:
g_for_on2	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^static int g_for_on2 = 0;$/;"	v	file:
g_for_on2	test/CLNonThreadForMsgLoopTester.cpp	/^static int g_for_on2 = 0;$/;"	v	file:
g_for_on2	test/CLThreadForMsgLoopTester.cpp	/^static int g_for_on2 = 0;$/;"	v	file:
g_for_on2	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^static int g_for_on2 = 0;$/;"	v	file:
g_for_on2	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^static int g_for_on2 = 0;$/;"	v	file:
g_for_on2	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^static int g_for_on2 = 0;$/;"	v	file:
g_for_on2	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^static int g_for_on2 = 0;$/;"	v	file:
g_for_on2	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^static int g_for_on2 = 0;$/;"	v	file:
g_i_for_cond	test/CLConditionVariableTester.cpp	/^static int g_i_for_cond = 0;$/;"	v	file:
g_mutex_for_cond	test/CLConditionVariableTester.cpp	/^static CLMutex g_mutex_for_cond;$/;"	v	file:
gdes1	test/CLMessageQueueByNamedPipeTester.cpp	/^static bool gdes1 = false;$/;"	v	file:
gdes2	test/CLMessageQueueByNamedPipeTester.cpp	/^static bool gdes2 = false;$/;"	v	file:
gfordes	test/CLMessageLoopManagerTester.cpp	/^static bool gfordes = false;$/;"	v	file:
gfordes2	test/CLMessageLoopManagerTester.cpp	/^static bool gfordes2 = false;$/;"	v	file:
gforinit	test/CLMessageLoopManagerTester.cpp	/^static bool gforinit = false;$/;"	v	file:
gformsg	test/CLMessageLoopManagerTester.cpp	/^static bool gformsg = false;$/;"	v	file:
gformsgdes	test/CLMessageLoopManagerTester.cpp	/^static int gformsgdes = 0;$/;"	v	file:
gforuninit	test/CLMessageLoopManagerTester.cpp	/^static bool gforuninit = false;$/;"	v	file:
gmsgdes	test/CLMessageQueueBySTLqueueTester.cpp	/^static int gmsgdes = 0;$/;"	v	file:
gtest2des	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^static int gtest2des = 0;$/;"	v	file:
gtest2serial	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^static bool gtest2serial = false;$/;"	v	file:
gtestdes	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^static int gtestdes = 0;$/;"	v	file:
gtestserial	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^static bool gtestserial = false;$/;"	v	file:
head	include/CLSharedConditionVariableImpl.h	/^	SLSharedObjectHead head;$/;"	m	struct:SLSharedConditionVariableItem
head	include/CLSharedEventImpl.h	/^	SLSharedObjectHead head;$/;"	m	struct:SLSharedEventItem
head	include/CLSharedMutexImpl.h	/^	SLSharedObjectHead head;$/;"	m	struct:SLSharedMutexItem
i	test/CLConditionVariableTester.cpp	/^	int i;$/;"	m	struct:TestForCLConditionVariable	file:
i	test/CLCriticalSectionTester.cpp	/^	int i;$/;"	m	struct:TestForCLCriticalSection	file:
i	test/CLEventTester.cpp	/^	int i;$/;"	m	struct:TestForCLEvent	file:
i	test/CLMessageQueueBySTLqueueTester.cpp	/^	int i;$/;"	m	class:CLMessage1ForCLMessageQueueBySTLqueue	file:
i	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	int i;$/;"	m	class:CLMsg1ForCLMsgLoopManagerForPipeQueue	file:
i	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	long i;$/;"	m	class:CLMsg2ForCLMsgLoopManagerForPipeQueue	file:
i	test/CLMutexTester.cpp	/^	int i;$/;"	m	struct:TestStructForCLMutex	file:
i	test/CLNonThreadForMsgLoopTester.cpp	/^	int i;$/;"	m	class:CLMsg1ForCLNonThreadForMsgLoop	file:
i	test/CLNonThreadForMsgLoopTester.cpp	/^	long i;$/;"	m	class:CLMsg2ForCLNonThreadForMsgLoop	file:
i	test/CLThreadForMsgLoopTester.cpp	/^	int i;$/;"	m	class:CLMsg1ForCLThreadForMsgLoop	file:
i	test/CLThreadForMsgLoopTester.cpp	/^	long i;$/;"	m	class:CLMsg2ForCLThreadForMsgLoop	file:
i	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	int i;$/;"	m	class:CLMsg1ForCLMsgLoopManagerForPipeQueue	file:
i	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	long i;$/;"	m	class:CLMsg2ForCLMsgLoopManagerForPipeQueue	file:
i	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	int i;$/;"	m	class:CLMsg1ForCLMsgLoopManagerForPipeQueue	file:
i	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	long i;$/;"	m	class:CLMsg2ForCLMsgLoopManagerForPipeQueue	file:
i	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	int i;$/;"	m	class:CLMsg1ForCLMsgLoopManagerForPipeQueue	file:
i	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	long i;$/;"	m	class:CLMsg2ForCLMsgLoopManagerForPipeQueue	file:
i	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	int i;$/;"	m	class:CLMsg1ForCLMsgLoopManagerForPipeQueue	file:
i	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	long i;$/;"	m	class:CLMsg2ForCLMsgLoopManagerForPipeQueue	file:
i	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	int i;$/;"	m	class:CLMsg1ForCLMsgLoopManagerForPipeQueue	file:
i	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	long i;$/;"	m	class:CLMsg2ForCLMsgLoopManagerForPipeQueue	file:
j	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	int j;$/;"	m	class:CLMsg1ForCLMsgLoopManagerForPipeQueue	file:
j	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	int j;$/;"	m	class:CLMsg2ForCLMsgLoopManagerForPipeQueue	file:
j	test/CLNonThreadForMsgLoopTester.cpp	/^	int j;$/;"	m	class:CLMsg1ForCLNonThreadForMsgLoop	file:
j	test/CLNonThreadForMsgLoopTester.cpp	/^	int j;$/;"	m	class:CLMsg2ForCLNonThreadForMsgLoop	file:
j	test/CLThreadForMsgLoopTester.cpp	/^	int j;$/;"	m	class:CLMsg1ForCLThreadForMsgLoop	file:
j	test/CLThreadForMsgLoopTester.cpp	/^	int j;$/;"	m	class:CLMsg2ForCLThreadForMsgLoop	file:
j	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	int j;$/;"	m	class:CLMsg1ForCLMsgLoopManagerForPipeQueue	file:
j	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	int j;$/;"	m	class:CLMsg2ForCLMsgLoopManagerForPipeQueue	file:
j	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	int j;$/;"	m	class:CLMsg1ForCLMsgLoopManagerForPipeQueue	file:
j	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	int j;$/;"	m	class:CLMsg2ForCLMsgLoopManagerForPipeQueue	file:
j	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	int j;$/;"	m	class:CLMsg1ForCLMsgLoopManagerForPipeQueue	file:
j	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	int j;$/;"	m	class:CLMsg2ForCLMsgLoopManagerForPipeQueue	file:
j	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	int j;$/;"	m	class:CLMsg1ForCLMsgLoopManagerForPipeQueue	file:
j	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	int j;$/;"	m	class:CLMsg2ForCLMsgLoopManagerForPipeQueue	file:
j	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	int j;$/;"	m	class:CLMsg1ForCLMsgLoopManagerForPipeQueue	file:
j	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	int j;$/;"	m	class:CLMsg2ForCLMsgLoopManagerForPipeQueue	file:
m_Cond	include/CLEvent.h	/^	CLConditionVariable m_Cond;$/;"	m	class:CLEvent
m_DeserializerTable	include/CLMultiMsgDeserializer.h	/^	map<unsigned long, CLMessageDeserializer*> m_DeserializerTable;$/;"	m	class:CLMultiMsgDeserializer
m_DeserializerTable	include/CLSharedMsgReceiverByNamedPipe.h	/^	map<unsigned long, CLMessageDeserializer*> m_DeserializerTable;$/;"	m	class:CLSharedMsgReceiverByNamedPipe
m_EpollEventMap	include/CLMsgLoopManagerForEpoll.h	/^	map<int, CLEpollEvent*> m_EpollEventMap;$/;"	m	class:CLMsgLoopManagerForEpoll
m_Event	include/CLEpollEvent.h	/^	unsigned int m_Event;$/;"	m	class:CLEpollEvent
m_Event	include/CLExecutiveCommunicationByNamedPipe.h	/^	CLEvent m_Event;$/;"	m	class:CLExecutiveCommunicationByNamedPipe
m_EventForWaitingForNewThread	include/CLThread.h	/^	CLEvent m_EventForWaitingForNewThread;$/;"	m	class:CLThread
m_EventForWaitingForOldThread	include/CLThread.h	/^	CLEvent m_EventForWaitingForOldThread;$/;"	m	class:CLThread
m_Fd	include/CLDataReceiverByTimerFd.h	/^	int m_Fd;$/;"	m	class:CLDataReceiverByTimerFd
m_Fd	include/CLEpollEvent.h	/^	int m_Fd;$/;"	m	class:CLEpollEvent
m_Fd	include/CLExecutiveCommunicationByNamedPipe.h	/^	int m_Fd;$/;"	m	class:CLExecutiveCommunicationByNamedPipe
m_Fd	include/CLLogger.h	/^	int m_Fd;$/;"	m	class:CLLogger
m_Fd	include/CLMutexByRecordLocking.h	/^	int m_Fd;$/;"	m	class:CLMutexByRecordLocking
m_Fd	include/CLNamedPipe.h	/^	int m_Fd;$/;"	m	class:CLNamedPipe
m_Fd	include/CLTimerFd.h	/^	int m_Fd;$/;"	m	class:CLTimerFd
m_ID	include/CLTimerFd.h	/^	int m_ID;$/;"	m	class:CLTimerFd
m_MessageQueue	include/CLMessageLoopManager.h	/^	std::queue<CLMessage*> m_MessageQueue;$/;"	m	class:CLMessageLoopManager
m_MessageQueue	include/CLMessageReceiverByNamedPipe.h	/^	std::queue<CLMessage*> m_MessageQueue;$/;"	m	class:CLMessageReceiverByNamedPipe
m_MsgBufVecList	include/CLProtocolDataPoster.h	/^	std::list<SLDataAndNotifier *> m_MsgBufVecList;$/;"	m	class:CLProtocolDataPoster
m_MsgMappingTable	include/CLMessageLoopManager.h	/^	std::map<unsigned long, CallBackForMessageLoop> m_MsgMappingTable;$/;"	m	class:CLMessageLoopManager
m_MsgQueue	include/CLSTLQueue.h	/^	queue<CLMessage*> m_MsgQueue; $/;"	m	class:CLSTLQueue
m_MsgQueueTable	include/CLMsgLoopManagerForIOMultiplex.h	/^	map<string, CLMessageQueue*> m_MsgQueueTable;$/;"	m	class:CLMsgLoopManagerForIOMultiplex
m_MsgReceiverMap	include/CLMsgLoopManagerForEpoll.h	/^	map<int, CLMessageReceiver*> m_MsgReceiverMap;\/\/!!!!$/;"	m	class:CLMsgLoopManagerForEpoll
m_Mutex	include/CLEvent.h	/^	CLMutex m_Mutex;$/;"	m	class:CLEvent
m_Mutex	include/CLExecutiveNameServer.h	/^	static pthread_mutex_t m_Mutex;$/;"	m	class:CLExecutiveNameServer
m_Mutex	include/CLLogger.h	/^	static pthread_mutex_t m_Mutex;$/;"	m	class:CLLogger
m_Mutex	include/CLSharedMemory.h	/^	CLMutex m_Mutex;$/;"	m	class:CLSharedMemory
m_Mutex	src/CLExecutiveNameServer.cpp	/^pthread_mutex_t CLExecutiveNameServer::m_Mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	m	class:CLExecutiveNameServer	file:
m_Mutex	src/CLLogger.cpp	/^pthread_mutex_t CLLogger::m_Mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	m	class:CLLogger	file:
m_MutexForInitializer	include/CLLibExecutiveInitializer.h	/^	static pthread_mutex_t m_MutexForInitializer;$/;"	m	class:CLLibExecutiveInitializer
m_MutexForInitializer	src/CLLibExecutiveInitializer.cpp	/^pthread_mutex_t CLLibExecutiveInitializer::m_MutexForInitializer = PTHREAD_MUTEX_INITIALIZER;$/;"	m	class:CLLibExecutiveInitializer	file:
m_MutexForQueue	include/CLSTLQueue.h	/^    CLMutex m_MutexForQueue;$/;"	m	class:CLSTLQueue
m_MutexForSharedMutex	include/CLSharedObjectAllocator.h	/^	static pthread_mutex_t m_MutexForSharedMutex;$/;"	m	class:CLSharedObjectAllocator
m_MutexForSharedMutex	include/CLSharedObjectAllocator.h	/^pthread_mutex_t CLSharedObjectAllocator<TSharedObjectPool, TSharedObject>::m_MutexForSharedMutex = PTHREAD_MUTEX_INITIALIZER;$/;"	m	class:CLSharedObjectAllocator
m_NameTable	include/CLExecutiveNameServer.h	/^	std::map<std::string, SLMessagePosterPtrCount*> m_NameTable;$/;"	m	class:CLExecutiveNameServer
m_NamedPipe	include/CLDataReceiverByNamedPipe.h	/^	CLNamedPipe m_NamedPipe;$/;"	m	class:CLDataReceiverByNamedPipe
m_ProcessID	include/CLProcess.h	/^	pid_t m_ProcessID;$/;"	m	class:CLProcess
m_ProcessMutex	include/CLMutexByRecordLockingAndPThread.h	/^	CLMutex m_ProcessMutex;$/;"	m	class:CLMutexByRecordLockingAndPThread
m_SerializerTable	include/CLMultiMsgSerializer.h	/^	std::map<unsigned long, CLMessageSerializer*> m_SerializerTable;		$/;"	m	class:CLMultiMsgSerializer
m_SerializerTable	include/CLSharedExecutiveCommunicationByNamedPipe.h	/^	map<unsigned long, CLMessageSerializer*> m_SerializerTable;$/;"	m	class:CLSharedExecutiveCommunicationByNamedPipe
m_SharedMemoryID	include/CLSharedMemory.h	/^	int m_SharedMemoryID;$/;"	m	class:CLSharedMemory
m_SocketFd	include/CLBaseSocket.h	/^	int m_SocketFd;$/;"	m	class:CLBaseSocket
m_ThreadID	include/CLThread.h	/^	pthread_t m_ThreadID; $/;"	m	class:CLThread
m_ThreadMutex	include/CLMutexByRecordLockingAndPThread.h	/^	CLMutex m_ThreadMutex;$/;"	m	class:CLMutexByRecordLockingAndPThread
m_addr	include/CLSocketAddress.h	/^	struct sockaddr  m_addr;$/;"	m	class:CLSocketAddress	typeref:struct:CLSocketAddress::sockaddr
m_bBlock	include/CLBaseSocket.h	/^	bool m_bBlock;$/;"	m	class:CLBaseSocket
m_bDataDelFlag	include/CLDataPostResultNotifier.h	/^	bool m_bDataDelFlag;$/;"	m	class:CLDataPostResultNotifier
m_bDataLeftFlag	include/CLProtocolDataPoster.h	/^	bool m_bDataLeftFlag;$/;"	m	class:CLProtocolDataPoster
m_bDeleteMsg	include/CLExecutiveCommunicationByNamedPipe.h	/^	bool m_bDeleteMsg;$/;"	m	class:CLExecutiveCommunicationByNamedPipe
m_bDestroyed	include/CLLibExecutiveInitializer.h	/^	static bool m_bDestroyed;$/;"	m	class:CLLibExecutiveInitializer
m_bDestroyed	src/CLLibExecutiveInitializer.cpp	/^bool CLLibExecutiveInitializer::m_bDestroyed = false;$/;"	m	class:CLLibExecutiveInitializer	file:
m_bExecSuccess	include/CLProcess.h	/^	bool m_bExecSuccess;$/;"	m	class:CLProcess
m_bInitialized	include/CLLibExecutiveInitializer.h	/^	static bool m_bInitialized;$/;"	m	class:CLLibExecutiveInitializer
m_bInitialized	src/CLLibExecutiveInitializer.cpp	/^bool CLLibExecutiveInitializer::m_bInitialized = false;$/;"	m	class:CLLibExecutiveInitializer	file:
m_bIsRepeat	include/CLTimerFd.h	/^	bool m_bIsRepeat;$/;"	m	class:CLTimerFd
m_bIsShared	include/CLMsgLoopManagerForPipeQueue.h	/^	bool m_bIsShared;$/;"	m	class:CLMsgLoopManagerForPipeQueue
m_bIsSharedPipe	include/CLDataPosterChannelByNamedPipeMaintainer.h	/^	bool m_bIsSharedPipe;$/;"	m	class:CLDataPosterChannelByNamedPipeMaintainer
m_bNeededDestroy	include/CLConditionVariable.h	/^	bool m_bNeededDestroy;$/;"	m	class:CLConditionVariable
m_bNeededDestroy	include/CLEvent.h	/^	bool m_bNeededDestroy;$/;"	m	class:CLEvent
m_bNeededDestroy	include/CLMutexByPThread.h	/^	bool m_bNeededDestroy;$/;"	m	class:CLMutexByPThread
m_bNewData	include/CLDataReader.h	/^	bool m_bNewData;$/;"	m	class:CLDataReader
m_bNewMsg	include/CLSharedMsgReceiverByNamedPipe.h	/^	bool m_bNewMsg;$/;"	m	class:CLSharedMsgReceiverByNamedPipe
m_bProcessCreated	include/CLProcess.h	/^	bool m_bProcessCreated;$/;"	m	class:CLProcess
m_bReadFlag	include/CLEpollEvent.h	/^	bool m_bReadFlag;$/;"	m	class:CLEpollEvent
m_bReadHead	include/CLDataReader.h	/^	bool m_bReadHead;$/;"	m	class:CLDataReader
m_bReadHead	include/CLSharedMsgReceiverByNamedPipe.h	/^	bool m_bReadHead;$/;"	m	class:CLSharedMsgReceiverByNamedPipe
m_bRepeat	include/CLTimerOutMsg.h	/^	bool m_bRepeat;$/;"	m	class:CLTimerOutMsg
m_bSuccess	include/CLThreadInitialFinishedNotifier.h	/^	bool m_bSuccess;$/;"	m	class:CLThreadInitialFinishedNotifier
m_bThreadCreated	include/CLThread.h	/^	bool m_bThreadCreated;$/;"	m	class:CLThread
m_bWaitForDeath	include/CLProcess.h	/^	bool m_bWaitForDeath;$/;"	m	class:CLProcess
m_bWaitForDeath	include/CLThread.h	/^	bool m_bWaitForDeath;$/;"	m	class:CLThread
m_bWaitForDeath	include/CLThreadForMsgLoop.h	/^	bool m_bWaitForDeath;$/;"	m	class:CLThreadForMsgLoop
m_bWriteFlag	include/CLEpollEvent.h	/^	bool m_bWriteFlag;$/;"	m	class:CLEpollEvent
m_ciDataStartIndex	include/CLBuffer.h	/^	const int& m_ciDataStartIndex;$/;"	m	class:CLBuffer
m_ciUsedBufferLen	include/CLBuffer.h	/^	const int& m_ciUsedBufferLen;$/;"	m	class:CLBuffer
m_clErrorCode	include/CLStatus.h	/^	const long& m_clErrorCode;$/;"	m	class:CLStatus
m_clMsgID	include/CLMessage.h	/^	const unsigned long& m_clMsgID;$/;"	m	class:CLMessage
m_clReturnCode	include/CLStatus.h	/^	const long& m_clReturnCode;$/;"	m	class:CLStatus
m_epEvent	include/CLMsgLoopManagerForIOMultiplex.h	/^	struct epoll_event m_epEvent;$/;"	m	class:CLMsgLoopManagerForIOMultiplex	typeref:struct:CLMsgLoopManagerForIOMultiplex::epoll_event
m_epEvents	include/CLMsgLoopManagerForIOMultiplex.h	/^   	struct epoll_event m_epEvents[MAX_EVENT_SIZE]; $/;"	m	class:CLMsgLoopManagerForIOMultiplex	typeref:struct:CLMsgLoopManagerForIOMultiplex::epoll_event
m_fd	include/CLDataReader.h	/^	int m_fd;$/;"	m	class:CLDataReader
m_i	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^	int m_i;$/;"	m	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	file:
m_i	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^	long m_i;$/;"	m	class:Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	file:
m_i	test/CLMessageLoopManagerTester.cpp	/^	int m_i;$/;"	m	class:CLTestAddMsgForCLMessageLoopManager	file:
m_i	test/CLMessageQueueByNamedPipeTester.cpp	/^	int m_i;$/;"	m	class:TestMsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg	file:
m_i	test/CLMessageQueueByNamedPipeTester.cpp	/^	long m_i;$/;"	m	class:Test2MsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg	file:
m_i	test_for_exe_forgzh/test_for_processProvider/CLProcessTestProvider.cpp	/^	int m_i;$/;"	m	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	file:
m_i	test_for_exe_forgzh/test_for_processProvider/CLProcessTestProvider.cpp	/^	long m_i;$/;"	m	class:Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	file:
m_i	test_for_exec/test_for_CLExecutiveCommunicationByNamedPipe/test.cpp	/^	int m_i;$/;"	m	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	file:
m_i	test_for_exec/test_for_CLExecutiveCommunicationByNamedPipe/test.cpp	/^	long m_i;$/;"	m	class:Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	file:
m_i	test_for_exec/test_for_CLNonThreadForMsgLoop_Stress_Testing/test.cpp	/^	int m_i;$/;"	m	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	file:
m_iCtxLength	include/CLDataReader.h	/^	int  m_iCtxLength;$/;"	m	class:CLDataReader
m_iDataLength	include/CLIOVector.h	/^	int m_iDataLength;$/;"	m	class:CLIOVector
m_iDataStartIndex	include/CLBuffer.h	/^	int m_iDataStartIndex;$/;"	m	class:CLBuffer
m_iEchoID	include/CLDataReceiverByTimerFd.h	/^	int m_iEchoID;$/;"	m	class:CLDataReceiverByTimerFd
m_iEchoID	include/CLTimerApplyMsg.h	/^	int m_iEchoID;$/;"	m	class:CLTimerApplyMsg
m_iEchoID	include/CLTimerOutMsg.h	/^	int m_iEchoID; $/;"	m	class:CLTimerOutMsg
m_iEchoID	include/CLTimerOutNotifyMsg.h	/^	int m_iEchoID; $/;"	m	class:CLTimerOutNotifyMsg
m_iEpollFd	include/CLEpoll.h	/^	int 				m_iEpollFd;$/;"	m	class:CLEpoll
m_iEpollFd	include/CLMsgLoopManagerForIOMultiplex.h	/^	int    m_iEpollFd;$/;"	m	class:CLMsgLoopManagerForIOMultiplex
m_iHeadLength	include/CLDataReader.h	/^	int  m_iHeadLength;$/;"	m	class:CLDataReader
m_iHeadLength	include/CLSharedMsgReceiverByNamedPipe.h	/^	int  m_iHeadLength;$/;"	m	class:CLSharedMsgReceiverByNamedPipe
m_iItemSize	include/CLBuffer.h	/^	int m_iItemSize;$/;"	m	class:CLBuffer
m_iMaxEventSize	include/CLEpoll.h	/^	int 				m_iMaxEventSize;$/;"	m	class:CLEpoll
m_iMsgLength	include/CLSharedMsgReceiverByNamedPipe.h	/^	int  m_iMsgLength;$/;"	m	class:CLSharedMsgReceiverByNamedPipe
m_iReadLength	include/CLSharedMsgReceiverByNamedPipe.h	/^	int  m_iReadLength;$/;"	m	class:CLSharedMsgReceiverByNamedPipe
m_iReadOffset	include/CLDataReader.h	/^	int  m_iReadOffset;$/;"	m	class:CLDataReader
m_iSumBufferLen	include/CLBuffer.h	/^	int m_iSumBufferLen;$/;"	m	class:CLBuffer
m_iTimerFd	include/CLTimerOutMsg.h	/^	int m_iTimerFd;$/;"	m	class:CLTimerOutMsg
m_iUsedBufferLen	include/CLBuffer.h	/^	int m_iUsedBufferLen;$/;"	m	class:CLBuffer
m_ioVecQueue	include/CLIOVector.h	/^	std::deque<struct iovec> m_ioVecQueue;$/;"	m	class:CLIOVector
m_j	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^	int m_j;$/;"	m	class:Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	file:
m_j	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^	int m_j;$/;"	m	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	file:
m_j	test/CLMessageLoopManagerTester.cpp	/^	int m_j;$/;"	m	class:CLTestAddMsgForCLMessageLoopManager	file:
m_j	test/CLMessageQueueByNamedPipeTester.cpp	/^	int m_j;$/;"	m	class:Test2MsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg	file:
m_j	test/CLMessageQueueByNamedPipeTester.cpp	/^	int m_j;$/;"	m	class:TestMsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg	file:
m_j	test_for_exe_forgzh/test_for_processProvider/CLProcessTestProvider.cpp	/^	int m_j;$/;"	m	class:Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	file:
m_j	test_for_exe_forgzh/test_for_processProvider/CLProcessTestProvider.cpp	/^	int m_j;$/;"	m	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	file:
m_j	test_for_exec/test_for_CLExecutiveCommunicationByNamedPipe/test.cpp	/^	int m_j;$/;"	m	class:Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	file:
m_j	test_for_exec/test_for_CLExecutiveCommunicationByNamedPipe/test.cpp	/^	int m_j;$/;"	m	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	file:
m_j	test_for_exec/test_for_CLNonThreadForMsgLoop_Stress_Testing/test.cpp	/^	int m_j;$/;"	m	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	file:
m_lAtomWriteSize	include/CLNamedPipe.h	/^	long m_lAtomWriteSize;$/;"	m	class:CLNamedPipe
m_lErrorCode	include/CLStatus.h	/^	long m_lErrorCode;$/;"	m	class:CLStatus
m_lMaxSizeForPipe	include/CLDataReceiverByNamedPipe.h	/^	long m_lMaxSizeForPipe;$/;"	m	class:CLDataReceiverByNamedPipe
m_lMsgID	include/CLMessage.h	/^	unsigned long m_lMsgID;$/;"	m	class:CLMessage
m_lPipeBufSize	include/CLExecutiveCommunicationByNamedPipe.h	/^	long m_lPipeBufSize;$/;"	m	class:CLExecutiveCommunicationByNamedPipe
m_lReturnCode	include/CLStatus.h	/^	long m_lReturnCode;$/;"	m	class:CLStatus
m_nItemSize	include/CLSharedObjectsImpl.h	/^	unsigned int m_nItemSize;$/;"	m	class:CLSharedObjectsImpl
m_pAddressInfo	include/CLTCPClientSocket.h	/^	struct addrinfo *m_pAddressInfo;$/;"	m	class:CLTCPClientSocket	typeref:struct:CLTCPClientSocket::addrinfo
m_pAllocator	include/CLSharedObjectAllocator.h	/^	static CLSharedObjectAllocator *m_pAllocator;$/;"	m	class:CLSharedObjectAllocator
m_pAllocator	include/CLSharedObjectAllocator.h	/^CLSharedObjectAllocator<TSharedObjectPool, TSharedObject>* CLSharedObjectAllocator<TSharedObjectPool,TSharedObject>::m_pAllocator = 0;$/;"	m	class:CLSharedObjectAllocator
m_pClientAddr	include/CLTCPClientArrivedMessage.h	/^	CLSocketAddress *m_pClientAddr;$/;"	m	class:CLTCPClientArrivedMessage
m_pClientSocket	include/CLTCPClientArrivedMessage.h	/^	CLSocket *m_pClientSocket;$/;"	m	class:CLTCPClientArrivedMessage
m_pConditionVariable	include/CLConditionVariable.h	/^	pthread_cond_t *m_pConditionVariable;$/;"	m	class:CLConditionVariable
m_pContext	include/CLThread.h	/^	void *m_pContext;$/;"	m	class:CLThread
m_pCtxBuffer	include/CLDataReader.h	/^	char* m_pCtxBuffer;$/;"	m	class:CLDataReader
m_pData	include/CLProtocolDataPoster.h	/^	CLIOVector *m_pData;$/;"	m	struct:_proto_data
m_pDataBuffer	include/CLMessageReceiver.h	/^	CLBuffer *m_pDataBuffer;$/;"	m	class:CLMessageReceiver
m_pDataPoster	include/CLProtocolDataPoster.h	/^	CLDataPoster *m_pDataPoster;$/;"	m	class:CLProtocolDataPoster
m_pDataPosterChannel	include/CLMessagePoster.h	/^	CLDataPosterChannelMaintainer *m_pDataPosterChannel;$/;"	m	class:CLMessagePoster
m_pDataReceiver	include/CLMessageReceiver.h	/^	CLDataReceiver *m_pDataReceiver;$/;"	m	class:CLMessageReceiver
m_pDataSTLQueue	include/CLDataReceiverBySTLQueue.h	/^	CLSTLQueue* m_pDataSTLQueue;$/;"	m	class:CLDataReceiverBySTLQueue
m_pEpoll	include/CLEpollEvent.h	/^	CLEpoll *m_pEpoll;$/;"	m	class:CLEpollEvent
m_pEpoll	include/CLMsgLoopManagerForEpoll.h	/^	CLEpoll *m_pEpoll;$/;"	m	class:CLMsgLoopManagerForEpoll
m_pEpollEvents	include/CLEpoll.h	/^	struct epoll_event *m_pEpollEvents;$/;"	m	class:CLEpoll	typeref:struct:CLEpoll::epoll_event
m_pEvent	include/CLMessagePoster.h	/^	CLEvent	*m_pEvent;$/;"	m	class:CLMessagePoster
m_pEvent	include/CLMsgLoopManagerForPipeQueue.h	/^	CLEvent *m_pEvent;$/;"	m	class:CLMsgLoopManagerForPipeQueue
m_pEvent	include/CLMsgLoopManagerForSTLqueue.h	/^	CLEvent     *m_pEvent;$/;"	m	class:CLMsgLoopManagerForSTLqueue
m_pEvent	include/CLProtocolDataPoster.h	/^	CLEvent *m_pEvent; \/\/delete is in the msgposter$/;"	m	class:CLProtocolDataPoster
m_pEvent	include/CLThreadCommunicationBySTLqueue.h	/^	CLEvent *m_pEvent;$/;"	m	class:CLThreadCommunicationBySTLqueue
m_pEvent	include/CLThreadInitialFinishedNotifier.h	/^	CLEvent *m_pEvent;$/;"	m	class:CLThreadInitialFinishedNotifier
m_pEventInfo	include/CLEvent.h	/^	SLEventInfo *m_pEventInfo;$/;"	m	class:CLEvent
m_pExecutiveFunctionProvider	include/CLExecutive.h	/^	CLExecutiveFunctionProvider *m_pExecutiveFunctionProvider;$/;"	m	class:CLExecutive
m_pFunctionProvider	include/CLNonThreadForMsgLoop.h	/^	CLExecutiveFunctionProvider *m_pFunctionProvider;$/;"	m	class:CLNonThreadForMsgLoop
m_pHandle	include/CLEpollEvent.h	/^	void *m_pHandle;$/;"	m	class:CLEpollEvent
m_pHeaderBuffer	include/CLDataReader.h	/^	char* m_pHeaderBuffer;$/;"	m	class:CLDataReader
m_pHostOrIP	include/CLTCPClientSocket.h	/^	std::string m_pHostOrIP;$/;"	m	class:CLTCPClientSocket
m_pIOBufferVec	include/CLBuffer.h	/^	CLIOVector *m_pIOBufferVec;$/;"	m	class:CLBuffer
m_pImpl	include/CLSharedObjectAllocator.h	/^	TSharedObjectPool *m_pImpl;$/;"	m	class:CLSharedObjectAllocator
m_pListenSocket	include/CLDataReceiverByTCPAccept.h	/^	CLSocket *m_pListenSocket;$/;"	m	class:CLDataReceiverByTCPAccept
m_pLog	include/CLLogger.h	/^	static CLLogger *m_pLog;$/;"	m	class:CLLogger
m_pLog	src/CLLogger.cpp	/^CLLogger* CLLogger::m_pLog = 0;$/;"	m	class:CLLogger	file:
m_pMessageObserver	include/CLMessageLoopManager.h	/^	CLMessageObserver *m_pMessageObserver;$/;"	m	class:CLMessageLoopManager
m_pMsg	include/CLDataPostResultNotifier.h	/^	CLMessage *m_pMsg;$/;"	m	class:CLDataPostResultNotifier
m_pMsgBuffer	include/CLSharedMsgReceiverByNamedPipe.h	/^	char* m_pMsgBuffer;$/;"	m	class:CLSharedMsgReceiverByNamedPipe
m_pMsgDeserializer	include/CLMessageReceiver.h	/^	CLMessageDeserializer *m_pMsgDeserializer;$/;"	m	class:CLMessageReceiver
m_pMsgDeserializer	include/CLMsgLoopManagerForPipeQueue.h	/^	CLMessageDeserializer *m_pMsgDeserializer;	$/;"	m	class:CLMsgLoopManagerForPipeQueue
m_pMsgDeserializer	include/CLMsgLoopManagerForSTLqueue.h	/^	CLPointerMsgDeserializer *m_pMsgDeserializer;$/;"	m	class:CLMsgLoopManagerForSTLqueue
m_pMsgDeserializer	include/CLMsgLoopManagerForSocket.h	/^	CLMessageDeserializer *m_pMsgDeserializer;	$/;"	m	class:CLMsgLoopManagerForSocket
m_pMsgLoopManager	include/CLExecutiveFunctionForMsgLoop.h	/^	CLMessageLoopManager *m_pMsgLoopManager;$/;"	m	class:CLExecutiveFunctionForMsgLoop
m_pMsgLoopManager	timer/CLTimerMsgObserver.h	/^	CLMsgLoopManagerForEpoll *m_pMsgLoopManager;$/;"	m	class:CLTimerMsgObserver
m_pMsgQueue	include/CLMsgLoopManagerForIOMultiplex.h	/^	CLMessageQueueByNamedPipe *m_pMsgQueue;$/;"	m	class:CLMsgLoopManagerForIOMultiplex
m_pMsgReceiver	include/CLMsgLoopManagerForEpoll.h	/^	CLMessageReceiver* m_pMsgReceiver;$/;"	m	class:CLMsgLoopManagerForEpoll
m_pMsgReceiver	include/CLMsgLoopManagerForPipeQueue.h	/^	CLMessageReceiver *m_pMsgReceiver;$/;"	m	class:CLMsgLoopManagerForPipeQueue
m_pMsgReceiver	include/CLMsgLoopManagerForSTLqueue.h	/^	CLMessageReceiver *m_pMsgReceiver;$/;"	m	class:CLMsgLoopManagerForSTLqueue
m_pMsgReceiver	include/CLMsgLoopManagerForSocket.h	/^	CLMessageReceiver *m_pMsgReceiver;$/;"	m	class:CLMsgLoopManagerForSocket
m_pMsgReceiver	include/CLThreadCommunicationBySTLqueue.h	/^	CLMessageReceiverBySTLqueue *m_pMsgReceiver;$/;"	m	class:CLThreadCommunicationBySTLqueue
m_pMsgSerializer	include/CLMessagePoster.h	/^	CLMessageSerializer *m_pMsgSerializer;$/;"	m	class:CLMessagePoster
m_pMultiMsgDeserializer	include/CLMsgLoopManagerForEpoll.h	/^	CLMultiMsgDeserializer *m_pMultiMsgDeserializer;$/;"	m	class:CLMsgLoopManagerForEpoll
m_pMutex	include/CLCriticalSection.h	/^	CLMutex *m_pMutex;$/;"	m	class:CLCriticalSection
m_pMutex	include/CLMutex.h	/^	CLMutexInterface *m_pMutex;$/;"	m	class:CLMutex
m_pMutex	include/CLMutexByPThread.h	/^	pthread_mutex_t *m_pMutex;$/;"	m	class:CLMutexByPThread
m_pMutex	include/CLMutexBySharedPThread.h	/^	pthread_mutex_t *m_pMutex;$/;"	m	class:CLMutexBySharedPThread
m_pMutexForNamedPipe	include/CLNamedPipe.h	/^	CLMutex *m_pMutexForNamedPipe;$/;"	m	class:CLNamedPipe
m_pNameServer	include/CLExecutiveNameServer.h	/^	static CLExecutiveNameServer *m_pNameServer;$/;"	m	class:CLExecutiveNameServer
m_pNameServer	src/CLExecutiveNameServer.cpp	/^CLExecutiveNameServer* CLExecutiveNameServer::m_pNameServer = 0;$/;"	m	class:CLExecutiveNameServer	file:
m_pNamedPipe	include/CLDataPosterByNamedPipe.h	/^	CLNamedPipe *m_pNamedPipe;$/;"	m	class:CLDataPosterByNamedPipe
m_pNamedPipe	include/CLDataPosterChannelByNamedPipeMaintainer.h	/^	CLNamedPipe *m_pNamedPipe;$/;"	m	class:CLDataPosterChannelByNamedPipeMaintainer
m_pPipeMsgQueue	include/CLNonThreadForMsgLoop.h	/^	CLMsgLoopManagerForPipeQueue *m_pPipeMsgQueue;$/;"	m	class:CLNonThreadForMsgLoop
m_pPipeQueue	include/CLThreadForMsgLoop.h	/^	CLMsgLoopManagerForPipeQueue *m_pPipeQueue;$/;"	m	class:CLThreadForMsgLoop
m_pPointerMsgDeserializer	include/CLMsgLoopManagerForEpoll.h	/^	CLPointerMsgDeserializer *m_pPointerMsgDeserializer;$/;"	m	class:CLMsgLoopManagerForEpoll
m_pProtoDataPoster	include/CLDataPoster.h	/^	CLProtocolDataPoster *m_pProtoDataPoster;$/;"	m	class:CLDataPoster
m_pProtoDataPoster	include/CLMessagePoster.h	/^	CLProtocolDataPoster *m_pProtoDataPoster;$/;"	m	class:CLMessagePoster
m_pProtoEncapsulator	include/CLMessagePoster.h	/^	CLProtocolEncapsulator *m_pProtoEncapsulator;$/;"	m	class:CLMessagePoster
m_pProtoParser	include/CLDataReader.h	/^	CLProtoParser *m_pProtoParser;$/;"	m	class:CLDataReader
m_pProtoParser	include/CLMessageReceiver.h	/^	CLProtoParser *m_pProtoParser;$/;"	m	class:CLMessageReceiver
m_pQueue	include/CLDataPosterBySTLQueue.h	/^	CLSTLQueue *m_pQueue;$/;"	m	class:CLDataPosterBySTLQueue
m_pQueue	include/CLDataPosterChannelBySTLQueueMaintainer.h	/^	CLSTLQueue *m_pQueue;$/;"	m	class:CLDataPosterChannelBySTLQueueMaintainer
m_pResNotifier	include/CLProtocolDataPoster.h	/^	CLDataPostResultNotifier *m_pResNotifier;$/;"	m	struct:_proto_data
m_pServiceOrPort	include/CLTCPClientSocket.h	/^	std::string m_pServiceOrPort;$/;"	m	class:CLTCPClientSocket
m_pSharedMemory	include/CLSharedMemory.h	/^	void *m_pSharedMemory;$/;"	m	class:CLSharedMemory
m_pSharedMemory	include/CLSharedObjectsImpl.h	/^	CLSharedMemory *m_pSharedMemory;$/;"	m	class:CLSharedObjectsImpl
m_pSharedObjects	include/CLSharedObjectsImpl.h	/^	SLSharedObjectHead *m_pSharedObjects;$/;"	m	class:CLSharedObjectsImpl
m_pSocket	include/CLSocket.h	/^	CLBaseSocket *m_pSocket;$/;"	m	class:CLSocket
m_pStlQueue	include/CLMsgLoopManagerForSTLqueue.h	/^	CLSTLQueue *m_pStlQueue;$/;"	m	class:CLMsgLoopManagerForSTLqueue
m_pThread	include/CLThreadForMsgLoop.h	/^	CLThread *m_pThread;$/;"	m	class:CLThreadForMsgLoop
m_pTimer	include/CLMessageReceiverByTimerFd.h	/^	CLTimerFd *m_pTimer;$/;"	m	class:CLMessageReceiverByTimerFd
m_sTimeValue	include/CLTimerApplyMsg.h	/^	struct itimerspec m_sTimeValue;\/\/ user abslute time$/;"	m	class:CLTimerApplyMsg	typeref:struct:CLTimerApplyMsg::itimerspec
m_sTimerValue	include/CLTimerFd.h	/^	struct itimerspec m_sTimerValue;$/;"	m	class:CLTimerFd	typeref:struct:CLTimerFd::itimerspec
m_strCondName	include/CLConditionVariable.h	/^	string m_strCondName;$/;"	m	class:CLConditionVariable
m_strEventName	include/CLEvent.h	/^	string m_strEventName;$/;"	m	class:CLEvent
m_strExecutiveName	include/CLExecutiveCommunicationByNamedPipe.h	/^	string m_strExecutiveName;$/;"	m	class:CLExecutiveCommunicationByNamedPipe
m_strFileName	include/CLMutexByRecordLocking.h	/^	string m_strFileName;$/;"	m	class:CLMutexByRecordLocking
m_strMutexName	include/CLMutexBySharedPThread.h	/^	string m_strMutexName;$/;"	m	class:CLMutexBySharedPThread
m_strPipeName	include/CLNamedPipe.h	/^	string m_strPipeName;$/;"	m	class:CLNamedPipe
m_strRemoteName	include/CLDataReceiverByTimerFd.h	/^	std::string m_strRemoteName;$/;"	m	class:CLDataReceiverByTimerFd
m_strRemoteName	include/CLTimerApplyMsg.h	/^	std::string m_strRemoteName;$/;"	m	class:CLTimerApplyMsg
m_strRemoteName	include/CLTimerFd.h	/^	string m_strRemoteName;$/;"	m	class:CLTimerFd
m_strRemoteName	include/CLTimerOutMsg.h	/^	std::string m_strRemoteName;$/;"	m	class:CLTimerOutMsg
m_strSharedSpaceName	include/CLSharedObjectsImpl.h	/^	string m_strSharedSpaceName;$/;"	m	class:CLSharedObjectsImpl
m_strThreadName	include/CLMsgLoopManagerForIOMultiplex.h	/^	string m_strThreadName;$/;"	m	class:CLMsgLoopManagerForIOMultiplex
m_strThreadName	include/CLMsgLoopManagerForPipeQueue.h	/^	string m_strThreadName;$/;"	m	class:CLMsgLoopManagerForPipeQueue
m_strThreadName	include/CLMsgLoopManagerForSTLqueue.h	/^	std::string m_strThreadName;$/;"	m	class:CLMsgLoopManagerForSTLqueue
m_topMsgBufIndex	include/CLProtocolDataPoster.h	/^	int m_topMsgBufIndex;$/;"	m	class:CLProtocolDataPoster
main	src/test.cpp	/^int main()$/;"	f
main	test/test.cpp	/^int main(int argc, char* argv[])$/;"	f
main	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^int main(int argc, char** agrv)$/;"	f
main	test_for_exe_forgzh/test_for_QueuLoop/CLSTLQueueLoopTest.cpp	/^int main()$/;"	f
main	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^int main()$/;"	f
main	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^int main(int argc, char** agrv)$/;"	f
main	test_for_exe_forgzh/test_for_processProvider/CLProcessTestProvider.cpp	/^int main(int argc, char* argv[])$/;"	f
main	test_for_exe_forgzh/test_for_socket/EchoClient/test.cpp	/^int main(int argc, char* argv[])$/;"	f
main	test_for_exe_forgzh/test_for_socket/EchoServer/test.cpp	/^int main(int argc, char* argv[])$/;"	f
main	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^int main()$/;"	f
main	test_for_exec/test_for_CLExecutiveCommunicationByNamedPipe/test.cpp	/^int main(int argc, char* argv[])$/;"	f
main	test_for_exec/test_for_CLMessageQueueByNamedPipe/test.cpp	/^int main(int argc, char* argv[])$/;"	f
main	test_for_exec/test_for_CLNonThreadForMsgLoop_Stress_Testing/test.cpp	/^int main(int argc, char* argv[])$/;"	f
main	test_for_exec/test_for_CLProcess/test.cpp	/^int main(int argc, char* argv[])$/;"	f
main	test_for_me/test.cpp	/^int main(int argc, char* argv[])$/;"	f
main	timer/TimerServer.cpp	/^int main()$/;"	f
mutex	include/CLSharedMutexImpl.h	/^	pthread_mutex_t mutex;$/;"	m	struct:SLSharedMutexItem
mutex	test/CLConditionVariableTester.cpp	/^	CLMutex mutex;$/;"	m	struct:TestForCLConditionVariable	file:
mutex	test/CLCriticalSectionTester.cpp	/^	CLMutex mutex;$/;"	m	struct:TestForCLCriticalSection	file:
nCount	include/CLExecutiveNameServer.h	/^	unsigned int nCount;$/;"	m	struct:SLMessagePosterPtrCount
operator =	src/CLIOVector.cpp	/^CLIOVector& CLIOVector::operator=(const CLIOVector& rhs)$/;"	f	class:CLIOVector
operator =	src/CLStatus.cpp	/^CLStatus& CLStatus::operator= (const CLStatus& status)$/;"	f	class:CLStatus
operator []	src/CLIOVector.cpp	/^const char& CLIOVector::operator[](const int& index)$/;"	f	class:CLIOVector
pContext	include/CLMessageLoopManager.h	/^	void *pContext;$/;"	m	struct:SLExecutiveInitialParameter
pMsg	include/CLDataReader.h	/^	CLMessage *pMsg;$/;"	m	class:CLDataReader
pMsgPoster	include/CLExecutiveNameServer.h	/^	CLMessagePoster *pMsgPoster;$/;"	m	struct:SLMessagePosterPtrCount
pNotifier	include/CLMessageLoopManager.h	/^	CLExecutiveInitialFinishedNotifier *pNotifier;$/;"	m	struct:SLExecutiveInitialParameter
pmutex	test/CLMutexTester.cpp	/^	CLMutex *pmutex;$/;"	m	struct:TestStructForCLMutex	file:
pthread	test/CLNonThreadForMsgLoopTester.cpp	/^	CLThread *pthread;$/;"	m	class:CLStressObserverForCLNonThreadForMsgLoop	file:
ptr_msg1	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^static long ptr_msg1 = 0;$/;"	v	file:
ptr_msg1	test/CLMessageQueueByNamedPipeTester.cpp	/^static long ptr_msg1 = 0;$/;"	v	file:
ptr_msg2	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^static long ptr_msg2 = 0;$/;"	v	file:
ptr_msg2	test/CLMessageQueueByNamedPipeTester.cpp	/^static long ptr_msg2 = 0;$/;"	v	file:
ptr_msg3	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^static long ptr_msg3 = 0;$/;"	v	file:
ptr_msg3	test/CLMessageQueueByNamedPipeTester.cpp	/^static long ptr_msg3 = 0;$/;"	v	file:
strSharedObjectName	include/CLSharedObjectsImpl.h	/^	char strSharedObjectName[LENGTH_OF_SHARED_OBJECT_NAME];$/;"	m	struct:SLSharedObjectHead
test_pipe_name	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^static const char *test_pipe_name = "test_for_CLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg";$/;"	v	file:
test_pipe_name	test/CLMessageQueueByNamedPipeTester.cpp	/^static const char *test_pipe_name = "test_for_CLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg";$/;"	v	file:
test_pipe_name	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^static const char *test_pipe_name = "test_for_CLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg";$/;"	v	file:
test_pipe_name	test/CLNonThreadForMsgLoopTester.cpp	/^static const char *test_pipe_name = "test_for_CLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg";$/;"	v	file:
test_pipe_name	test/CLThreadForMsgLoopTester.cpp	/^static const char *test_pipe_name = "test_for_CLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg";$/;"	v	file:
test_pipe_name	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^static const char *test_pipe_name = "test_for_CLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg";$/;"	v	file:
test_pipe_name	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^static const char *test_pipe_name = "test_for_CLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg";$/;"	v	file:
test_pipe_name	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^static const char *test_pipe_name = "test_for_CLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg";$/;"	v	file:
test_pipe_name	test_for_exe_forgzh/test_for_processProvider/CLProcessTestProvider.cpp	/^static const char *test_pipe_name = "test_for_CLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg";$/;"	v	file:
test_pipe_name	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^static const char *test_pipe_name = "test_for_CLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg";$/;"	v	file:
test_pipe_name	test_for_exec/test_for_CLExecutiveCommunicationByNamedPipe/test.cpp	/^static const char *test_pipe_name = "test_for_CLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg";$/;"	v	file:
test_pipe_name	test_for_exec/test_for_CLMessageQueueByNamedPipe/test.cpp	/^static const char *test_pipe_name = "test_for_CLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg";$/;"	v	file:
test_pipe_name	test_for_exec/test_for_CLNonThreadForMsgLoop_Stress_Testing/test.cpp	/^static const char *test_pipe_name = "test_for_CLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg";$/;"	v	file:
test_pipe_name	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^static const char *test_pipe_name = "test_for_CLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg";$/;"	v	file:
thread_for_CLSharedMutexAllocator_MultiProcess_MuiltThread	test/CLSharedObjectAllocatorTester.cpp	/^static void *thread_for_CLSharedMutexAllocator_MultiProcess_MuiltThread(void *arg)$/;"	f	file:
thread_for_record_and_pthread	test/CLMutexTester.cpp	/^static void *thread_for_record_and_pthread(void *arg)$/;"	f	file:
thread_for_shared_mutex_bypthread	test/CLMutexTester.cpp	/^static void *thread_for_shared_mutex_bypthread(void *arg)$/;"	f	file:
~CLBaseSocket	src/CLBaseSocket.cpp	/^CLBaseSocket::~CLBaseSocket()$/;"	f	class:CLBaseSocket
~CLBuffer	src/CLBuffer.cpp	/^CLBuffer::~CLBuffer()$/;"	f	class:CLBuffer
~CLConditionVariable	src/CLConditionVariable.cpp	/^CLConditionVariable::~CLConditionVariable()$/;"	f	class:CLConditionVariable
~CLCriticalSection	src/CLCriticalSection.cpp	/^CLCriticalSection::~CLCriticalSection()$/;"	f	class:CLCriticalSection
~CLDataPostResultNotifier	src/CLDataPostResultNotifier.cpp	/^CLDataPostResultNotifier::~CLDataPostResultNotifier()$/;"	f	class:CLDataPostResultNotifier
~CLDataPoster	src/CLDataPoster.cpp	/^CLDataPoster::~CLDataPoster()$/;"	f	class:CLDataPoster
~CLDataPosterByNamedPipe	src/CLDataPosterByNamedPipe.cpp	/^CLDataPosterByNamedPipe::~CLDataPosterByNamedPipe()$/;"	f	class:CLDataPosterByNamedPipe
~CLDataPosterBySTLQueue	src/CLDataPosterBySTLQueue.cpp	/^CLDataPosterBySTLQueue::~CLDataPosterBySTLQueue()$/;"	f	class:CLDataPosterBySTLQueue
~CLDataPosterChannelByNamedPipeMaintainer	src/CLDataPosterChannelByNamedPipeMaintainer.cpp	/^CLDataPosterChannelByNamedPipeMaintainer::~CLDataPosterChannelByNamedPipeMaintainer()$/;"	f	class:CLDataPosterChannelByNamedPipeMaintainer
~CLDataPosterChannelBySTLQueueMaintainer	src/CLDataPosterChannelBySTLQueueMaintainer.cpp	/^CLDataPosterChannelBySTLQueueMaintainer::~CLDataPosterChannelBySTLQueueMaintainer()$/;"	f	class:CLDataPosterChannelBySTLQueueMaintainer
~CLDataPosterChannelMaintainer	src/CLDataPosterChannelMaintainer.cpp	/^CLDataPosterChannelMaintainer::~CLDataPosterChannelMaintainer()$/;"	f	class:CLDataPosterChannelMaintainer
~CLDataReader	src/CLDataReader.cpp	/^CLDataReader::~CLDataReader()$/;"	f	class:CLDataReader
~CLDataReceiver	src/CLDataReceiver.cpp	/^CLDataReceiver::~CLDataReceiver()$/;"	f	class:CLDataReceiver
~CLDataReceiverByNamedPipe	src/CLDataReceiverByNamedPipe.cpp	/^CLDataReceiverByNamedPipe::~CLDataReceiverByNamedPipe()$/;"	f	class:CLDataReceiverByNamedPipe
~CLDataReceiverBySTLQueue	src/CLDataReceiverBySTLQueue.cpp	/^CLDataReceiverBySTLQueue::~CLDataReceiverBySTLQueue()$/;"	f	class:CLDataReceiverBySTLQueue
~CLDataReceiverByTCPAccept	src/CLDataReceiverByTCPAccept.cpp	/^CLDataReceiverByTCPAccept::~CLDataReceiverByTCPAccept()$/;"	f	class:CLDataReceiverByTCPAccept
~CLDataReceiverByTimerFd	src/CLDataReceiverByTimerFd.cpp	/^CLDataReceiverByTimerFd::~CLDataReceiverByTimerFd()$/;"	f	class:CLDataReceiverByTimerFd
~CLEpoll	src/CLEpoll.cpp	/^CLEpoll::~CLEpoll()$/;"	f	class:CLEpoll
~CLEpollEvent	src/CLEpollEvent.cpp	/^CLEpollEvent::~CLEpollEvent()$/;"	f	class:CLEpollEvent
~CLEvent	src/CLEvent.cpp	/^CLEvent::~CLEvent()$/;"	f	class:CLEvent
~CLExecutive	src/CLExecutive.cpp	/^CLExecutive::~CLExecutive()$/;"	f	class:CLExecutive
~CLExecutiveCommunication	src/CLExecutiveCommunication.cpp	/^CLExecutiveCommunication::~CLExecutiveCommunication()$/;"	f	class:CLExecutiveCommunication
~CLExecutiveCommunicationByNamedPipe	src/CLExecutiveCommunicationByNamedPipe.cpp	/^CLExecutiveCommunicationByNamedPipe::~CLExecutiveCommunicationByNamedPipe()$/;"	f	class:CLExecutiveCommunicationByNamedPipe
~CLExecutiveFunctionForMsgLoop	src/CLExecutiveFunctionForMsgLoop.cpp	/^CLExecutiveFunctionForMsgLoop::~CLExecutiveFunctionForMsgLoop()$/;"	f	class:CLExecutiveFunctionForMsgLoop
~CLExecutiveFunctionProvider	src/CLExecutiveFunctionProvider.cpp	/^CLExecutiveFunctionProvider::~CLExecutiveFunctionProvider()$/;"	f	class:CLExecutiveFunctionProvider
~CLExecutiveInitialFinishedNotifier	src/CLExecutiveInitialFinishedNotifier.cpp	/^CLExecutiveInitialFinishedNotifier::~CLExecutiveInitialFinishedNotifier()$/;"	f	class:CLExecutiveInitialFinishedNotifier
~CLExecutiveNameServer	src/CLExecutiveNameServer.cpp	/^CLExecutiveNameServer::~CLExecutiveNameServer()$/;"	f	class:CLExecutiveNameServer
~CLFalseCommunication	test/CLExecutiveNameServerTester.cpp	/^	virtual ~CLFalseCommunication()$/;"	f	class:CLFalseCommunication
~CLIOVector	src/CLIOVector.cpp	/^CLIOVector::~CLIOVector()$/;"	f	class:CLIOVector
~CLLogger	src/CLLogger.cpp	/^CLLogger::~CLLogger()$/;"	f	class:CLLogger
~CLMessage	src/CLMessage.cpp	/^CLMessage::~CLMessage()$/;"	f	class:CLMessage
~CLMessage1ForCLMessageQueueBySTLqueue	test/CLMessageQueueBySTLqueueTester.cpp	/^	virtual ~CLMessage1ForCLMessageQueueBySTLqueue()$/;"	f	class:CLMessage1ForCLMessageQueueBySTLqueue
~CLMessageDeserializer	src/CLMessageDeserializer.cpp	/^CLMessageDeserializer::~CLMessageDeserializer()$/;"	f	class:CLMessageDeserializer
~CLMessageLoopManager	src/CLMessageLoopManager.cpp	/^CLMessageLoopManager::~CLMessageLoopManager()$/;"	f	class:CLMessageLoopManager
~CLMessageObserver	src/CLMessageObserver.cpp	/^CLMessageObserver::~CLMessageObserver()$/;"	f	class:CLMessageObserver
~CLMessagePoster	src/CLMessagePoster.cpp	/^CLMessagePoster::~CLMessagePoster()$/;"	f	class:CLMessagePoster
~CLMessageReceiver	src/CLMessageReceiver.cpp	/^CLMessageReceiver::~CLMessageReceiver()$/;"	f	class:CLMessageReceiver
~CLMessageReceiverByNamedPipe	src/CLMessageReceiverByNamedPipe.cpp	/^CLMessageReceiverByNamedPipe::~CLMessageReceiverByNamedPipe()$/;"	f	class:CLMessageReceiverByNamedPipe
~CLMessageReceiverBySTLqueue	src/CLMessageReceiverBySTLqueue.cpp	/^CLMessageReceiverBySTLqueue::~CLMessageReceiverBySTLqueue()$/;"	f	class:CLMessageReceiverBySTLqueue
~CLMessageReceiverByTCPListener	src/CLMessageReceiverByTCPListener.cpp	/^CLMessageReceiverByTCPListener::~CLMessageReceiverByTCPListener()$/;"	f	class:CLMessageReceiverByTCPListener
~CLMessageReceiverByTimerFd	src/CLMessageReceiverByTimerFd.cpp	/^CLMessageReceiverByTimerFd::~CLMessageReceiverByTimerFd()$/;"	f	class:CLMessageReceiverByTimerFd
~CLMessageSerializer	src/CLMessageSerializer.cpp	/^CLMessageSerializer::~CLMessageSerializer()$/;"	f	class:CLMessageSerializer
~CLMsg1ForCLMsgLoopManagerForPipeQueue	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual ~CLMsg1ForCLMsgLoopManagerForPipeQueue()$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue
~CLMsg1ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	virtual ~CLMsg1ForCLMsgLoopManagerForPipeQueue()$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue
~CLMsg1ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	virtual ~CLMsg1ForCLMsgLoopManagerForPipeQueue()$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue
~CLMsg1ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	virtual ~CLMsg1ForCLMsgLoopManagerForPipeQueue()$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue
~CLMsg1ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	virtual ~CLMsg1ForCLMsgLoopManagerForPipeQueue()$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue
~CLMsg1ForCLMsgLoopManagerForPipeQueue	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual ~CLMsg1ForCLMsgLoopManagerForPipeQueue()$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue
~CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual ~CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer()$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer
~CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	virtual ~CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer()$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer
~CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	virtual ~CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer()$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer
~CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	virtual ~CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer()$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer
~CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	virtual ~CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer()$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer
~CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual ~CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer()$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Deserializer
~CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual ~CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer()$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer
~CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	virtual ~CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer()$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer
~CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	virtual ~CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer()$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer
~CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	virtual ~CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer()$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer
~CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	virtual ~CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer()$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer
~CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual ~CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer()$/;"	f	class:CLMsg1ForCLMsgLoopManagerForPipeQueue_Serializer
~CLMsg1ForCLNonThreadForMsgLoop	test/CLNonThreadForMsgLoopTester.cpp	/^	virtual ~CLMsg1ForCLNonThreadForMsgLoop()$/;"	f	class:CLMsg1ForCLNonThreadForMsgLoop
~CLMsg1ForCLNonThreadForMsgLoop_Deserializer	test/CLNonThreadForMsgLoopTester.cpp	/^	virtual ~CLMsg1ForCLNonThreadForMsgLoop_Deserializer()$/;"	f	class:CLMsg1ForCLNonThreadForMsgLoop_Deserializer
~CLMsg1ForCLNonThreadForMsgLoop_Serializer	test/CLNonThreadForMsgLoopTester.cpp	/^	virtual ~CLMsg1ForCLNonThreadForMsgLoop_Serializer()$/;"	f	class:CLMsg1ForCLNonThreadForMsgLoop_Serializer
~CLMsg1ForCLThreadForMsgLoop	test/CLThreadForMsgLoopTester.cpp	/^	virtual ~CLMsg1ForCLThreadForMsgLoop()$/;"	f	class:CLMsg1ForCLThreadForMsgLoop
~CLMsg1ForCLThreadForMsgLoop_Deserializer	test/CLThreadForMsgLoopTester.cpp	/^	virtual ~CLMsg1ForCLThreadForMsgLoop_Deserializer()$/;"	f	class:CLMsg1ForCLThreadForMsgLoop_Deserializer
~CLMsg1ForCLThreadForMsgLoop_Serializer	test/CLThreadForMsgLoopTester.cpp	/^	virtual ~CLMsg1ForCLThreadForMsgLoop_Serializer()$/;"	f	class:CLMsg1ForCLThreadForMsgLoop_Serializer
~CLMsg2ForCLMsgLoopManagerForPipeQueue	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual ~CLMsg2ForCLMsgLoopManagerForPipeQueue()$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue
~CLMsg2ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	virtual ~CLMsg2ForCLMsgLoopManagerForPipeQueue()$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue
~CLMsg2ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	virtual ~CLMsg2ForCLMsgLoopManagerForPipeQueue()$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue
~CLMsg2ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	virtual ~CLMsg2ForCLMsgLoopManagerForPipeQueue()$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue
~CLMsg2ForCLMsgLoopManagerForPipeQueue	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	virtual ~CLMsg2ForCLMsgLoopManagerForPipeQueue()$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue
~CLMsg2ForCLMsgLoopManagerForPipeQueue	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual ~CLMsg2ForCLMsgLoopManagerForPipeQueue()$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue
~CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual ~CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer()$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer
~CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	virtual ~CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer()$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer
~CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	virtual ~CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer()$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer
~CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	virtual ~CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer()$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer
~CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	virtual ~CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer()$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer
~CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual ~CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer()$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Deserializer
~CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer	test/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual ~CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer()$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer
~CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_exe_forgzh/test_for_ProcessPipeQueue/CLProcessPipeQueueTester.cpp	/^	virtual ~CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer()$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer
~CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	virtual ~CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer()$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer
~CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_exe_forgzh/test_for_SharedPipeQueue/CLSharedPipeQueueTester.cpp	/^	virtual ~CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer()$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer
~CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	virtual ~CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer()$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer
~CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer	test_for_me/CLMsgLoopManagerForPipeQueueTester.cpp	/^	virtual ~CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer()$/;"	f	class:CLMsg2ForCLMsgLoopManagerForPipeQueue_Serializer
~CLMsg2ForCLNonThreadForMsgLoop	test/CLNonThreadForMsgLoopTester.cpp	/^	virtual ~CLMsg2ForCLNonThreadForMsgLoop()$/;"	f	class:CLMsg2ForCLNonThreadForMsgLoop
~CLMsg2ForCLNonThreadForMsgLoop_Deserializer	test/CLNonThreadForMsgLoopTester.cpp	/^	virtual ~CLMsg2ForCLNonThreadForMsgLoop_Deserializer()$/;"	f	class:CLMsg2ForCLNonThreadForMsgLoop_Deserializer
~CLMsg2ForCLNonThreadForMsgLoop_Serializer	test/CLNonThreadForMsgLoopTester.cpp	/^	virtual ~CLMsg2ForCLNonThreadForMsgLoop_Serializer()$/;"	f	class:CLMsg2ForCLNonThreadForMsgLoop_Serializer
~CLMsg2ForCLThreadForMsgLoop	test/CLThreadForMsgLoopTester.cpp	/^	virtual ~CLMsg2ForCLThreadForMsgLoop()$/;"	f	class:CLMsg2ForCLThreadForMsgLoop
~CLMsg2ForCLThreadForMsgLoop_Deserializer	test/CLThreadForMsgLoopTester.cpp	/^	virtual ~CLMsg2ForCLThreadForMsgLoop_Deserializer()$/;"	f	class:CLMsg2ForCLThreadForMsgLoop_Deserializer
~CLMsg2ForCLThreadForMsgLoop_Serializer	test/CLThreadForMsgLoopTester.cpp	/^	virtual ~CLMsg2ForCLThreadForMsgLoop_Serializer()$/;"	f	class:CLMsg2ForCLThreadForMsgLoop_Serializer
~CLMsgLoopManagerForEpoll	src/CLMsgLoopManagerForEpoll.cpp	/^CLMsgLoopManagerForEpoll::~CLMsgLoopManagerForEpoll()$/;"	f	class:CLMsgLoopManagerForEpoll
~CLMsgLoopManagerForIOMultiplex	src/CLMsgLoopManagerForIOMultiplex.cpp	/^CLMsgLoopManagerForIOMultiplex::~CLMsgLoopManagerForIOMultiplex()$/;"	f	class:CLMsgLoopManagerForIOMultiplex
~CLMsgLoopManagerForPipeQueue	src/CLMsgLoopManagerForPipeQueue.cpp	/^CLMsgLoopManagerForPipeQueue::~CLMsgLoopManagerForPipeQueue()$/;"	f	class:CLMsgLoopManagerForPipeQueue
~CLMsgLoopManagerForSTLqueue	src/CLMsgLoopManagerForSTLqueue.cpp	/^CLMsgLoopManagerForSTLqueue::~CLMsgLoopManagerForSTLqueue()$/;"	f	class:CLMsgLoopManagerForSTLqueue
~CLMultiMsgDeserializer	src/CLMultiMsgDeserializer.cpp	/^CLMultiMsgDeserializer::~CLMultiMsgDeserializer()$/;"	f	class:CLMultiMsgDeserializer
~CLMultiMsgSerializer	src/CLMultiMsgSerializer.cpp	/^CLMultiMsgSerializer::~CLMultiMsgSerializer()$/;"	f	class:CLMultiMsgSerializer
~CLMutex	src/CLMutex.cpp	/^CLMutex::~CLMutex()$/;"	f	class:CLMutex
~CLMutexByPThread	src/CLMutexByPThread.cpp	/^CLMutexByPThread::~CLMutexByPThread()$/;"	f	class:CLMutexByPThread
~CLMutexByRecordLocking	src/CLMutexByRecordLocking.cpp	/^CLMutexByRecordLocking::~CLMutexByRecordLocking()$/;"	f	class:CLMutexByRecordLocking
~CLMutexByRecordLockingAndPThread	src/CLMutexByRecordLockingAndPThread.cpp	/^CLMutexByRecordLockingAndPThread::~CLMutexByRecordLockingAndPThread()$/;"	f	class:CLMutexByRecordLockingAndPThread
~CLMutexBySharedPThread	src/CLMutexBySharedPThread.cpp	/^CLMutexBySharedPThread::~CLMutexBySharedPThread()$/;"	f	class:CLMutexBySharedPThread
~CLMutexInterface	src/CLMutexInterface.cpp	/^CLMutexInterface::~CLMutexInterface()$/;"	f	class:CLMutexInterface
~CLMyMsgLoopManagerForExecutiveFunctionTest	test/CLExecutiveFunctionForMsgLoopTester.cpp	/^	virtual ~CLMyMsgLoopManagerForExecutiveFunctionTest()$/;"	f	class:CLMyMsgLoopManagerForExecutiveFunctionTest
~CLNamedPipe	src/CLNamedPipe.cpp	/^CLNamedPipe::~CLNamedPipe()$/;"	f	class:CLNamedPipe
~CLNonThreadForMsgLoop	src/CLNonThreadForMsgLoop.cpp	/^CLNonThreadForMsgLoop::~CLNonThreadForMsgLoop()$/;"	f	class:CLNonThreadForMsgLoop
~CLPointerMsgDeserializer	src/CLPointerMsgDeserializer.cpp	/^CLPointerMsgDeserializer::~CLPointerMsgDeserializer()$/;"	f	class:CLPointerMsgDeserializer
~CLPointerMsgSerializer	src/CLPointerMsgSerializer.cpp	/^CLPointerMsgSerializer::~CLPointerMsgSerializer()$/;"	f	class:CLPointerMsgSerializer
~CLPrivateExecutiveCommunicationByNamedPipe	src/CLPrivateExecutiveCommunicationByNamedPipe.cpp	/^CLPrivateExecutiveCommunicationByNamedPipe::~CLPrivateExecutiveCommunicationByNamedPipe()$/;"	f	class:CLPrivateExecutiveCommunicationByNamedPipe
~CLPrivateMsgReceiverbyNamedPipe	src/CLPrivateMsgReceiverbyNamedPipe.cpp	/^CLPrivateMsgReceiverbyNamedPipe::~CLPrivateMsgReceiverbyNamedPipe()$/;"	f	class:CLPrivateMsgReceiverbyNamedPipe
~CLProcess	src/CLProcess.cpp	/^CLProcess::~CLProcess()$/;"	f	class:CLProcess
~CLProcessFunctionForExec	src/CLProcessFunctionForExec.cpp	/^CLProcessFunctionForExec::~CLProcessFunctionForExec()$/;"	f	class:CLProcessFunctionForExec
~CLProtoEncapForDefaultMsgFormat	src/CLProtoEncapForDefaultMsgFormat.cpp	/^CLProtoEncapForDefaultMsgFormat::~CLProtoEncapForDefaultMsgFormat()$/;"	f	class:CLProtoEncapForDefaultMsgFormat
~CLProtoParser	src/CLProtoParser.cpp	/^CLProtoParser::~CLProtoParser()$/;"	f	class:CLProtoParser
~CLProtoParserForDefaultMsgFormat	src/CLProtoParserForDefaultMsgFormat.cpp	/^CLProtoParserForDefaultMsgFormat::~CLProtoParserForDefaultMsgFormat()$/;"	f	class:CLProtoParserForDefaultMsgFormat
~CLProtoParserForPointerMsg	src/CLProtoParserForPointerMsg.cpp	/^CLProtoParserForPointerMsg::~CLProtoParserForPointerMsg()$/;"	f	class:CLProtoParserForPointerMsg
~CLProtocolDataPoster	src/CLProtocolDataPoster.cpp	/^CLProtocolDataPoster::~CLProtocolDataPoster()$/;"	f	class:CLProtocolDataPoster
~CLProtocolEncapsulator	src/CLProtocolEncapsulator.cpp	/^CLProtocolEncapsulator::~CLProtocolEncapsulator()$/;"	f	class:CLProtocolEncapsulator
~CLQuitMessage	test_for_exe_forgzh/test_for_SelfPrivatePipeQueue/CLSelfPostPrivatePipeQueueTester.cpp	/^	virtual ~CLQuitMessage()$/;"	f	class:CLQuitMessage
~CLQuitMessage	test_for_exe_forgzh/test_for_threadPipeQueue/CLThreadPostPrivatePipeQueueTester.cpp	/^	virtual ~CLQuitMessage()$/;"	f	class:CLQuitMessage
~CLSTLQueue	src/CLSTLQueue.cpp	/^CLSTLQueue::~CLSTLQueue()$/;"	f	class:CLSTLQueue
~CLSharedConditionVariableImpl	src/CLSharedConditionVariableImpl.cpp	/^CLSharedConditionVariableImpl::~CLSharedConditionVariableImpl()$/;"	f	class:CLSharedConditionVariableImpl
~CLSharedEventImpl	src/CLSharedEventImpl.cpp	/^CLSharedEventImpl::~CLSharedEventImpl()$/;"	f	class:CLSharedEventImpl
~CLSharedExecutiveCommunicationByNamedPipe	src/CLSharedExecutiveCommunicationByNamedPipe.cpp	/^CLSharedExecutiveCommunicationByNamedPipe::~CLSharedExecutiveCommunicationByNamedPipe()$/;"	f	class:CLSharedExecutiveCommunicationByNamedPipe
~CLSharedMemory	src/CLSharedMemory.cpp	/^CLSharedMemory::~CLSharedMemory()$/;"	f	class:CLSharedMemory
~CLSharedMsgReceiverByNamedPipe	src/CLSharedMsgReceiverByNamedPipe.cpp	/^CLSharedMsgReceiverByNamedPipe::~CLSharedMsgReceiverByNamedPipe()$/;"	f	class:CLSharedMsgReceiverByNamedPipe
~CLSharedMutexImpl	src/CLSharedMutexImpl.cpp	/^CLSharedMutexImpl::~CLSharedMutexImpl()$/;"	f	class:CLSharedMutexImpl
~CLSharedObjectAllocator	include/CLSharedObjectAllocator.h	/^CLSharedObjectAllocator<TSharedObjectPool, TSharedObject>::~CLSharedObjectAllocator()$/;"	f	class:CLSharedObjectAllocator
~CLSharedObjectsImpl	src/CLSharedObjectsImpl.cpp	/^CLSharedObjectsImpl::~CLSharedObjectsImpl()$/;"	f	class:CLSharedObjectsImpl
~CLSocket	src/CLSocket.cpp	/^CLSocket::~CLSocket()$/;"	f	class:CLSocket
~CLSocketAddress	src/CLSocketAddress.cpp	/^CLSocketAddress::~CLSocketAddress()$/;"	f	class:CLSocketAddress
~CLStatus	src/CLStatus.cpp	/^CLStatus::~CLStatus()$/;"	f	class:CLStatus
~CLTCPClientArrivedMessage	include/CLTCPClientArrivedMessage.h	/^	virtual ~CLTCPClientArrivedMessage()$/;"	f	class:CLTCPClientArrivedMessage
~CLTCPClientSocket	src/CLTCPClientSocket.cpp	/^CLTCPClientSocket::~CLTCPClientSocket()$/;"	f	class:CLTCPClientSocket
~CLTCPListenSocket	src/CLTCPListenSocket.cpp	/^CLTCPListenSocket::~CLTCPListenSocket()$/;"	f	class:CLTCPListenSocket
~CLTestAddMsgForCLMessageLoopManager	test/CLMessageLoopManagerTester.cpp	/^	virtual ~CLTestAddMsgForCLMessageLoopManager()$/;"	f	class:CLTestAddMsgForCLMessageLoopManager
~CLTestMsgForNameServer	test/CLExecutiveNameServerTester.cpp	/^	virtual ~CLTestMsgForNameServer()$/;"	f	class:CLTestMsgForNameServer
~CLThread	src/CLThread.cpp	/^CLThread::~CLThread()$/;"	f	class:CLThread
~CLThreadCommunicationBySTLqueue	src/CLThreadCommunicationBySTLqueue.cpp	/^CLThreadCommunicationBySTLqueue::~CLThreadCommunicationBySTLqueue()$/;"	f	class:CLThreadCommunicationBySTLqueue
~CLThreadDriv	test/CLThreadTester.cpp	/^	virtual ~CLThreadDriv()$/;"	f	class:CLThreadDriv
~CLThreadForMsgLoop	src/CLThreadForMsgLoop.cpp	/^CLThreadForMsgLoop::~CLThreadForMsgLoop()$/;"	f	class:CLThreadForMsgLoop
~CLThreadInitialFinishedNotifier	src/CLThreadInitialFinishedNotifier.cpp	/^CLThreadInitialFinishedNotifier::~CLThreadInitialFinishedNotifier()$/;"	f	class:CLThreadInitialFinishedNotifier
~CLTimerApplyMsgDeserializer	src/CLTimerApplyMsgDeserializer.cpp	/^CLTimerApplyMsgDeserializer::~CLTimerApplyMsgDeserializer()$/;"	f	class:CLTimerApplyMsgDeserializer
~CLTimerApplyMsgSerializer	src/CLTimerApplyMsgSerializer.cpp	/^CLTimerApplyMsgSerializer::~CLTimerApplyMsgSerializer()$/;"	f	class:CLTimerApplyMsgSerializer
~CLTimerFd	src/CLTimerFd.cpp	/^CLTimerFd::~CLTimerFd()$/;"	f	class:CLTimerFd
~CLTimerMsgObserver	timer/CLTimerMsgObserver.cpp	/^CLTimerMsgObserver::~CLTimerMsgObserver()$/;"	f	class:CLTimerMsgObserver
~CLTimerOutNotifyMsgDeserializer	src/CLTimerOutNotifyMsgDeserializer.cpp	/^CLTimerOutNotifyMsgDeserializer::~CLTimerOutNotifyMsgDeserializer()$/;"	f	class:CLTimerOutNotifyMsgDeserializer
~CLTimerOutNotifyMsgSerializer	src/CLTimerOutNotifyMsgSerializer.cpp	/^CLTimerOutNotifyMsgSerializer::~CLTimerOutNotifyMsgSerializer()$/;"	f	class:CLTimerOutNotifyMsgSerializer
~CLUDPClientSocket	src/CLUDPClientSocket.cpp	/^CLUDPClientSocket::~CLUDPClientSocket()$/;"	f	class:CLUDPClientSocket
~CLUDPServerSocket	src/CLUDPServerSocket.cpp	/^CLUDPServerSocket::~CLUDPServerSocket()$/;"	f	class:CLUDPServerSocket
~CThreadFunctionForCLMessageQueue	test/CLMessageQueueBySTLqueueTester.cpp	/^	virtual ~CThreadFunctionForCLMessageQueue()$/;"	f	class:CThreadFunctionForCLMessageQueue
~CThreadFunctionForCLMessageQueue2	test/CLMessageQueueBySTLqueueTester.cpp	/^	virtual ~CThreadFunctionForCLMessageQueue2()$/;"	f	class:CThreadFunctionForCLMessageQueue2
~CThreadFunctionForCLThread	test/CLThreadTester.cpp	/^	virtual ~CThreadFunctionForCLThread()$/;"	f	class:CThreadFunctionForCLThread
~Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^	virtual ~Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg()$/;"	f	class:Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg
~Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test_for_exe_forgzh/test_for_processProvider/CLProcessTestProvider.cpp	/^	virtual ~Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg()$/;"	f	class:Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg
~Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test_for_exec/test_for_CLExecutiveCommunicationByNamedPipe/test.cpp	/^	virtual ~Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg()$/;"	f	class:Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg
~Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^	virtual ~Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer()$/;"	f	class:Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer
~Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer	test_for_exe_forgzh/test_for_processProvider/CLProcessTestProvider.cpp	/^	virtual ~Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer()$/;"	f	class:Test2MsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer
~Test2MsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg	test/CLMessageQueueByNamedPipeTester.cpp	/^	virtual ~Test2MsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg()$/;"	f	class:Test2MsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg
~Test2MsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsgDeserializer	test/CLMessageQueueByNamedPipeTester.cpp	/^	virtual ~Test2MsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsgDeserializer()$/;"	f	class:Test2MsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsgDeserializer
~TestClassForCLMessageLoopManager	test/CLMessageLoopManagerTester.cpp	/^	virtual ~TestClassForCLMessageLoopManager()$/;"	f	class:TestClassForCLMessageLoopManager
~TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^	virtual ~TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg()$/;"	f	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg
~TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test_for_exe_forgzh/test_for_processProvider/CLProcessTestProvider.cpp	/^	virtual ~TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg()$/;"	f	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg
~TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test_for_exec/test_for_CLExecutiveCommunicationByNamedPipe/test.cpp	/^	virtual ~TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg()$/;"	f	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg
~TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg	test_for_exec/test_for_CLNonThreadForMsgLoop_Stress_Testing/test.cpp	/^	virtual ~TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg()$/;"	f	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsg
~TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer	test/CLExecutiveCommunicationByNamedPipeTester.cpp	/^	virtual ~TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer()$/;"	f	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer
~TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer	test_for_exe_forgzh/test_for_processProvider/CLProcessTestProvider.cpp	/^	virtual ~TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer()$/;"	f	class:TestMsgForCLExecutiveCommunicationByNamedPipe_PrivateQueueForSelfPostMsgSerializer
~TestMsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg	test/CLMessageQueueByNamedPipeTester.cpp	/^	virtual ~TestMsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg()$/;"	f	class:TestMsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsg
~TestMsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsgDeserializer	test/CLMessageQueueByNamedPipeTester.cpp	/^	virtual ~TestMsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsgDeserializer()$/;"	f	class:TestMsgForCLMessageQueueByNamedPipe_PrivateQueueForSelfPostMsgDeserializer
~TestObserverForCLMessageLoopManager	test/CLMessageLoopManagerTester.cpp	/^	virtual ~TestObserverForCLMessageLoopManager()$/;"	f	class:TestObserverForCLMessageLoopManager
